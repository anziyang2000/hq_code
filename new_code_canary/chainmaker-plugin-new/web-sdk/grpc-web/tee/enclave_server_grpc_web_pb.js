/**
 * @fileoverview gRPC-Web generated client stub for tee
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: tee/enclave_server.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_request_pb = require('../common/request_pb.js')

var common_result_pb = require('../common/result_pb.js')

var common_rwset_pb = require('../common/rwset_pb.js')
const proto = {};
proto.tee = require('./enclave_server_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tee.EnclaveServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tee.EnclaveServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tee.InitEnclaveRequest,
 *   !proto.tee.InitEnclaveResponse>}
 */
const methodDescriptor_EnclaveServer_InitEnclave = new grpc.web.MethodDescriptor(
  '/tee.EnclaveServer/InitEnclave',
  grpc.web.MethodType.UNARY,
  proto.tee.InitEnclaveRequest,
  proto.tee.InitEnclaveResponse,
  /**
   * @param {!proto.tee.InitEnclaveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tee.InitEnclaveResponse.deserializeBinary
);


/**
 * @param {!proto.tee.InitEnclaveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tee.InitEnclaveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tee.InitEnclaveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveServerClient.prototype.initEnclave =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveServer/InitEnclave',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_InitEnclave,
      callback);
};


/**
 * @param {!proto.tee.InitEnclaveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tee.InitEnclaveResponse>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveServerPromiseClient.prototype.initEnclave =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveServer/InitEnclave',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_InitEnclave);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.TxRequest,
 *   !proto.tee.EnclaveResponse>}
 */
const methodDescriptor_EnclaveServer_DeployContract = new grpc.web.MethodDescriptor(
  '/tee.EnclaveServer/DeployContract',
  grpc.web.MethodType.UNARY,
  common_request_pb.TxRequest,
  proto.tee.EnclaveResponse,
  /**
   * @param {!proto.common.TxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tee.EnclaveResponse.deserializeBinary
);


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tee.EnclaveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tee.EnclaveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveServerClient.prototype.deployContract =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveServer/DeployContract',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_DeployContract,
      callback);
};


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tee.EnclaveResponse>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveServerPromiseClient.prototype.deployContract =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveServer/DeployContract',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_DeployContract);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.TxRequest,
 *   !proto.tee.EnclaveResponse>}
 */
const methodDescriptor_EnclaveServer_InvokeContract = new grpc.web.MethodDescriptor(
  '/tee.EnclaveServer/InvokeContract',
  grpc.web.MethodType.UNARY,
  common_request_pb.TxRequest,
  proto.tee.EnclaveResponse,
  /**
   * @param {!proto.common.TxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tee.EnclaveResponse.deserializeBinary
);


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tee.EnclaveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tee.EnclaveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveServerClient.prototype.invokeContract =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveServer/InvokeContract',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_InvokeContract,
      callback);
};


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tee.EnclaveResponse>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveServerPromiseClient.prototype.invokeContract =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveServer/InvokeContract',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_InvokeContract);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tee.RemoteAttestationRequest,
 *   !proto.tee.RemoteAttestationResponse>}
 */
const methodDescriptor_EnclaveServer_RemoteAttestationProve = new grpc.web.MethodDescriptor(
  '/tee.EnclaveServer/RemoteAttestationProve',
  grpc.web.MethodType.UNARY,
  proto.tee.RemoteAttestationRequest,
  proto.tee.RemoteAttestationResponse,
  /**
   * @param {!proto.tee.RemoteAttestationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tee.RemoteAttestationResponse.deserializeBinary
);


/**
 * @param {!proto.tee.RemoteAttestationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tee.RemoteAttestationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tee.RemoteAttestationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveServerClient.prototype.remoteAttestationProve =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveServer/RemoteAttestationProve',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_RemoteAttestationProve,
      callback);
};


/**
 * @param {!proto.tee.RemoteAttestationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tee.RemoteAttestationResponse>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveServerPromiseClient.prototype.remoteAttestationProve =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveServer/RemoteAttestationProve',
      request,
      metadata || {},
      methodDescriptor_EnclaveServer_RemoteAttestationProve);
};


module.exports = proto.tee;

