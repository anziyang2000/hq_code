// source: syscontract/private_compute.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.syscontract.PrivateComputeFunction', null, global);
goog.exportSymbol('proto.syscontract.PrivateComputePayload', null, global);
goog.exportSymbol('proto.syscontract.PrivateComputeRequest', null, global);
goog.exportSymbol('proto.syscontract.PrivateDeployPayload', null, global);
goog.exportSymbol('proto.syscontract.PrivateDeployRequest', null, global);
goog.exportSymbol('proto.syscontract.RemoteAttestationPayload', null, global);
goog.exportSymbol('proto.syscontract.RemoteAttestationRequest', null, global);
goog.exportSymbol('proto.syscontract.SignInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.RemoteAttestationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.RemoteAttestationRequest.repeatedFields_, null);
};
goog.inherits(proto.syscontract.RemoteAttestationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.RemoteAttestationRequest.displayName = 'proto.syscontract.RemoteAttestationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.RemoteAttestationPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.RemoteAttestationPayload.repeatedFields_, null);
};
goog.inherits(proto.syscontract.RemoteAttestationPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.RemoteAttestationPayload.displayName = 'proto.syscontract.RemoteAttestationPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.PrivateDeployRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.PrivateDeployRequest.repeatedFields_, null);
};
goog.inherits(proto.syscontract.PrivateDeployRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.PrivateDeployRequest.displayName = 'proto.syscontract.PrivateDeployRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.PrivateDeployPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.PrivateDeployPayload.repeatedFields_, null);
};
goog.inherits(proto.syscontract.PrivateDeployPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.PrivateDeployPayload.displayName = 'proto.syscontract.PrivateDeployPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.PrivateComputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.PrivateComputeRequest.repeatedFields_, null);
};
goog.inherits(proto.syscontract.PrivateComputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.PrivateComputeRequest.displayName = 'proto.syscontract.PrivateComputeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.PrivateComputePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.PrivateComputePayload.repeatedFields_, null);
};
goog.inherits(proto.syscontract.PrivateComputePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.PrivateComputePayload.displayName = 'proto.syscontract.PrivateComputePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.SignInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.SignInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.SignInfo.displayName = 'proto.syscontract.SignInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.RemoteAttestationRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.RemoteAttestationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.RemoteAttestationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.RemoteAttestationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RemoteAttestationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    signPairList: jspb.Message.toObjectList(msg.getSignPairList(),
    proto.syscontract.SignInfo.toObject, includeInstance),
    payload: (f = msg.getPayload()) && proto.syscontract.RemoteAttestationPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.RemoteAttestationRequest}
 */
proto.syscontract.RemoteAttestationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.RemoteAttestationRequest;
  return proto.syscontract.RemoteAttestationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.RemoteAttestationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.RemoteAttestationRequest}
 */
proto.syscontract.RemoteAttestationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.SignInfo;
      reader.readMessage(value,proto.syscontract.SignInfo.deserializeBinaryFromReader);
      msg.addSignPair(value);
      break;
    case 2:
      var value = new proto.syscontract.RemoteAttestationPayload;
      reader.readMessage(value,proto.syscontract.RemoteAttestationPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.RemoteAttestationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.RemoteAttestationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.RemoteAttestationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RemoteAttestationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignPairList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.syscontract.SignInfo.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syscontract.RemoteAttestationPayload.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignInfo sign_pair = 1;
 * @return {!Array<!proto.syscontract.SignInfo>}
 */
proto.syscontract.RemoteAttestationRequest.prototype.getSignPairList = function() {
  return /** @type{!Array<!proto.syscontract.SignInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.SignInfo, 1));
};


/**
 * @param {!Array<!proto.syscontract.SignInfo>} value
 * @return {!proto.syscontract.RemoteAttestationRequest} returns this
*/
proto.syscontract.RemoteAttestationRequest.prototype.setSignPairList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.syscontract.SignInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.SignInfo}
 */
proto.syscontract.RemoteAttestationRequest.prototype.addSignPair = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.syscontract.SignInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.RemoteAttestationRequest} returns this
 */
proto.syscontract.RemoteAttestationRequest.prototype.clearSignPairList = function() {
  return this.setSignPairList([]);
};


/**
 * optional RemoteAttestationPayload payload = 2;
 * @return {?proto.syscontract.RemoteAttestationPayload}
 */
proto.syscontract.RemoteAttestationRequest.prototype.getPayload = function() {
  return /** @type{?proto.syscontract.RemoteAttestationPayload} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.RemoteAttestationPayload, 2));
};


/**
 * @param {?proto.syscontract.RemoteAttestationPayload|undefined} value
 * @return {!proto.syscontract.RemoteAttestationRequest} returns this
*/
proto.syscontract.RemoteAttestationRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.RemoteAttestationRequest} returns this
 */
proto.syscontract.RemoteAttestationRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.RemoteAttestationRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.RemoteAttestationPayload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.RemoteAttestationPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.RemoteAttestationPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.RemoteAttestationPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RemoteAttestationPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orgIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.RemoteAttestationPayload}
 */
proto.syscontract.RemoteAttestationPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.RemoteAttestationPayload;
  return proto.syscontract.RemoteAttestationPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.RemoteAttestationPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.RemoteAttestationPayload}
 */
proto.syscontract.RemoteAttestationPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrgId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.RemoteAttestationPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.RemoteAttestationPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.RemoteAttestationPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RemoteAttestationPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrgIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.syscontract.RemoteAttestationPayload.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.RemoteAttestationPayload} returns this
 */
proto.syscontract.RemoteAttestationPayload.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string org_id = 2;
 * @return {!Array<string>}
 */
proto.syscontract.RemoteAttestationPayload.prototype.getOrgIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.syscontract.RemoteAttestationPayload} returns this
 */
proto.syscontract.RemoteAttestationPayload.prototype.setOrgIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.RemoteAttestationPayload} returns this
 */
proto.syscontract.RemoteAttestationPayload.prototype.addOrgId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.RemoteAttestationPayload} returns this
 */
proto.syscontract.RemoteAttestationPayload.prototype.clearOrgIdList = function() {
  return this.setOrgIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.PrivateDeployRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.PrivateDeployRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.PrivateDeployRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.PrivateDeployRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateDeployRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    signPairList: jspb.Message.toObjectList(msg.getSignPairList(),
    proto.syscontract.SignInfo.toObject, includeInstance),
    payload: (f = msg.getPayload()) && proto.syscontract.PrivateDeployPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.PrivateDeployRequest}
 */
proto.syscontract.PrivateDeployRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.PrivateDeployRequest;
  return proto.syscontract.PrivateDeployRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.PrivateDeployRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.PrivateDeployRequest}
 */
proto.syscontract.PrivateDeployRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.SignInfo;
      reader.readMessage(value,proto.syscontract.SignInfo.deserializeBinaryFromReader);
      msg.addSignPair(value);
      break;
    case 2:
      var value = new proto.syscontract.PrivateDeployPayload;
      reader.readMessage(value,proto.syscontract.PrivateDeployPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.PrivateDeployRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.PrivateDeployRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.PrivateDeployRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateDeployRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignPairList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.syscontract.SignInfo.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syscontract.PrivateDeployPayload.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignInfo sign_pair = 1;
 * @return {!Array<!proto.syscontract.SignInfo>}
 */
proto.syscontract.PrivateDeployRequest.prototype.getSignPairList = function() {
  return /** @type{!Array<!proto.syscontract.SignInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.SignInfo, 1));
};


/**
 * @param {!Array<!proto.syscontract.SignInfo>} value
 * @return {!proto.syscontract.PrivateDeployRequest} returns this
*/
proto.syscontract.PrivateDeployRequest.prototype.setSignPairList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.syscontract.SignInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.SignInfo}
 */
proto.syscontract.PrivateDeployRequest.prototype.addSignPair = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.syscontract.SignInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.PrivateDeployRequest} returns this
 */
proto.syscontract.PrivateDeployRequest.prototype.clearSignPairList = function() {
  return this.setSignPairList([]);
};


/**
 * optional PrivateDeployPayload payload = 2;
 * @return {?proto.syscontract.PrivateDeployPayload}
 */
proto.syscontract.PrivateDeployRequest.prototype.getPayload = function() {
  return /** @type{?proto.syscontract.PrivateDeployPayload} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.PrivateDeployPayload, 2));
};


/**
 * @param {?proto.syscontract.PrivateDeployPayload|undefined} value
 * @return {!proto.syscontract.PrivateDeployRequest} returns this
*/
proto.syscontract.PrivateDeployRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.PrivateDeployRequest} returns this
 */
proto.syscontract.PrivateDeployRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.PrivateDeployRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.PrivateDeployPayload.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.PrivateDeployPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.PrivateDeployPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.PrivateDeployPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateDeployPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeBytes: jspb.Message.getFieldWithDefault(msg, 1, ""),
    privateRlpData: jspb.Message.getFieldWithDefault(msg, 2, ""),
    passwd: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sigAlgo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    contractVersion: jspb.Message.getFieldWithDefault(msg, 6, ""),
    codeHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    orgIdList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    timeStamp: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.PrivateDeployPayload}
 */
proto.syscontract.PrivateDeployPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.PrivateDeployPayload;
  return proto.syscontract.PrivateDeployPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.PrivateDeployPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.PrivateDeployPayload}
 */
proto.syscontract.PrivateDeployPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeBytes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRlpData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigAlgo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeHash(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrgId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeStamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.PrivateDeployPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.PrivateDeployPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.PrivateDeployPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateDeployPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeBytes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrivateRlpData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPasswd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSigAlgo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContractVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCodeHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrgIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getTimeStamp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string code_bytes = 1;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getCodeBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setCodeBytes = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string private_rlp_data = 2;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getPrivateRlpData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setPrivateRlpData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string passwd = 3;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getPasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setPasswd = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sig_algo = 4;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getSigAlgo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setSigAlgo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string contract_name = 5;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string contract_version = 6;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getContractVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setContractVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string code_hash = 7;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getCodeHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setCodeHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string org_id = 8;
 * @return {!Array<string>}
 */
proto.syscontract.PrivateDeployPayload.prototype.getOrgIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setOrgIdList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.addOrgId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.clearOrgIdList = function() {
  return this.setOrgIdList([]);
};


/**
 * optional string time_stamp = 9;
 * @return {string}
 */
proto.syscontract.PrivateDeployPayload.prototype.getTimeStamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateDeployPayload} returns this
 */
proto.syscontract.PrivateDeployPayload.prototype.setTimeStamp = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.PrivateComputeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.PrivateComputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.PrivateComputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.PrivateComputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateComputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    signPairList: jspb.Message.toObjectList(msg.getSignPairList(),
    proto.syscontract.SignInfo.toObject, includeInstance),
    payload: (f = msg.getPayload()) && proto.syscontract.PrivateComputePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.PrivateComputeRequest}
 */
proto.syscontract.PrivateComputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.PrivateComputeRequest;
  return proto.syscontract.PrivateComputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.PrivateComputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.PrivateComputeRequest}
 */
proto.syscontract.PrivateComputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.SignInfo;
      reader.readMessage(value,proto.syscontract.SignInfo.deserializeBinaryFromReader);
      msg.addSignPair(value);
      break;
    case 2:
      var value = new proto.syscontract.PrivateComputePayload;
      reader.readMessage(value,proto.syscontract.PrivateComputePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.PrivateComputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.PrivateComputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.PrivateComputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateComputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignPairList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.syscontract.SignInfo.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syscontract.PrivateComputePayload.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignInfo sign_pair = 1;
 * @return {!Array<!proto.syscontract.SignInfo>}
 */
proto.syscontract.PrivateComputeRequest.prototype.getSignPairList = function() {
  return /** @type{!Array<!proto.syscontract.SignInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.SignInfo, 1));
};


/**
 * @param {!Array<!proto.syscontract.SignInfo>} value
 * @return {!proto.syscontract.PrivateComputeRequest} returns this
*/
proto.syscontract.PrivateComputeRequest.prototype.setSignPairList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.syscontract.SignInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.SignInfo}
 */
proto.syscontract.PrivateComputeRequest.prototype.addSignPair = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.syscontract.SignInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.PrivateComputeRequest} returns this
 */
proto.syscontract.PrivateComputeRequest.prototype.clearSignPairList = function() {
  return this.setSignPairList([]);
};


/**
 * optional PrivateComputePayload payload = 2;
 * @return {?proto.syscontract.PrivateComputePayload}
 */
proto.syscontract.PrivateComputeRequest.prototype.getPayload = function() {
  return /** @type{?proto.syscontract.PrivateComputePayload} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.PrivateComputePayload, 2));
};


/**
 * @param {?proto.syscontract.PrivateComputePayload|undefined} value
 * @return {!proto.syscontract.PrivateComputeRequest} returns this
*/
proto.syscontract.PrivateComputeRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.PrivateComputeRequest} returns this
 */
proto.syscontract.PrivateComputeRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.PrivateComputeRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.PrivateComputePayload.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.PrivateComputePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.PrivateComputePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.PrivateComputePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateComputePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    privateRlpData: jspb.Message.getFieldWithDefault(msg, 1, ""),
    passwd: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sigAlgo: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    codeHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orgIdList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    timeStamp: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.PrivateComputePayload}
 */
proto.syscontract.PrivateComputePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.PrivateComputePayload;
  return proto.syscontract.PrivateComputePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.PrivateComputePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.PrivateComputePayload}
 */
proto.syscontract.PrivateComputePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateRlpData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswd(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigAlgo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrgId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeStamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.PrivateComputePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.PrivateComputePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.PrivateComputePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.PrivateComputePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivateRlpData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPasswd();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSigAlgo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCodeHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrgIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getTimeStamp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string private_rlp_data = 1;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getPrivateRlpData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setPrivateRlpData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string passwd = 2;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getPasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setPasswd = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sig_algo = 3;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getSigAlgo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setSigAlgo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contract_name = 4;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string code_hash = 5;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getCodeHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setCodeHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string org_id = 6;
 * @return {!Array<string>}
 */
proto.syscontract.PrivateComputePayload.prototype.getOrgIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setOrgIdList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.addOrgId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.clearOrgIdList = function() {
  return this.setOrgIdList([]);
};


/**
 * optional string time_stamp = 7;
 * @return {string}
 */
proto.syscontract.PrivateComputePayload.prototype.getTimeStamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.PrivateComputePayload} returns this
 */
proto.syscontract.PrivateComputePayload.prototype.setTimeStamp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.SignInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.SignInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.SignInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SignInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientSign: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cert: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.SignInfo}
 */
proto.syscontract.SignInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.SignInfo;
  return proto.syscontract.SignInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.SignInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.SignInfo}
 */
proto.syscontract.SignInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSign(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.SignInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.SignInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.SignInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SignInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientSign();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCert();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_sign = 1;
 * @return {string}
 */
proto.syscontract.SignInfo.prototype.getClientSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.SignInfo} returns this
 */
proto.syscontract.SignInfo.prototype.setClientSign = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cert = 2;
 * @return {string}
 */
proto.syscontract.SignInfo.prototype.getCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.SignInfo} returns this
 */
proto.syscontract.SignInfo.prototype.setCert = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.syscontract.PrivateComputeFunction = {
  GET_CONTRACT: 0,
  GET_DATA: 1,
  SAVE_CA_CERT: 2,
  SAVE_DIR: 3,
  SAVE_DATA: 4,
  SAVE_ENCLAVE_REPORT: 5,
  GET_ENCLAVE_PROOF: 6,
  GET_CA_CERT: 7,
  GET_DIR: 8,
  CHECK_CALLER_CERT_AUTH: 9,
  GET_ENCLAVE_ENCRYPT_PUB_KEY: 10,
  GET_ENCLAVE_VERIFICATION_PUB_KEY: 11,
  GET_ENCLAVE_REPORT: 12,
  GET_ENCLAVE_CHALLENGE: 13,
  GET_ENCLAVE_SIGNATURE: 14,
  SAVE_REMOTE_ATTESTATION: 15
};

goog.object.extend(exports, proto.syscontract);
