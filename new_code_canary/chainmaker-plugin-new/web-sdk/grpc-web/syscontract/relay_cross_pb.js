// source: syscontract/relay_cross.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.syscontract.CancelInfo', null, global);
goog.exportSymbol('proto.syscontract.Code', null, global);
goog.exportSymbol('proto.syscontract.Code.Parameter', null, global);
goog.exportSymbol('proto.syscontract.ConfirmInfo', null, global);
goog.exportSymbol('proto.syscontract.CrossChainConfirm', null, global);
goog.exportSymbol('proto.syscontract.CrossChainConfirmUpChain', null, global);
goog.exportSymbol('proto.syscontract.CrossChainInfo', null, global);
goog.exportSymbol('proto.syscontract.CrossChainMsg', null, global);
goog.exportSymbol('proto.syscontract.CrossChainStateValue', null, global);
goog.exportSymbol('proto.syscontract.CrossChainStateValue.Parameter', null, global);
goog.exportSymbol('proto.syscontract.CrossChainTxUpChain', null, global);
goog.exportSymbol('proto.syscontract.CrossType', null, global);
goog.exportSymbol('proto.syscontract.CrossType.Parameter', null, global);
goog.exportSymbol('proto.syscontract.DeleteErrorCrossChainTxList', null, global);
goog.exportSymbol('proto.syscontract.DeleteErrorCrossChainTxList.Parameter', null, global);
goog.exportSymbol('proto.syscontract.EventDataType', null, global);
goog.exportSymbol('proto.syscontract.EventDataType.Parameter', null, global);
goog.exportSymbol('proto.syscontract.EventName', null, global);
goog.exportSymbol('proto.syscontract.EventName.Parameter', null, global);
goog.exportSymbol('proto.syscontract.GetCrossChainInfo', null, global);
goog.exportSymbol('proto.syscontract.GetCrossChainInfo.Parameter', null, global);
goog.exportSymbol('proto.syscontract.GetCrossChainInfoByRange', null, global);
goog.exportSymbol('proto.syscontract.GetCrossChainInfoByRange.Parameter', null, global);
goog.exportSymbol('proto.syscontract.GetGateway', null, global);
goog.exportSymbol('proto.syscontract.GetGateway.Parameter', null, global);
goog.exportSymbol('proto.syscontract.GetGatewayByRange', null, global);
goog.exportSymbol('proto.syscontract.GetGatewayByRange.Parameter', null, global);
goog.exportSymbol('proto.syscontract.RelayCrossFunction', null, global);
goog.exportSymbol('proto.syscontract.SaveCrossChainInfo', null, global);
goog.exportSymbol('proto.syscontract.SaveCrossChainInfo.Parameter', null, global);
goog.exportSymbol('proto.syscontract.SaveGateway', null, global);
goog.exportSymbol('proto.syscontract.SaveGateway.Parameter', null, global);
goog.exportSymbol('proto.syscontract.TxContent', null, global);
goog.exportSymbol('proto.syscontract.TxContentWithVerify', null, global);
goog.exportSymbol('proto.syscontract.TxResultValue', null, global);
goog.exportSymbol('proto.syscontract.TxResultValue.Parameter', null, global);
goog.exportSymbol('proto.syscontract.TxVerifyRsult', null, global);
goog.exportSymbol('proto.syscontract.TxVerifyRsult.Parameter', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainConfirm', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainConfirm.Parameter', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainResult', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainResult.Parameter', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainTry', null, global);
goog.exportSymbol('proto.syscontract.UpdateCrossChainTry.Parameter', null, global);
goog.exportSymbol('proto.syscontract.UpdateGateway', null, global);
goog.exportSymbol('proto.syscontract.UpdateGateway.Parameter', null, global);
goog.exportSymbol('proto.syscontract.UpdateSrcGatewayConfirm', null, global);
goog.exportSymbol('proto.syscontract.UpdateSrcGatewayConfirm.Parameter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.SaveGateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.SaveGateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.SaveGateway.displayName = 'proto.syscontract.SaveGateway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.UpdateGateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.UpdateGateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.UpdateGateway.displayName = 'proto.syscontract.UpdateGateway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.GetGateway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.GetGateway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.GetGateway.displayName = 'proto.syscontract.GetGateway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.GetGatewayByRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.GetGatewayByRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.GetGatewayByRange.displayName = 'proto.syscontract.GetGatewayByRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.SaveCrossChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.SaveCrossChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.SaveCrossChainInfo.displayName = 'proto.syscontract.SaveCrossChainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.UpdateCrossChainTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.UpdateCrossChainTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.UpdateCrossChainTry.displayName = 'proto.syscontract.UpdateCrossChainTry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.UpdateCrossChainResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.UpdateCrossChainResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.UpdateCrossChainResult.displayName = 'proto.syscontract.UpdateCrossChainResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.DeleteErrorCrossChainTxList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.DeleteErrorCrossChainTxList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.DeleteErrorCrossChainTxList.displayName = 'proto.syscontract.DeleteErrorCrossChainTxList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.UpdateCrossChainConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.UpdateCrossChainConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.UpdateCrossChainConfirm.displayName = 'proto.syscontract.UpdateCrossChainConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.UpdateSrcGatewayConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.UpdateSrcGatewayConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.UpdateSrcGatewayConfirm.displayName = 'proto.syscontract.UpdateSrcGatewayConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.GetCrossChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.GetCrossChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.GetCrossChainInfo.displayName = 'proto.syscontract.GetCrossChainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.GetCrossChainInfoByRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.GetCrossChainInfoByRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.GetCrossChainInfoByRange.displayName = 'proto.syscontract.GetCrossChainInfoByRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.EventDataType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.EventDataType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.EventDataType.displayName = 'proto.syscontract.EventDataType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.Code = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.Code, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.Code.displayName = 'proto.syscontract.Code';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.CrossType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossType.displayName = 'proto.syscontract.CrossType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.TxResultValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.TxResultValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.TxResultValue.displayName = 'proto.syscontract.TxResultValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.TxVerifyRsult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.TxVerifyRsult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.TxVerifyRsult.displayName = 'proto.syscontract.TxVerifyRsult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainStateValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.CrossChainStateValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainStateValue.displayName = 'proto.syscontract.CrossChainStateValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.EventName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.EventName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.EventName.displayName = 'proto.syscontract.EventName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.CrossChainInfo.repeatedFields_, null);
};
goog.inherits(proto.syscontract.CrossChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainInfo.displayName = 'proto.syscontract.CrossChainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.CrossChainMsg.repeatedFields_, null);
};
goog.inherits(proto.syscontract.CrossChainMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainMsg.displayName = 'proto.syscontract.CrossChainMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.TxContentWithVerify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.TxContentWithVerify.repeatedFields_, null);
};
goog.inherits(proto.syscontract.TxContentWithVerify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.TxContentWithVerify.displayName = 'proto.syscontract.TxContentWithVerify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.ConfirmInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.ConfirmInfo.repeatedFields_, null);
};
goog.inherits(proto.syscontract.ConfirmInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.ConfirmInfo.displayName = 'proto.syscontract.ConfirmInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.CrossChainConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainConfirm.displayName = 'proto.syscontract.CrossChainConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.TxContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.TxContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.TxContent.displayName = 'proto.syscontract.TxContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CancelInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.CancelInfo.repeatedFields_, null);
};
goog.inherits(proto.syscontract.CancelInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CancelInfo.displayName = 'proto.syscontract.CancelInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainTxUpChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.CrossChainTxUpChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainTxUpChain.displayName = 'proto.syscontract.CrossChainTxUpChain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.CrossChainConfirmUpChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.CrossChainConfirmUpChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.CrossChainConfirmUpChain.displayName = 'proto.syscontract.CrossChainConfirmUpChain';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.SaveGateway.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.SaveGateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.SaveGateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SaveGateway.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.SaveGateway}
 */
proto.syscontract.SaveGateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.SaveGateway;
  return proto.syscontract.SaveGateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.SaveGateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.SaveGateway}
 */
proto.syscontract.SaveGateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.SaveGateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.SaveGateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.SaveGateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SaveGateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.SaveGateway.Parameter = {
  GATEWAY_INFO_BYTE: 0
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.UpdateGateway.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.UpdateGateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.UpdateGateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateGateway.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.UpdateGateway}
 */
proto.syscontract.UpdateGateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.UpdateGateway;
  return proto.syscontract.UpdateGateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.UpdateGateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.UpdateGateway}
 */
proto.syscontract.UpdateGateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.UpdateGateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.UpdateGateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.UpdateGateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateGateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.UpdateGateway.Parameter = {
  GATEWAY_ID: 0,
  GATEWAY_INFO_BYTE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.GetGateway.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.GetGateway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.GetGateway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetGateway.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.GetGateway}
 */
proto.syscontract.GetGateway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.GetGateway;
  return proto.syscontract.GetGateway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.GetGateway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.GetGateway}
 */
proto.syscontract.GetGateway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.GetGateway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.GetGateway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.GetGateway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetGateway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.GetGateway.Parameter = {
  GATEWAY_ID: 0
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.GetGatewayByRange.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.GetGatewayByRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.GetGatewayByRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetGatewayByRange.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.GetGatewayByRange}
 */
proto.syscontract.GetGatewayByRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.GetGatewayByRange;
  return proto.syscontract.GetGatewayByRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.GetGatewayByRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.GetGatewayByRange}
 */
proto.syscontract.GetGatewayByRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.GetGatewayByRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.GetGatewayByRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.GetGatewayByRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetGatewayByRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.GetGatewayByRange.Parameter = {
  START_GATEWAY_ID: 0,
  STOP_GATEWAY_ID: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.SaveCrossChainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.SaveCrossChainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.SaveCrossChainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SaveCrossChainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.SaveCrossChainInfo}
 */
proto.syscontract.SaveCrossChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.SaveCrossChainInfo;
  return proto.syscontract.SaveCrossChainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.SaveCrossChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.SaveCrossChainInfo}
 */
proto.syscontract.SaveCrossChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.SaveCrossChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.SaveCrossChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.SaveCrossChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.SaveCrossChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.SaveCrossChainInfo.Parameter = {
  CROSS_CHAIN_INFO_BYTE: 0
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.UpdateCrossChainTry.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.UpdateCrossChainTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.UpdateCrossChainTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainTry.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.UpdateCrossChainTry}
 */
proto.syscontract.UpdateCrossChainTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.UpdateCrossChainTry;
  return proto.syscontract.UpdateCrossChainTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.UpdateCrossChainTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.UpdateCrossChainTry}
 */
proto.syscontract.UpdateCrossChainTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.UpdateCrossChainTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.UpdateCrossChainTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.UpdateCrossChainTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.UpdateCrossChainTry.Parameter = {
  CROSS_CHAIN_ID: 0,
  CROSS_CHAIN_TX_BYTE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.UpdateCrossChainResult.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.UpdateCrossChainResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.UpdateCrossChainResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainResult.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.UpdateCrossChainResult}
 */
proto.syscontract.UpdateCrossChainResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.UpdateCrossChainResult;
  return proto.syscontract.UpdateCrossChainResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.UpdateCrossChainResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.UpdateCrossChainResult}
 */
proto.syscontract.UpdateCrossChainResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.UpdateCrossChainResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.UpdateCrossChainResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.UpdateCrossChainResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.UpdateCrossChainResult.Parameter = {
  CROSS_CHAIN_ID: 0,
  CROSS_CHAIN_RESULT: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.DeleteErrorCrossChainTxList.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.DeleteErrorCrossChainTxList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.DeleteErrorCrossChainTxList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.DeleteErrorCrossChainTxList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.DeleteErrorCrossChainTxList}
 */
proto.syscontract.DeleteErrorCrossChainTxList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.DeleteErrorCrossChainTxList;
  return proto.syscontract.DeleteErrorCrossChainTxList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.DeleteErrorCrossChainTxList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.DeleteErrorCrossChainTxList}
 */
proto.syscontract.DeleteErrorCrossChainTxList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.DeleteErrorCrossChainTxList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.DeleteErrorCrossChainTxList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.DeleteErrorCrossChainTxList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.DeleteErrorCrossChainTxList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.DeleteErrorCrossChainTxList.Parameter = {
  CROSS_CHAIN_ID: 0
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.UpdateCrossChainConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.UpdateCrossChainConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.UpdateCrossChainConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.UpdateCrossChainConfirm}
 */
proto.syscontract.UpdateCrossChainConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.UpdateCrossChainConfirm;
  return proto.syscontract.UpdateCrossChainConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.UpdateCrossChainConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.UpdateCrossChainConfirm}
 */
proto.syscontract.UpdateCrossChainConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.UpdateCrossChainConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.UpdateCrossChainConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.UpdateCrossChainConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateCrossChainConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.UpdateCrossChainConfirm.Parameter = {
  CROSS_CHAIN_ID: 0,
  CROSS_CHAIN_CONFIRM_BYTE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.UpdateSrcGatewayConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.UpdateSrcGatewayConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.UpdateSrcGatewayConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateSrcGatewayConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.UpdateSrcGatewayConfirm}
 */
proto.syscontract.UpdateSrcGatewayConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.UpdateSrcGatewayConfirm;
  return proto.syscontract.UpdateSrcGatewayConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.UpdateSrcGatewayConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.UpdateSrcGatewayConfirm}
 */
proto.syscontract.UpdateSrcGatewayConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.UpdateSrcGatewayConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.UpdateSrcGatewayConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.UpdateSrcGatewayConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.UpdateSrcGatewayConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.UpdateSrcGatewayConfirm.Parameter = {
  CROSS_CHAIN_ID: 0,
  CONFIRM_RESULT: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.GetCrossChainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.GetCrossChainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.GetCrossChainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetCrossChainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.GetCrossChainInfo}
 */
proto.syscontract.GetCrossChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.GetCrossChainInfo;
  return proto.syscontract.GetCrossChainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.GetCrossChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.GetCrossChainInfo}
 */
proto.syscontract.GetCrossChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.GetCrossChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.GetCrossChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.GetCrossChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetCrossChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.GetCrossChainInfo.Parameter = {
  CROSS_CHAIN_ID: 0
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.GetCrossChainInfoByRange.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.GetCrossChainInfoByRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.GetCrossChainInfoByRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetCrossChainInfoByRange.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.GetCrossChainInfoByRange}
 */
proto.syscontract.GetCrossChainInfoByRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.GetCrossChainInfoByRange;
  return proto.syscontract.GetCrossChainInfoByRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.GetCrossChainInfoByRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.GetCrossChainInfoByRange}
 */
proto.syscontract.GetCrossChainInfoByRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.GetCrossChainInfoByRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.GetCrossChainInfoByRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.GetCrossChainInfoByRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.GetCrossChainInfoByRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.GetCrossChainInfoByRange.Parameter = {
  START_CROSS_CHAIN_ID: 0,
  STOP_CROSS_CHAIN_ID: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.EventDataType.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.EventDataType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.EventDataType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.EventDataType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.EventDataType}
 */
proto.syscontract.EventDataType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.EventDataType;
  return proto.syscontract.EventDataType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.EventDataType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.EventDataType}
 */
proto.syscontract.EventDataType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.EventDataType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.EventDataType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.EventDataType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.EventDataType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.EventDataType.Parameter = {
  STRING: 0,
  MAP: 1,
  BYTE: 2,
  BOOL: 3,
  INT: 4,
  FLOAT: 5,
  ARRAY: 6,
  HASH: 7,
  ADDRESS: 8
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.Code.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.Code.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.Code} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.Code.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.Code}
 */
proto.syscontract.Code.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.Code;
  return proto.syscontract.Code.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.Code} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.Code}
 */
proto.syscontract.Code.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.Code.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.Code.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.Code} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.Code.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.Code.Parameter = {
  GATEWAY_SUCCESS: 0,
  GATEWAY_TIMEOUT: 1,
  INVALID_PARAMETER: 2,
  TX_PROVE_ERROR: 3,
  CONTRACT_FAIL: 4,
  INTERNAL_ERROR: 5,
  RELAY_CHAIN_ERROR: 6
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossType.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossType}
 */
proto.syscontract.CrossType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossType;
  return proto.syscontract.CrossType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossType}
 */
proto.syscontract.CrossType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.CrossType.Parameter = {
  QUERY: 0,
  INVOKE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.TxResultValue.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.TxResultValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.TxResultValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxResultValue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.TxResultValue}
 */
proto.syscontract.TxResultValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.TxResultValue;
  return proto.syscontract.TxResultValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.TxResultValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.TxResultValue}
 */
proto.syscontract.TxResultValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.TxResultValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.TxResultValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.TxResultValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxResultValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.TxResultValue.Parameter = {
  TX_SUCCESS: 0,
  TX_TIMEOUT: 1,
  TX_FAIL: 2,
  TX_NOT_EXIST: 3,
  TX_NO_PERMISSIONS: 4,
  GATEWAY_NOT_FOUND: 5,
  GATEWAY_PINGPONG_ERROR: 6,
  CHAIN_PING_ERROR: 7,
  SRC_GATEWAY_GET_ERROR: 8
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.TxVerifyRsult.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.TxVerifyRsult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.TxVerifyRsult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxVerifyRsult.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.TxVerifyRsult}
 */
proto.syscontract.TxVerifyRsult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.TxVerifyRsult;
  return proto.syscontract.TxVerifyRsult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.TxVerifyRsult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.TxVerifyRsult}
 */
proto.syscontract.TxVerifyRsult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.TxVerifyRsult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.TxVerifyRsult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.TxVerifyRsult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxVerifyRsult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.TxVerifyRsult.Parameter = {
  VERIFY_SUCCESS: 0,
  VERIFY_INVALID: 1,
  VERIFY_NOT_NEED: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainStateValue.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainStateValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainStateValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainStateValue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainStateValue}
 */
proto.syscontract.CrossChainStateValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainStateValue;
  return proto.syscontract.CrossChainStateValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainStateValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainStateValue}
 */
proto.syscontract.CrossChainStateValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainStateValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainStateValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainStateValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainStateValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.CrossChainStateValue.Parameter = {
  NEW: 0,
  WAIT_EXECUTE: 1,
  WAIT_CONFIRM: 2,
  CONFIRM_END: 3,
  CANCEL_END: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.EventName.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.EventName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.EventName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.EventName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.EventName}
 */
proto.syscontract.EventName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.EventName;
  return proto.syscontract.EventName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.EventName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.EventName}
 */
proto.syscontract.EventName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.EventName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.EventName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.EventName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.EventName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.syscontract.EventName.Parameter = {
  NEW_CROSS_CHAIN: 0,
  CROSS_CHAIN_TRY_END: 1,
  UPADATE_RESULT_END: 2,
  GATEWAY_CONFIRM_END: 3,
  SRC_GATEWAY_CONFIRM_END: 4
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.CrossChainInfo.repeatedFields_ = [5,7,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    crossChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    crossChainName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    crossChainFlag: jspb.Message.getFieldWithDefault(msg, 3, ""),
    from: jspb.Message.getFieldWithDefault(msg, 4, ""),
    crossChainMsgList: jspb.Message.toObjectList(msg.getCrossChainMsgList(),
    proto.syscontract.CrossChainMsg.toObject, includeInstance),
    firstTxContent: (f = msg.getFirstTxContent()) && proto.syscontract.TxContentWithVerify.toObject(includeInstance, f),
    crossChainTxContentList: jspb.Message.toObjectList(msg.getCrossChainTxContentList(),
    proto.syscontract.TxContentWithVerify.toObject, includeInstance),
    crossChainResult: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    gatewayConfirmResultList: jspb.Message.toObjectList(msg.getGatewayConfirmResultList(),
    proto.syscontract.CrossChainConfirm.toObject, includeInstance),
    state: jspb.Message.getFieldWithDefault(msg, 10, 0),
    confirmInfo: (f = msg.getConfirmInfo()) && proto.syscontract.ConfirmInfo.toObject(includeInstance, f),
    cancelInfo: (f = msg.getCancelInfo()) && proto.syscontract.CancelInfo.toObject(includeInstance, f),
    confirmResult: (f = msg.getConfirmResult()) && proto.syscontract.CrossChainConfirm.toObject(includeInstance, f),
    timeout: jspb.Message.getFieldWithDefault(msg, 14, 0),
    crossType: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainInfo}
 */
proto.syscontract.CrossChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainInfo;
  return proto.syscontract.CrossChainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainInfo}
 */
proto.syscontract.CrossChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrossChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrossChainName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrossChainFlag(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 5:
      var value = new proto.syscontract.CrossChainMsg;
      reader.readMessage(value,proto.syscontract.CrossChainMsg.deserializeBinaryFromReader);
      msg.addCrossChainMsg(value);
      break;
    case 6:
      var value = new proto.syscontract.TxContentWithVerify;
      reader.readMessage(value,proto.syscontract.TxContentWithVerify.deserializeBinaryFromReader);
      msg.setFirstTxContent(value);
      break;
    case 7:
      var value = new proto.syscontract.TxContentWithVerify;
      reader.readMessage(value,proto.syscontract.TxContentWithVerify.deserializeBinaryFromReader);
      msg.addCrossChainTxContent(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrossChainResult(value);
      break;
    case 9:
      var value = new proto.syscontract.CrossChainConfirm;
      reader.readMessage(value,proto.syscontract.CrossChainConfirm.deserializeBinaryFromReader);
      msg.addGatewayConfirmResult(value);
      break;
    case 10:
      var value = /** @type {!proto.syscontract.CrossChainStateValue.Parameter} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 11:
      var value = new proto.syscontract.ConfirmInfo;
      reader.readMessage(value,proto.syscontract.ConfirmInfo.deserializeBinaryFromReader);
      msg.setConfirmInfo(value);
      break;
    case 12:
      var value = new proto.syscontract.CancelInfo;
      reader.readMessage(value,proto.syscontract.CancelInfo.deserializeBinaryFromReader);
      msg.setCancelInfo(value);
      break;
    case 13:
      var value = new proto.syscontract.CrossChainConfirm;
      reader.readMessage(value,proto.syscontract.CrossChainConfirm.deserializeBinaryFromReader);
      msg.setConfirmResult(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 19:
      var value = /** @type {!proto.syscontract.CrossType.Parameter} */ (reader.readEnum());
      msg.setCrossType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrossChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCrossChainName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCrossChainFlag();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCrossChainMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.syscontract.CrossChainMsg.serializeBinaryToWriter
    );
  }
  f = message.getFirstTxContent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.syscontract.TxContentWithVerify.serializeBinaryToWriter
    );
  }
  f = message.getCrossChainTxContentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.syscontract.TxContentWithVerify.serializeBinaryToWriter
    );
  }
  f = message.getCrossChainResult();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getGatewayConfirmResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.syscontract.CrossChainConfirm.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getConfirmInfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.syscontract.ConfirmInfo.serializeBinaryToWriter
    );
  }
  f = message.getCancelInfo();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.syscontract.CancelInfo.serializeBinaryToWriter
    );
  }
  f = message.getConfirmResult();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.syscontract.CrossChainConfirm.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getCrossType();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
};


/**
 * optional string cross_chain_id = 1;
 * @return {string}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setCrossChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cross_chain_name = 2;
 * @return {string}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setCrossChainName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cross_chain_flag = 3;
 * @return {string}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainFlag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setCrossChainFlag = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from = 4;
 * @return {string}
 */
proto.syscontract.CrossChainInfo.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated CrossChainMsg cross_chain_msg = 5;
 * @return {!Array<!proto.syscontract.CrossChainMsg>}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainMsgList = function() {
  return /** @type{!Array<!proto.syscontract.CrossChainMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.CrossChainMsg, 5));
};


/**
 * @param {!Array<!proto.syscontract.CrossChainMsg>} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setCrossChainMsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.syscontract.CrossChainMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CrossChainMsg}
 */
proto.syscontract.CrossChainInfo.prototype.addCrossChainMsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.syscontract.CrossChainMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearCrossChainMsgList = function() {
  return this.setCrossChainMsgList([]);
};


/**
 * optional TxContentWithVerify first_tx_content = 6;
 * @return {?proto.syscontract.TxContentWithVerify}
 */
proto.syscontract.CrossChainInfo.prototype.getFirstTxContent = function() {
  return /** @type{?proto.syscontract.TxContentWithVerify} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.TxContentWithVerify, 6));
};


/**
 * @param {?proto.syscontract.TxContentWithVerify|undefined} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setFirstTxContent = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearFirstTxContent = function() {
  return this.setFirstTxContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainInfo.prototype.hasFirstTxContent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated TxContentWithVerify cross_chain_tx_content = 7;
 * @return {!Array<!proto.syscontract.TxContentWithVerify>}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainTxContentList = function() {
  return /** @type{!Array<!proto.syscontract.TxContentWithVerify>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.TxContentWithVerify, 7));
};


/**
 * @param {!Array<!proto.syscontract.TxContentWithVerify>} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setCrossChainTxContentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.syscontract.TxContentWithVerify=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.TxContentWithVerify}
 */
proto.syscontract.CrossChainInfo.prototype.addCrossChainTxContent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.syscontract.TxContentWithVerify, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearCrossChainTxContentList = function() {
  return this.setCrossChainTxContentList([]);
};


/**
 * optional bool cross_chain_result = 8;
 * @return {boolean}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossChainResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setCrossChainResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated CrossChainConfirm gateway_confirm_result = 9;
 * @return {!Array<!proto.syscontract.CrossChainConfirm>}
 */
proto.syscontract.CrossChainInfo.prototype.getGatewayConfirmResultList = function() {
  return /** @type{!Array<!proto.syscontract.CrossChainConfirm>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.CrossChainConfirm, 9));
};


/**
 * @param {!Array<!proto.syscontract.CrossChainConfirm>} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setGatewayConfirmResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.syscontract.CrossChainConfirm=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CrossChainConfirm}
 */
proto.syscontract.CrossChainInfo.prototype.addGatewayConfirmResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.syscontract.CrossChainConfirm, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearGatewayConfirmResultList = function() {
  return this.setGatewayConfirmResultList([]);
};


/**
 * optional CrossChainStateValue.Parameter state = 10;
 * @return {!proto.syscontract.CrossChainStateValue.Parameter}
 */
proto.syscontract.CrossChainInfo.prototype.getState = function() {
  return /** @type {!proto.syscontract.CrossChainStateValue.Parameter} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.syscontract.CrossChainStateValue.Parameter} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional ConfirmInfo confirm_info = 11;
 * @return {?proto.syscontract.ConfirmInfo}
 */
proto.syscontract.CrossChainInfo.prototype.getConfirmInfo = function() {
  return /** @type{?proto.syscontract.ConfirmInfo} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.ConfirmInfo, 11));
};


/**
 * @param {?proto.syscontract.ConfirmInfo|undefined} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setConfirmInfo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearConfirmInfo = function() {
  return this.setConfirmInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainInfo.prototype.hasConfirmInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CancelInfo cancel_info = 12;
 * @return {?proto.syscontract.CancelInfo}
 */
proto.syscontract.CrossChainInfo.prototype.getCancelInfo = function() {
  return /** @type{?proto.syscontract.CancelInfo} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.CancelInfo, 12));
};


/**
 * @param {?proto.syscontract.CancelInfo|undefined} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setCancelInfo = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearCancelInfo = function() {
  return this.setCancelInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainInfo.prototype.hasCancelInfo = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CrossChainConfirm confirm_result = 13;
 * @return {?proto.syscontract.CrossChainConfirm}
 */
proto.syscontract.CrossChainInfo.prototype.getConfirmResult = function() {
  return /** @type{?proto.syscontract.CrossChainConfirm} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.CrossChainConfirm, 13));
};


/**
 * @param {?proto.syscontract.CrossChainConfirm|undefined} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
*/
proto.syscontract.CrossChainInfo.prototype.setConfirmResult = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.clearConfirmResult = function() {
  return this.setConfirmResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainInfo.prototype.hasConfirmResult = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int64 timeout = 14;
 * @return {number}
 */
proto.syscontract.CrossChainInfo.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional CrossType.Parameter cross_type = 19;
 * @return {!proto.syscontract.CrossType.Parameter}
 */
proto.syscontract.CrossChainInfo.prototype.getCrossType = function() {
  return /** @type {!proto.syscontract.CrossType.Parameter} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.syscontract.CrossType.Parameter} value
 * @return {!proto.syscontract.CrossChainInfo} returns this
 */
proto.syscontract.CrossChainInfo.prototype.setCrossType = function(value) {
  return jspb.Message.setProto3EnumField(this, 19, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.CrossChainMsg.repeatedFields_ = [5,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chainRid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, ""),
    identityList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    parameter: jspb.Message.getFieldWithDefault(msg, 6, ""),
    paramDataList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    paramDataTypeList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    extraData: jspb.Message.getFieldWithDefault(msg, 9, ""),
    confirmInfo: (f = msg.getConfirmInfo()) && proto.syscontract.ConfirmInfo.toObject(includeInstance, f),
    cancelInfo: (f = msg.getCancelInfo()) && proto.syscontract.CancelInfo.toObject(includeInstance, f),
    abi: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainMsg}
 */
proto.syscontract.CrossChainMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainMsg;
  return proto.syscontract.CrossChainMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainMsg}
 */
proto.syscontract.CrossChainMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainRid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addIdentity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamData(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamDataType(values[i]);
      }
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtraData(value);
      break;
    case 10:
      var value = new proto.syscontract.ConfirmInfo;
      reader.readMessage(value,proto.syscontract.ConfirmInfo.deserializeBinaryFromReader);
      msg.setConfirmInfo(value);
      break;
    case 11:
      var value = new proto.syscontract.CancelInfo;
      reader.readMessage(value,proto.syscontract.CancelInfo.deserializeBinaryFromReader);
      msg.setCancelInfo(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChainRid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdentityList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getParameter();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getParamDataList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getParamDataTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      8,
      f
    );
  }
  f = message.getExtraData();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getConfirmInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.syscontract.ConfirmInfo.serializeBinaryToWriter
    );
  }
  f = message.getCancelInfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.syscontract.CancelInfo.serializeBinaryToWriter
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string gateway_id = 1;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getGatewayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setGatewayId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chain_rid = 2;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getChainRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setChainRid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract_name = 3;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method = 4;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string identity = 5;
 * @return {!Array<string>}
 */
proto.syscontract.CrossChainMsg.prototype.getIdentityList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setIdentityList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.addIdentity = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.clearIdentityList = function() {
  return this.setIdentityList([]);
};


/**
 * optional string parameter = 6;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setParameter = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated int32 param_data = 7;
 * @return {!Array<number>}
 */
proto.syscontract.CrossChainMsg.prototype.getParamDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setParamDataList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.addParamData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.clearParamDataList = function() {
  return this.setParamDataList([]);
};


/**
 * repeated EventDataType.Parameter param_data_type = 8;
 * @return {!Array<!proto.syscontract.EventDataType.Parameter>}
 */
proto.syscontract.CrossChainMsg.prototype.getParamDataTypeList = function() {
  return /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<!proto.syscontract.EventDataType.Parameter>} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setParamDataTypeList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.syscontract.EventDataType.Parameter} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.addParamDataType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.clearParamDataTypeList = function() {
  return this.setParamDataTypeList([]);
};


/**
 * optional string extra_data = 9;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getExtraData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional ConfirmInfo confirm_info = 10;
 * @return {?proto.syscontract.ConfirmInfo}
 */
proto.syscontract.CrossChainMsg.prototype.getConfirmInfo = function() {
  return /** @type{?proto.syscontract.ConfirmInfo} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.ConfirmInfo, 10));
};


/**
 * @param {?proto.syscontract.ConfirmInfo|undefined} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
*/
proto.syscontract.CrossChainMsg.prototype.setConfirmInfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.clearConfirmInfo = function() {
  return this.setConfirmInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainMsg.prototype.hasConfirmInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CancelInfo cancel_info = 11;
 * @return {?proto.syscontract.CancelInfo}
 */
proto.syscontract.CrossChainMsg.prototype.getCancelInfo = function() {
  return /** @type{?proto.syscontract.CancelInfo} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.CancelInfo, 11));
};


/**
 * @param {?proto.syscontract.CancelInfo|undefined} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
*/
proto.syscontract.CrossChainMsg.prototype.setCancelInfo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.clearCancelInfo = function() {
  return this.setCancelInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainMsg.prototype.hasCancelInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string abi = 12;
 * @return {string}
 */
proto.syscontract.CrossChainMsg.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainMsg} returns this
 */
proto.syscontract.CrossChainMsg.prototype.setAbi = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.TxContentWithVerify.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.TxContentWithVerify.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.TxContentWithVerify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.TxContentWithVerify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxContentWithVerify.toObject = function(includeInstance, msg) {
  var f, obj = {
    txContent: (f = msg.getTxContent()) && proto.syscontract.TxContent.toObject(includeInstance, f),
    tryResultList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    txVerifyResult: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.TxContentWithVerify}
 */
proto.syscontract.TxContentWithVerify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.TxContentWithVerify;
  return proto.syscontract.TxContentWithVerify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.TxContentWithVerify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.TxContentWithVerify}
 */
proto.syscontract.TxContentWithVerify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.TxContent;
      reader.readMessage(value,proto.syscontract.TxContent.deserializeBinaryFromReader);
      msg.setTxContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTryResult(value);
      break;
    case 3:
      var value = /** @type {!proto.syscontract.TxVerifyRsult.Parameter} */ (reader.readEnum());
      msg.setTxVerifyResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.TxContentWithVerify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.TxContentWithVerify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.TxContentWithVerify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxContentWithVerify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxContent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.syscontract.TxContent.serializeBinaryToWriter
    );
  }
  f = message.getTryResultList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTxVerifyResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional TxContent tx_content = 1;
 * @return {?proto.syscontract.TxContent}
 */
proto.syscontract.TxContentWithVerify.prototype.getTxContent = function() {
  return /** @type{?proto.syscontract.TxContent} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.TxContent, 1));
};


/**
 * @param {?proto.syscontract.TxContent|undefined} value
 * @return {!proto.syscontract.TxContentWithVerify} returns this
*/
proto.syscontract.TxContentWithVerify.prototype.setTxContent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.TxContentWithVerify} returns this
 */
proto.syscontract.TxContentWithVerify.prototype.clearTxContent = function() {
  return this.setTxContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.TxContentWithVerify.prototype.hasTxContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string try_result = 2;
 * @return {!Array<string>}
 */
proto.syscontract.TxContentWithVerify.prototype.getTryResultList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.syscontract.TxContentWithVerify} returns this
 */
proto.syscontract.TxContentWithVerify.prototype.setTryResultList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.TxContentWithVerify} returns this
 */
proto.syscontract.TxContentWithVerify.prototype.addTryResult = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.TxContentWithVerify} returns this
 */
proto.syscontract.TxContentWithVerify.prototype.clearTryResultList = function() {
  return this.setTryResultList([]);
};


/**
 * optional TxVerifyRsult.Parameter tx_verify_result = 3;
 * @return {!proto.syscontract.TxVerifyRsult.Parameter}
 */
proto.syscontract.TxContentWithVerify.prototype.getTxVerifyResult = function() {
  return /** @type {!proto.syscontract.TxVerifyRsult.Parameter} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.syscontract.TxVerifyRsult.Parameter} value
 * @return {!proto.syscontract.TxContentWithVerify} returns this
 */
proto.syscontract.TxContentWithVerify.prototype.setTxVerifyResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.ConfirmInfo.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.ConfirmInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.ConfirmInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.ConfirmInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.ConfirmInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainRid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parameter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    paramDataList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    paramDataTypeList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    extraData: jspb.Message.getFieldWithDefault(msg, 8, ""),
    abi: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.ConfirmInfo}
 */
proto.syscontract.ConfirmInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.ConfirmInfo;
  return proto.syscontract.ConfirmInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.ConfirmInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.ConfirmInfo}
 */
proto.syscontract.ConfirmInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainRid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamData(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamDataType(values[i]);
      }
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtraData(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.ConfirmInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.ConfirmInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.ConfirmInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.ConfirmInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainRid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParameter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParamDataList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getParamDataTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
  f = message.getExtraData();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string chain_rid = 2;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getChainRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setChainRid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract_name = 3;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method = 4;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parameter = 5;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setParameter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated int32 param_data = 6;
 * @return {!Array<number>}
 */
proto.syscontract.ConfirmInfo.prototype.getParamDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setParamDataList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.addParamData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.clearParamDataList = function() {
  return this.setParamDataList([]);
};


/**
 * repeated EventDataType.Parameter param_data_type = 7;
 * @return {!Array<!proto.syscontract.EventDataType.Parameter>}
 */
proto.syscontract.ConfirmInfo.prototype.getParamDataTypeList = function() {
  return /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.syscontract.EventDataType.Parameter>} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setParamDataTypeList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.syscontract.EventDataType.Parameter} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.addParamDataType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.clearParamDataTypeList = function() {
  return this.setParamDataTypeList([]);
};


/**
 * optional string extra_data = 8;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getExtraData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string abi = 9;
 * @return {string}
 */
proto.syscontract.ConfirmInfo.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.ConfirmInfo} returns this
 */
proto.syscontract.ConfirmInfo.prototype.setAbi = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainConfirm}
 */
proto.syscontract.CrossChainConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainConfirm;
  return proto.syscontract.CrossChainConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainConfirm}
 */
proto.syscontract.CrossChainConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.syscontract.Code.Parameter} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Code.Parameter code = 1;
 * @return {!proto.syscontract.Code.Parameter}
 */
proto.syscontract.CrossChainConfirm.prototype.getCode = function() {
  return /** @type {!proto.syscontract.Code.Parameter} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.syscontract.Code.Parameter} value
 * @return {!proto.syscontract.CrossChainConfirm} returns this
 */
proto.syscontract.CrossChainConfirm.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.syscontract.CrossChainConfirm.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CrossChainConfirm} returns this
 */
proto.syscontract.CrossChainConfirm.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.TxContent.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.TxContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.TxContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tx: msg.getTx_asB64(),
    txResult: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gatewayId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chainRid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    txProve: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.TxContent}
 */
proto.syscontract.TxContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.TxContent;
  return proto.syscontract.TxContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.TxContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.TxContent}
 */
proto.syscontract.TxContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    case 3:
      var value = /** @type {!proto.syscontract.TxResultValue.Parameter} */ (reader.readEnum());
      msg.setTxResult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainRid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxProve(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.TxContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.TxContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.TxContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.TxContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTxResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGatewayId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChainRid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTxProve();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string tx_id = 1;
 * @return {string}
 */
proto.syscontract.TxContent.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.syscontract.TxContent.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx = 2;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.syscontract.TxContent.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.syscontract.TxContent.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional TxResultValue.Parameter tx_result = 3;
 * @return {!proto.syscontract.TxResultValue.Parameter}
 */
proto.syscontract.TxContent.prototype.getTxResult = function() {
  return /** @type {!proto.syscontract.TxResultValue.Parameter} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.syscontract.TxResultValue.Parameter} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setTxResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string gateway_id = 4;
 * @return {string}
 */
proto.syscontract.TxContent.prototype.getGatewayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setGatewayId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string chain_rid = 5;
 * @return {string}
 */
proto.syscontract.TxContent.prototype.getChainRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setChainRid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tx_prove = 6;
 * @return {string}
 */
proto.syscontract.TxContent.prototype.getTxProve = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setTxProve = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 block_height = 7;
 * @return {number}
 */
proto.syscontract.TxContent.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.syscontract.TxContent} returns this
 */
proto.syscontract.TxContent.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.CancelInfo.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CancelInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CancelInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CancelInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CancelInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainRid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parameter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    paramDataList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    paramDataTypeList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    extraData: jspb.Message.getFieldWithDefault(msg, 8, ""),
    abi: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CancelInfo}
 */
proto.syscontract.CancelInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CancelInfo;
  return proto.syscontract.CancelInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CancelInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CancelInfo}
 */
proto.syscontract.CancelInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainRid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamData(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParamDataType(values[i]);
      }
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtraData(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CancelInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CancelInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CancelInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CancelInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainRid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParameter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParamDataList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getParamDataTypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
  f = message.getExtraData();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAbi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string chain_rid = 2;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getChainRid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setChainRid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract_name = 3;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method = 4;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parameter = 5;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setParameter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated int32 param_data = 6;
 * @return {!Array<number>}
 */
proto.syscontract.CancelInfo.prototype.getParamDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setParamDataList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.addParamData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.clearParamDataList = function() {
  return this.setParamDataList([]);
};


/**
 * repeated EventDataType.Parameter param_data_type = 7;
 * @return {!Array<!proto.syscontract.EventDataType.Parameter>}
 */
proto.syscontract.CancelInfo.prototype.getParamDataTypeList = function() {
  return /** @type {!Array<!proto.syscontract.EventDataType.Parameter>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.syscontract.EventDataType.Parameter>} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setParamDataTypeList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.syscontract.EventDataType.Parameter} value
 * @param {number=} opt_index
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.addParamDataType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.clearParamDataTypeList = function() {
  return this.setParamDataTypeList([]);
};


/**
 * optional string extra_data = 8;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getExtraData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string abi = 9;
 * @return {string}
 */
proto.syscontract.CancelInfo.prototype.getAbi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.CancelInfo} returns this
 */
proto.syscontract.CancelInfo.prototype.setAbi = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainTxUpChain.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainTxUpChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainTxUpChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainTxUpChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txContentWithVerify: (f = msg.getTxContentWithVerify()) && proto.syscontract.TxContentWithVerify.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainTxUpChain}
 */
proto.syscontract.CrossChainTxUpChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainTxUpChain;
  return proto.syscontract.CrossChainTxUpChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainTxUpChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainTxUpChain}
 */
proto.syscontract.CrossChainTxUpChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.syscontract.TxContentWithVerify;
      reader.readMessage(value,proto.syscontract.TxContentWithVerify.deserializeBinaryFromReader);
      msg.setTxContentWithVerify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainTxUpChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainTxUpChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainTxUpChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainTxUpChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTxContentWithVerify();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syscontract.TxContentWithVerify.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.syscontract.CrossChainTxUpChain.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.syscontract.CrossChainTxUpChain} returns this
 */
proto.syscontract.CrossChainTxUpChain.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TxContentWithVerify tx_content_with_verify = 2;
 * @return {?proto.syscontract.TxContentWithVerify}
 */
proto.syscontract.CrossChainTxUpChain.prototype.getTxContentWithVerify = function() {
  return /** @type{?proto.syscontract.TxContentWithVerify} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.TxContentWithVerify, 2));
};


/**
 * @param {?proto.syscontract.TxContentWithVerify|undefined} value
 * @return {!proto.syscontract.CrossChainTxUpChain} returns this
*/
proto.syscontract.CrossChainTxUpChain.prototype.setTxContentWithVerify = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainTxUpChain} returns this
 */
proto.syscontract.CrossChainTxUpChain.prototype.clearTxContentWithVerify = function() {
  return this.setTxContentWithVerify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainTxUpChain.prototype.hasTxContentWithVerify = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.CrossChainConfirmUpChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.CrossChainConfirmUpChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainConfirmUpChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    crossChainConfirm: (f = msg.getCrossChainConfirm()) && proto.syscontract.CrossChainConfirm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.CrossChainConfirmUpChain}
 */
proto.syscontract.CrossChainConfirmUpChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.CrossChainConfirmUpChain;
  return proto.syscontract.CrossChainConfirmUpChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.CrossChainConfirmUpChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.CrossChainConfirmUpChain}
 */
proto.syscontract.CrossChainConfirmUpChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.syscontract.CrossChainConfirm;
      reader.readMessage(value,proto.syscontract.CrossChainConfirm.deserializeBinaryFromReader);
      msg.setCrossChainConfirm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.CrossChainConfirmUpChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.CrossChainConfirmUpChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.CrossChainConfirmUpChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCrossChainConfirm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.syscontract.CrossChainConfirm.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.syscontract.CrossChainConfirmUpChain} returns this
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CrossChainConfirm cross_chain_confirm = 2;
 * @return {?proto.syscontract.CrossChainConfirm}
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.getCrossChainConfirm = function() {
  return /** @type{?proto.syscontract.CrossChainConfirm} */ (
    jspb.Message.getWrapperField(this, proto.syscontract.CrossChainConfirm, 2));
};


/**
 * @param {?proto.syscontract.CrossChainConfirm|undefined} value
 * @return {!proto.syscontract.CrossChainConfirmUpChain} returns this
*/
proto.syscontract.CrossChainConfirmUpChain.prototype.setCrossChainConfirm = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.syscontract.CrossChainConfirmUpChain} returns this
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.clearCrossChainConfirm = function() {
  return this.setCrossChainConfirm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.syscontract.CrossChainConfirmUpChain.prototype.hasCrossChainConfirm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.syscontract.RelayCrossFunction = {
  SAVE_GATEWAY: 0,
  UPDATE_GATEWAY: 1,
  SAVE_CROSS_CHAIN_INFO: 2,
  GET_ERROR_CROSS_CHAIN_TX_LIST: 3,
  DELETE_ERROR_CROSS_CHAIN_TX_LIST: 4,
  UPDATE_CROSS_CHAIN_TRY: 5,
  UPDATE_CROSS_CHAIN_RESULT: 6,
  UPDATE_CROSS_CHAIN_CONFIRM: 7,
  UPDATE_SRC_GATEWAY_CONFIRM: 8,
  GET_GATEWAY_NUM: 9,
  GET_GATEWAY: 10,
  GET_GATEWAY_BY_RANGE: 11,
  GET_CROSS_CHAIN_NUM: 12,
  GET_CROSS_CHAIN_INFO: 13,
  GET_CROSS_CHAIN_INFO_BY_RANGE: 14,
  GET_NOT_END_CROSS_CHIAN_ID_LIST: 15
};

goog.object.extend(exports, proto.syscontract);
