// source: common/block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var accesscontrol_member_pb = require('../accesscontrol/member_pb.js');
goog.object.extend(proto, accesscontrol_member_pb);
var common_rwset_pb = require('../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
var common_transaction_pb = require('../common/transaction_pb.js');
goog.object.extend(proto, common_transaction_pb);
goog.exportSymbol('proto.common.AdditionalData', null, global);
goog.exportSymbol('proto.common.Block', null, global);
goog.exportSymbol('proto.common.BlockHeader', null, global);
goog.exportSymbol('proto.common.BlockInfo', null, global);
goog.exportSymbol('proto.common.BlockType', null, global);
goog.exportSymbol('proto.common.DAG', null, global);
goog.exportSymbol('proto.common.DAG.Neighbor', null, global);
goog.exportSymbol('proto.common.TxBatchInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.Block.repeatedFields_, null);
};
goog.inherits(proto.common.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Block.displayName = 'proto.common.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.common.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.BlockInfo.displayName = 'proto.common.BlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.AdditionalData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.AdditionalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.AdditionalData.displayName = 'proto.common.AdditionalData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TxBatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.TxBatchInfo.repeatedFields_, null);
};
goog.inherits(proto.common.TxBatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TxBatchInfo.displayName = 'proto.common.TxBatchInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.BlockHeader.displayName = 'proto.common.BlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.DAG = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.DAG.repeatedFields_, null);
};
goog.inherits(proto.common.DAG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.DAG.displayName = 'proto.common.DAG';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.DAG.Neighbor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.DAG.Neighbor.repeatedFields_, null);
};
goog.inherits(proto.common.DAG.Neighbor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.DAG.Neighbor.displayName = 'proto.common.DAG.Neighbor';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.Block.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.common.BlockHeader.toObject(includeInstance, f),
    dag: (f = msg.getDag()) && proto.common.DAG.toObject(includeInstance, f),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    common_transaction_pb.Transaction.toObject, includeInstance),
    additionalData: (f = msg.getAdditionalData()) && proto.common.AdditionalData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Block}
 */
proto.common.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Block;
  return proto.common.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Block}
 */
proto.common.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.BlockHeader;
      reader.readMessage(value,proto.common.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.common.DAG;
      reader.readMessage(value,proto.common.DAG.deserializeBinaryFromReader);
      msg.setDag(value);
      break;
    case 3:
      var value = new common_transaction_pb.Transaction;
      reader.readMessage(value,common_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 4:
      var value = new proto.common.AdditionalData;
      reader.readMessage(value,proto.common.AdditionalData.deserializeBinaryFromReader);
      msg.setAdditionalData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getDag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.DAG.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getAdditionalData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.AdditionalData.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockHeader header = 1;
 * @return {?proto.common.BlockHeader}
 */
proto.common.Block.prototype.getHeader = function() {
  return /** @type{?proto.common.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.common.BlockHeader, 1));
};


/**
 * @param {?proto.common.BlockHeader|undefined} value
 * @return {!proto.common.Block} returns this
*/
proto.common.Block.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Block} returns this
 */
proto.common.Block.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DAG dag = 2;
 * @return {?proto.common.DAG}
 */
proto.common.Block.prototype.getDag = function() {
  return /** @type{?proto.common.DAG} */ (
    jspb.Message.getWrapperField(this, proto.common.DAG, 2));
};


/**
 * @param {?proto.common.DAG|undefined} value
 * @return {!proto.common.Block} returns this
*/
proto.common.Block.prototype.setDag = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Block} returns this
 */
proto.common.Block.prototype.clearDag = function() {
  return this.setDag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Block.prototype.hasDag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Transaction txs = 3;
 * @return {!Array<!proto.common.Transaction>}
 */
proto.common.Block.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.common.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_transaction_pb.Transaction, 3));
};


/**
 * @param {!Array<!proto.common.Transaction>} value
 * @return {!proto.common.Block} returns this
*/
proto.common.Block.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Transaction}
 */
proto.common.Block.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.Block} returns this
 */
proto.common.Block.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional AdditionalData additional_data = 4;
 * @return {?proto.common.AdditionalData}
 */
proto.common.Block.prototype.getAdditionalData = function() {
  return /** @type{?proto.common.AdditionalData} */ (
    jspb.Message.getWrapperField(this, proto.common.AdditionalData, 4));
};


/**
 * @param {?proto.common.AdditionalData|undefined} value
 * @return {!proto.common.Block} returns this
*/
proto.common.Block.prototype.setAdditionalData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Block} returns this
 */
proto.common.Block.prototype.clearAdditionalData = function() {
  return this.setAdditionalData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Block.prototype.hasAdditionalData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.BlockInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.common.Block.toObject(includeInstance, f),
    rwsetListList: jspb.Message.toObjectList(msg.getRwsetListList(),
    common_rwset_pb.TxRWSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.BlockInfo}
 */
proto.common.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.BlockInfo;
  return proto.common.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.BlockInfo}
 */
proto.common.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Block;
      reader.readMessage(value,proto.common.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.addRwsetList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Block.serializeBinaryToWriter
    );
  }
  f = message.getRwsetListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional Block block = 1;
 * @return {?proto.common.Block}
 */
proto.common.BlockInfo.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, proto.common.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.common.BlockInfo} returns this
*/
proto.common.BlockInfo.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BlockInfo} returns this
 */
proto.common.BlockInfo.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BlockInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TxRWSet rwset_list = 2;
 * @return {!Array<!proto.common.TxRWSet>}
 */
proto.common.BlockInfo.prototype.getRwsetListList = function() {
  return /** @type{!Array<!proto.common.TxRWSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_rwset_pb.TxRWSet, 2));
};


/**
 * @param {!Array<!proto.common.TxRWSet>} value
 * @return {!proto.common.BlockInfo} returns this
*/
proto.common.BlockInfo.prototype.setRwsetListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.TxRWSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.TxRWSet}
 */
proto.common.BlockInfo.prototype.addRwsetList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.TxRWSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.BlockInfo} returns this
 */
proto.common.BlockInfo.prototype.clearRwsetListList = function() {
  return this.setRwsetListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.AdditionalData.prototype.toObject = function(opt_includeInstance) {
  return proto.common.AdditionalData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.AdditionalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AdditionalData.toObject = function(includeInstance, msg) {
  var f, obj = {
    extraDataMap: (f = msg.getExtraDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.AdditionalData}
 */
proto.common.AdditionalData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.AdditionalData;
  return proto.common.AdditionalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.AdditionalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.AdditionalData}
 */
proto.common.AdditionalData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getExtraDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.AdditionalData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.AdditionalData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.AdditionalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AdditionalData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtraDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * map<string, bytes> extra_data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.common.AdditionalData.prototype.getExtraDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.AdditionalData} returns this
 */
proto.common.AdditionalData.prototype.clearExtraDataMap = function() {
  this.getExtraDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.TxBatchInfo.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TxBatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TxBatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TxBatchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TxBatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    indexList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TxBatchInfo}
 */
proto.common.TxBatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TxBatchInfo;
  return proto.common.TxBatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TxBatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TxBatchInfo}
 */
proto.common.TxBatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addBatchIds(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIndex(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TxBatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TxBatchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TxBatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TxBatchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated string batch_ids = 1;
 * @return {!Array<string>}
 */
proto.common.TxBatchInfo.prototype.getBatchIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.setBatchIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.addBatchIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.clearBatchIdsList = function() {
  return this.setBatchIdsList([]);
};


/**
 * repeated uint32 index = 2;
 * @return {!Array<number>}
 */
proto.common.TxBatchInfo.prototype.getIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.setIndexList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.addIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.TxBatchInfo} returns this
 */
proto.common.TxBatchInfo.prototype.clearIndexList = function() {
  return this.setIndexList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.common.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockHash: msg.getBlockHash_asB64(),
    preBlockHash: msg.getPreBlockHash_asB64(),
    preConfHeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    txRoot: msg.getTxRoot_asB64(),
    dagHash: msg.getDagHash_asB64(),
    rwSetRoot: msg.getRwSetRoot_asB64(),
    blockTimestamp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    consensusArgs: msg.getConsensusArgs_asB64(),
    proposer: (f = msg.getProposer()) && accesscontrol_member_pb.Member.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.BlockHeader}
 */
proto.common.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.BlockHeader;
  return proto.common.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.BlockHeader}
 */
proto.common.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.common.BlockType} */ (reader.readEnum());
      msg.setBlockType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreBlockHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPreConfHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxCount(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxRoot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDagHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRwSetRoot(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTimestamp(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusArgs(value);
      break;
    case 14:
      var value = new accesscontrol_member_pb.Member;
      reader.readMessage(value,accesscontrol_member_pb.Member.deserializeBinaryFromReader);
      msg.setProposer(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlockType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPreBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPreConfHeight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTxRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDagHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getRwSetRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getBlockTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getConsensusArgs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getProposer();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      accesscontrol_member_pb.Member.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional uint32 block_version = 1;
 * @return {number}
 */
proto.common.BlockHeader.prototype.getBlockVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setBlockVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BlockType block_type = 2;
 * @return {!proto.common.BlockType}
 */
proto.common.BlockHeader.prototype.getBlockType = function() {
  return /** @type {!proto.common.BlockType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.common.BlockType} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setBlockType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.common.BlockHeader.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.common.BlockHeader.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes block_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes block_hash = 5;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes pre_block_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getPreBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes pre_block_hash = 6;
 * This is a type-conversion wrapper around `getPreBlockHash()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getPreBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreBlockHash()));
};


/**
 * optional bytes pre_block_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreBlockHash()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getPreBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setPreBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 pre_conf_height = 7;
 * @return {number}
 */
proto.common.BlockHeader.prototype.getPreConfHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setPreConfHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 tx_count = 8;
 * @return {number}
 */
proto.common.BlockHeader.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes tx_root = 9;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getTxRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes tx_root = 9;
 * This is a type-conversion wrapper around `getTxRoot()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getTxRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxRoot()));
};


/**
 * optional bytes tx_root = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxRoot()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getTxRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setTxRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes dag_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getDagHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes dag_hash = 10;
 * This is a type-conversion wrapper around `getDagHash()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getDagHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDagHash()));
};


/**
 * optional bytes dag_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDagHash()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getDagHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDagHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setDagHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes rw_set_root = 11;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getRwSetRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes rw_set_root = 11;
 * This is a type-conversion wrapper around `getRwSetRoot()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getRwSetRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRwSetRoot()));
};


/**
 * optional bytes rw_set_root = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRwSetRoot()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getRwSetRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRwSetRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setRwSetRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional int64 block_timestamp = 12;
 * @return {number}
 */
proto.common.BlockHeader.prototype.getBlockTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setBlockTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes consensus_args = 13;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getConsensusArgs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes consensus_args = 13;
 * This is a type-conversion wrapper around `getConsensusArgs()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getConsensusArgs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusArgs()));
};


/**
 * optional bytes consensus_args = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusArgs()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getConsensusArgs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusArgs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setConsensusArgs = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional accesscontrol.Member proposer = 14;
 * @return {?proto.accesscontrol.Member}
 */
proto.common.BlockHeader.prototype.getProposer = function() {
  return /** @type{?proto.accesscontrol.Member} */ (
    jspb.Message.getWrapperField(this, accesscontrol_member_pb.Member, 14));
};


/**
 * @param {?proto.accesscontrol.Member|undefined} value
 * @return {!proto.common.BlockHeader} returns this
*/
proto.common.BlockHeader.prototype.setProposer = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.clearProposer = function() {
  return this.setProposer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BlockHeader.prototype.hasProposer = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bytes signature = 15;
 * @return {!(string|Uint8Array)}
 */
proto.common.BlockHeader.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes signature = 15;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.common.BlockHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.common.BlockHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.BlockHeader} returns this
 */
proto.common.BlockHeader.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.DAG.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.DAG.prototype.toObject = function(opt_includeInstance) {
  return proto.common.DAG.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.DAG} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.DAG.toObject = function(includeInstance, msg) {
  var f, obj = {
    vertexesList: jspb.Message.toObjectList(msg.getVertexesList(),
    proto.common.DAG.Neighbor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.DAG}
 */
proto.common.DAG.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.DAG;
  return proto.common.DAG.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.DAG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.DAG}
 */
proto.common.DAG.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.common.DAG.Neighbor;
      reader.readMessage(value,proto.common.DAG.Neighbor.deserializeBinaryFromReader);
      msg.addVertexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.DAG.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.DAG.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.DAG} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.DAG.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVertexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.common.DAG.Neighbor.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.DAG.Neighbor.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.DAG.Neighbor.prototype.toObject = function(opt_includeInstance) {
  return proto.common.DAG.Neighbor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.DAG.Neighbor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.DAG.Neighbor.toObject = function(includeInstance, msg) {
  var f, obj = {
    neighborsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.DAG.Neighbor}
 */
proto.common.DAG.Neighbor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.DAG.Neighbor;
  return proto.common.DAG.Neighbor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.DAG.Neighbor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.DAG.Neighbor}
 */
proto.common.DAG.Neighbor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNeighbors(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.DAG.Neighbor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.DAG.Neighbor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.DAG.Neighbor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.DAG.Neighbor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeighborsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 neighbors = 1;
 * @return {!Array<number>}
 */
proto.common.DAG.Neighbor.prototype.getNeighborsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.common.DAG.Neighbor} returns this
 */
proto.common.DAG.Neighbor.prototype.setNeighborsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.common.DAG.Neighbor} returns this
 */
proto.common.DAG.Neighbor.prototype.addNeighbors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.DAG.Neighbor} returns this
 */
proto.common.DAG.Neighbor.prototype.clearNeighborsList = function() {
  return this.setNeighborsList([]);
};


/**
 * repeated Neighbor vertexes = 2;
 * @return {!Array<!proto.common.DAG.Neighbor>}
 */
proto.common.DAG.prototype.getVertexesList = function() {
  return /** @type{!Array<!proto.common.DAG.Neighbor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.DAG.Neighbor, 2));
};


/**
 * @param {!Array<!proto.common.DAG.Neighbor>} value
 * @return {!proto.common.DAG} returns this
*/
proto.common.DAG.prototype.setVertexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.DAG.Neighbor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.DAG.Neighbor}
 */
proto.common.DAG.prototype.addVertexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.DAG.Neighbor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.DAG} returns this
 */
proto.common.DAG.prototype.clearVertexesList = function() {
  return this.setVertexesList([]);
};


/**
 * @enum {number}
 */
proto.common.BlockType = {
  NORMAL_BLOCK: 0,
  CONFIG_BLOCK: 1,
  CONTRACT_MGR_BLOCK: 2,
  HAS_COINBASE: 4
};

goog.object.extend(exports, proto.common);
