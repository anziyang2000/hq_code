// source: common/result.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.common.AliasCertInfo', null, global);
goog.exportSymbol('proto.common.AliasInfo', null, global);
goog.exportSymbol('proto.common.AliasInfos', null, global);
goog.exportSymbol('proto.common.CertInfo', null, global);
goog.exportSymbol('proto.common.CertInfos', null, global);
goog.exportSymbol('proto.common.ContractEvent', null, global);
goog.exportSymbol('proto.common.ContractEventInfo', null, global);
goog.exportSymbol('proto.common.ContractEventInfoList', null, global);
goog.exportSymbol('proto.common.ContractResult', null, global);
goog.exportSymbol('proto.common.PrivateGetContract', null, global);
goog.exportSymbol('proto.common.Result', null, global);
goog.exportSymbol('proto.common.StrSlice', null, global);
goog.exportSymbol('proto.common.SubscribeResult', null, global);
goog.exportSymbol('proto.common.TxResponse', null, global);
goog.exportSymbol('proto.common.TxStatusCode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TxResponse.displayName = 'proto.common.TxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SubscribeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.SubscribeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SubscribeResult.displayName = 'proto.common.SubscribeResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Result.displayName = 'proto.common.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractResult.repeatedFields_, null);
};
goog.inherits(proto.common.ContractResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractResult.displayName = 'proto.common.ContractResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.PrivateGetContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.PrivateGetContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.PrivateGetContract.displayName = 'proto.common.PrivateGetContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StrSlice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.StrSlice.repeatedFields_, null);
};
goog.inherits(proto.common.StrSlice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.StrSlice.displayName = 'proto.common.StrSlice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CertInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.CertInfos.repeatedFields_, null);
};
goog.inherits(proto.common.CertInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CertInfos.displayName = 'proto.common.CertInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CertInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.CertInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CertInfo.displayName = 'proto.common.CertInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractEvent.repeatedFields_, null);
};
goog.inherits(proto.common.ContractEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractEvent.displayName = 'proto.common.ContractEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractEventInfo.repeatedFields_, null);
};
goog.inherits(proto.common.ContractEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractEventInfo.displayName = 'proto.common.ContractEventInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ContractEventInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ContractEventInfoList.repeatedFields_, null);
};
goog.inherits(proto.common.ContractEventInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ContractEventInfoList.displayName = 'proto.common.ContractEventInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.AliasInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.AliasInfo.repeatedFields_, null);
};
goog.inherits(proto.common.AliasInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.AliasInfo.displayName = 'proto.common.AliasInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.AliasInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.AliasInfos.repeatedFields_, null);
};
goog.inherits(proto.common.AliasInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.AliasInfos.displayName = 'proto.common.AliasInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.AliasCertInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.AliasCertInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.AliasCertInfo.displayName = 'proto.common.AliasCertInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractResult: (f = msg.getContractResult()) && proto.common.ContractResult.toObject(includeInstance, f),
    txId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    txTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    txBlockHeight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TxResponse}
 */
proto.common.TxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TxResponse;
  return proto.common.TxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TxResponse}
 */
proto.common.TxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.TxStatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.common.ContractResult;
      reader.readMessage(value,proto.common.ContractResult.deserializeBinaryFromReader);
      msg.setContractResult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTxTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.ContractResult.serializeBinaryToWriter
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTxTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTxBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional TxStatusCode code = 1;
 * @return {!proto.common.TxStatusCode}
 */
proto.common.TxResponse.prototype.getCode = function() {
  return /** @type {!proto.common.TxStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.TxStatusCode} value
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.common.TxResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ContractResult contract_result = 3;
 * @return {?proto.common.ContractResult}
 */
proto.common.TxResponse.prototype.getContractResult = function() {
  return /** @type{?proto.common.ContractResult} */ (
    jspb.Message.getWrapperField(this, proto.common.ContractResult, 3));
};


/**
 * @param {?proto.common.ContractResult|undefined} value
 * @return {!proto.common.TxResponse} returns this
*/
proto.common.TxResponse.prototype.setContractResult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.clearContractResult = function() {
  return this.setContractResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TxResponse.prototype.hasContractResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string tx_id = 4;
 * @return {string}
 */
proto.common.TxResponse.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 tx_timestamp = 5;
 * @return {number}
 */
proto.common.TxResponse.prototype.getTxTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.setTxTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 tx_block_height = 6;
 * @return {number}
 */
proto.common.TxResponse.prototype.getTxBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TxResponse} returns this
 */
proto.common.TxResponse.prototype.setTxBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SubscribeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SubscribeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SubscribeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SubscribeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SubscribeResult}
 */
proto.common.SubscribeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SubscribeResult;
  return proto.common.SubscribeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SubscribeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SubscribeResult}
 */
proto.common.SubscribeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SubscribeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SubscribeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SubscribeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SubscribeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.SubscribeResult.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.common.SubscribeResult.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.common.SubscribeResult.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.SubscribeResult} returns this
 */
proto.common.SubscribeResult.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contractResult: (f = msg.getContractResult()) && proto.common.ContractResult.toObject(includeInstance, f),
    rwSetHash: msg.getRwSetHash_asB64(),
    message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Result}
 */
proto.common.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Result;
  return proto.common.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Result}
 */
proto.common.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.TxStatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.common.ContractResult;
      reader.readMessage(value,proto.common.ContractResult.deserializeBinaryFromReader);
      msg.setContractResult(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRwSetHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContractResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.ContractResult.serializeBinaryToWriter
    );
  }
  f = message.getRwSetHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional TxStatusCode code = 1;
 * @return {!proto.common.TxStatusCode}
 */
proto.common.Result.prototype.getCode = function() {
  return /** @type {!proto.common.TxStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.TxStatusCode} value
 * @return {!proto.common.Result} returns this
 */
proto.common.Result.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ContractResult contract_result = 2;
 * @return {?proto.common.ContractResult}
 */
proto.common.Result.prototype.getContractResult = function() {
  return /** @type{?proto.common.ContractResult} */ (
    jspb.Message.getWrapperField(this, proto.common.ContractResult, 2));
};


/**
 * @param {?proto.common.ContractResult|undefined} value
 * @return {!proto.common.Result} returns this
*/
proto.common.Result.prototype.setContractResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Result} returns this
 */
proto.common.Result.prototype.clearContractResult = function() {
  return this.setContractResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Result.prototype.hasContractResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes rw_set_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.common.Result.prototype.getRwSetHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes rw_set_hash = 3;
 * This is a type-conversion wrapper around `getRwSetHash()`
 * @return {string}
 */
proto.common.Result.prototype.getRwSetHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRwSetHash()));
};


/**
 * optional bytes rw_set_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRwSetHash()`
 * @return {!Uint8Array}
 */
proto.common.Result.prototype.getRwSetHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRwSetHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.Result} returns this
 */
proto.common.Result.prototype.setRwSetHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.common.Result.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.Result} returns this
 */
proto.common.Result.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractResult.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: msg.getResult_asB64(),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contractEventList: jspb.Message.toObjectList(msg.getContractEventList(),
    proto.common.ContractEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractResult}
 */
proto.common.ContractResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractResult;
  return proto.common.ContractResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractResult}
 */
proto.common.ContractResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 5:
      var value = new proto.common.ContractEvent;
      reader.readMessage(value,proto.common.ContractEvent.deserializeBinaryFromReader);
      msg.addContractEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getContractEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.common.ContractEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.common.ContractResult.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ContractResult} returns this
 */
proto.common.ContractResult.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes result = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.ContractResult.prototype.getResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes result = 2;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.common.ContractResult.prototype.getResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResult()));
};


/**
 * optional bytes result = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.common.ContractResult.prototype.getResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResult()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.ContractResult} returns this
 */
proto.common.ContractResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.common.ContractResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractResult} returns this
 */
proto.common.ContractResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 gas_used = 4;
 * @return {number}
 */
proto.common.ContractResult.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ContractResult} returns this
 */
proto.common.ContractResult.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ContractEvent contract_event = 5;
 * @return {!Array<!proto.common.ContractEvent>}
 */
proto.common.ContractResult.prototype.getContractEventList = function() {
  return /** @type{!Array<!proto.common.ContractEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.ContractEvent, 5));
};


/**
 * @param {!Array<!proto.common.ContractEvent>} value
 * @return {!proto.common.ContractResult} returns this
*/
proto.common.ContractResult.prototype.setContractEventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.common.ContractEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.ContractEvent}
 */
proto.common.ContractResult.prototype.addContractEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.common.ContractEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractResult} returns this
 */
proto.common.ContractResult.prototype.clearContractEventList = function() {
  return this.setContractEventList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.PrivateGetContract.prototype.toObject = function(opt_includeInstance) {
  return proto.common.PrivateGetContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.PrivateGetContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.PrivateGetContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractCode: msg.getContractCode_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.PrivateGetContract}
 */
proto.common.PrivateGetContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.PrivateGetContract;
  return proto.common.PrivateGetContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.PrivateGetContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.PrivateGetContract}
 */
proto.common.PrivateGetContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.PrivateGetContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.PrivateGetContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.PrivateGetContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.PrivateGetContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes contract_code = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.PrivateGetContract.prototype.getContractCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract_code = 1;
 * This is a type-conversion wrapper around `getContractCode()`
 * @return {string}
 */
proto.common.PrivateGetContract.prototype.getContractCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractCode()));
};


/**
 * optional bytes contract_code = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractCode()`
 * @return {!Uint8Array}
 */
proto.common.PrivateGetContract.prototype.getContractCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractCode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.PrivateGetContract} returns this
 */
proto.common.PrivateGetContract.prototype.setContractCode = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.common.PrivateGetContract.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.PrivateGetContract} returns this
 */
proto.common.PrivateGetContract.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 gas_limit = 3;
 * @return {number}
 */
proto.common.PrivateGetContract.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.PrivateGetContract} returns this
 */
proto.common.PrivateGetContract.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.StrSlice.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StrSlice.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StrSlice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StrSlice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StrSlice.toObject = function(includeInstance, msg) {
  var f, obj = {
    strArrList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StrSlice}
 */
proto.common.StrSlice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StrSlice;
  return proto.common.StrSlice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StrSlice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StrSlice}
 */
proto.common.StrSlice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addStrArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StrSlice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StrSlice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StrSlice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StrSlice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrArrList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string str_arr = 1;
 * @return {!Array<string>}
 */
proto.common.StrSlice.prototype.getStrArrList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.StrSlice} returns this
 */
proto.common.StrSlice.prototype.setStrArrList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.StrSlice} returns this
 */
proto.common.StrSlice.prototype.addStrArr = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.StrSlice} returns this
 */
proto.common.StrSlice.prototype.clearStrArrList = function() {
  return this.setStrArrList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.CertInfos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CertInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CertInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CertInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CertInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    certInfosList: jspb.Message.toObjectList(msg.getCertInfosList(),
    proto.common.CertInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CertInfos}
 */
proto.common.CertInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CertInfos;
  return proto.common.CertInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CertInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CertInfos}
 */
proto.common.CertInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.CertInfo;
      reader.readMessage(value,proto.common.CertInfo.deserializeBinaryFromReader);
      msg.addCertInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CertInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CertInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CertInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CertInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.CertInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CertInfo cert_infos = 1;
 * @return {!Array<!proto.common.CertInfo>}
 */
proto.common.CertInfos.prototype.getCertInfosList = function() {
  return /** @type{!Array<!proto.common.CertInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.CertInfo, 1));
};


/**
 * @param {!Array<!proto.common.CertInfo>} value
 * @return {!proto.common.CertInfos} returns this
*/
proto.common.CertInfos.prototype.setCertInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.CertInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.CertInfo}
 */
proto.common.CertInfos.prototype.addCertInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.CertInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.CertInfos} returns this
 */
proto.common.CertInfos.prototype.clearCertInfosList = function() {
  return this.setCertInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CertInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CertInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CertInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CertInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cert: msg.getCert_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CertInfo}
 */
proto.common.CertInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CertInfo;
  return proto.common.CertInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CertInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CertInfo}
 */
proto.common.CertInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CertInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CertInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CertInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CertInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.common.CertInfo.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.CertInfo} returns this
 */
proto.common.CertInfo.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes cert = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.CertInfo.prototype.getCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cert = 2;
 * This is a type-conversion wrapper around `getCert()`
 * @return {string}
 */
proto.common.CertInfo.prototype.getCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCert()));
};


/**
 * optional bytes cert = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCert()`
 * @return {!Uint8Array}
 */
proto.common.CertInfo.prototype.getCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.CertInfo} returns this
 */
proto.common.CertInfo.prototype.setCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractEvent.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventDataList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractEvent}
 */
proto.common.ContractEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractEvent;
  return proto.common.ContractEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractEvent}
 */
proto.common.ContractEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.common.ContractEvent.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tx_id = 2;
 * @return {string}
 */
proto.common.ContractEvent.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract_name = 3;
 * @return {string}
 */
proto.common.ContractEvent.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contract_version = 4;
 * @return {string}
 */
proto.common.ContractEvent.prototype.getContractVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.setContractVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string event_data = 5;
 * @return {!Array<string>}
 */
proto.common.ContractEvent.prototype.getEventDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.setEventDataList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.addEventData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractEvent} returns this
 */
proto.common.ContractEvent.prototype.clearEventDataList = function() {
  return this.setEventDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractEventInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contractName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contractVersion: jspb.Message.getFieldWithDefault(msg, 7, ""),
    eventDataList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractEventInfo}
 */
proto.common.ContractEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractEventInfo;
  return proto.common.ContractEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractEventInfo}
 */
proto.common.ContractEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventIndex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractVersion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractEventInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContractVersion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEventDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.common.ContractEventInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.common.ContractEventInfo.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string topic = 3;
 * @return {string}
 */
proto.common.ContractEventInfo.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tx_id = 4;
 * @return {string}
 */
proto.common.ContractEventInfo.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 event_index = 5;
 * @return {number}
 */
proto.common.ContractEventInfo.prototype.getEventIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setEventIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string contract_name = 6;
 * @return {string}
 */
proto.common.ContractEventInfo.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string contract_version = 7;
 * @return {string}
 */
proto.common.ContractEventInfo.prototype.getContractVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setContractVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string event_data = 8;
 * @return {!Array<string>}
 */
proto.common.ContractEventInfo.prototype.getEventDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.setEventDataList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.addEventData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractEventInfo} returns this
 */
proto.common.ContractEventInfo.prototype.clearEventDataList = function() {
  return this.setEventDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ContractEventInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ContractEventInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ContractEventInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ContractEventInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEventInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractEventsList: jspb.Message.toObjectList(msg.getContractEventsList(),
    proto.common.ContractEventInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ContractEventInfoList}
 */
proto.common.ContractEventInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ContractEventInfoList;
  return proto.common.ContractEventInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ContractEventInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ContractEventInfoList}
 */
proto.common.ContractEventInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.ContractEventInfo;
      reader.readMessage(value,proto.common.ContractEventInfo.deserializeBinaryFromReader);
      msg.addContractEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ContractEventInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ContractEventInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ContractEventInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ContractEventInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.ContractEventInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContractEventInfo contract_events = 1;
 * @return {!Array<!proto.common.ContractEventInfo>}
 */
proto.common.ContractEventInfoList.prototype.getContractEventsList = function() {
  return /** @type{!Array<!proto.common.ContractEventInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.ContractEventInfo, 1));
};


/**
 * @param {!Array<!proto.common.ContractEventInfo>} value
 * @return {!proto.common.ContractEventInfoList} returns this
*/
proto.common.ContractEventInfoList.prototype.setContractEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.ContractEventInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.ContractEventInfo}
 */
proto.common.ContractEventInfoList.prototype.addContractEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.ContractEventInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ContractEventInfoList} returns this
 */
proto.common.ContractEventInfoList.prototype.clearContractEventsList = function() {
  return this.setContractEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.AliasInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.AliasInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.AliasInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.AliasInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nowCert: (f = msg.getNowCert()) && proto.common.AliasCertInfo.toObject(includeInstance, f),
    hisCertsList: jspb.Message.toObjectList(msg.getHisCertsList(),
    proto.common.AliasCertInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.AliasInfo}
 */
proto.common.AliasInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.AliasInfo;
  return proto.common.AliasInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.AliasInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.AliasInfo}
 */
proto.common.AliasInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 2:
      var value = new proto.common.AliasCertInfo;
      reader.readMessage(value,proto.common.AliasCertInfo.deserializeBinaryFromReader);
      msg.setNowCert(value);
      break;
    case 3:
      var value = new proto.common.AliasCertInfo;
      reader.readMessage(value,proto.common.AliasCertInfo.deserializeBinaryFromReader);
      msg.addHisCerts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.AliasInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.AliasInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.AliasInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNowCert();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.AliasCertInfo.serializeBinaryToWriter
    );
  }
  f = message.getHisCertsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.common.AliasCertInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string alias = 1;
 * @return {string}
 */
proto.common.AliasInfo.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.AliasInfo} returns this
 */
proto.common.AliasInfo.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AliasCertInfo now_cert = 2;
 * @return {?proto.common.AliasCertInfo}
 */
proto.common.AliasInfo.prototype.getNowCert = function() {
  return /** @type{?proto.common.AliasCertInfo} */ (
    jspb.Message.getWrapperField(this, proto.common.AliasCertInfo, 2));
};


/**
 * @param {?proto.common.AliasCertInfo|undefined} value
 * @return {!proto.common.AliasInfo} returns this
*/
proto.common.AliasInfo.prototype.setNowCert = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.AliasInfo} returns this
 */
proto.common.AliasInfo.prototype.clearNowCert = function() {
  return this.setNowCert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.AliasInfo.prototype.hasNowCert = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AliasCertInfo his_certs = 3;
 * @return {!Array<!proto.common.AliasCertInfo>}
 */
proto.common.AliasInfo.prototype.getHisCertsList = function() {
  return /** @type{!Array<!proto.common.AliasCertInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.AliasCertInfo, 3));
};


/**
 * @param {!Array<!proto.common.AliasCertInfo>} value
 * @return {!proto.common.AliasInfo} returns this
*/
proto.common.AliasInfo.prototype.setHisCertsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.AliasCertInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.AliasCertInfo}
 */
proto.common.AliasInfo.prototype.addHisCerts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.AliasCertInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.AliasInfo} returns this
 */
proto.common.AliasInfo.prototype.clearHisCertsList = function() {
  return this.setHisCertsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.AliasInfos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.AliasInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.common.AliasInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.AliasInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    aliasInfosList: jspb.Message.toObjectList(msg.getAliasInfosList(),
    proto.common.AliasInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.AliasInfos}
 */
proto.common.AliasInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.AliasInfos;
  return proto.common.AliasInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.AliasInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.AliasInfos}
 */
proto.common.AliasInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.AliasInfo;
      reader.readMessage(value,proto.common.AliasInfo.deserializeBinaryFromReader);
      msg.addAliasInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.AliasInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.AliasInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.AliasInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAliasInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.AliasInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AliasInfo alias_infos = 1;
 * @return {!Array<!proto.common.AliasInfo>}
 */
proto.common.AliasInfos.prototype.getAliasInfosList = function() {
  return /** @type{!Array<!proto.common.AliasInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.AliasInfo, 1));
};


/**
 * @param {!Array<!proto.common.AliasInfo>} value
 * @return {!proto.common.AliasInfos} returns this
*/
proto.common.AliasInfos.prototype.setAliasInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.AliasInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.AliasInfo}
 */
proto.common.AliasInfos.prototype.addAliasInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.AliasInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.AliasInfos} returns this
 */
proto.common.AliasInfos.prototype.clearAliasInfosList = function() {
  return this.setAliasInfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.AliasCertInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.AliasCertInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.AliasCertInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasCertInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cert: msg.getCert_asB64(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.AliasCertInfo}
 */
proto.common.AliasCertInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.AliasCertInfo;
  return proto.common.AliasCertInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.AliasCertInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.AliasCertInfo}
 */
proto.common.AliasCertInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCert(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.AliasCertInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.AliasCertInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.AliasCertInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.AliasCertInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.common.AliasCertInfo.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.AliasCertInfo} returns this
 */
proto.common.AliasCertInfo.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes cert = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.AliasCertInfo.prototype.getCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cert = 2;
 * This is a type-conversion wrapper around `getCert()`
 * @return {string}
 */
proto.common.AliasCertInfo.prototype.getCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCert()));
};


/**
 * optional bytes cert = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCert()`
 * @return {!Uint8Array}
 */
proto.common.AliasCertInfo.prototype.getCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.AliasCertInfo} returns this
 */
proto.common.AliasCertInfo.prototype.setCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 block_height = 3;
 * @return {number}
 */
proto.common.AliasCertInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.AliasCertInfo} returns this
 */
proto.common.AliasCertInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.common.TxStatusCode = {
  SUCCESS: 0,
  TIMEOUT: 1,
  INVALID_PARAMETER: 2,
  NO_PERMISSION: 3,
  CONTRACT_FAIL: 4,
  INTERNAL_ERROR: 5,
  INVALID_CONTRACT_TRANSACTION_TYPE: 10,
  INVALID_CONTRACT_PARAMETER_CONTRACT_NAME: 11,
  INVALID_CONTRACT_PARAMETER_METHOD: 12,
  INVALID_CONTRACT_PARAMETER_INIT_METHOD: 13,
  INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD: 14,
  INVALID_CONTRACT_PARAMETER_BYTE_CODE: 15,
  INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE: 16,
  INVALID_CONTRACT_PARAMETER_VERSION: 17,
  GET_FROM_TX_CONTEXT_FAILED: 20,
  PUT_INTO_TX_CONTEXT_FAILED: 21,
  CONTRACT_VERSION_EXIST_FAILED: 22,
  CONTRACT_VERSION_NOT_EXIST_FAILED: 23,
  CONTRACT_BYTE_CODE_NOT_EXIST_FAILED: 24,
  MARSHAL_SENDER_FAILED: 25,
  INVOKE_INIT_METHOD_FAILED: 26,
  INVOKE_UPGRADE_METHOD_FAILED: 27,
  CREATE_RUNTIME_INSTANCE_FAILED: 28,
  UNMARSHAL_CREATOR_FAILED: 29,
  UNMARSHAL_SENDER_FAILED: 30,
  GET_SENDER_PK_FAILED: 31,
  GET_CREATOR_PK_FAILED: 32,
  GET_CREATOR_FAILED: 33,
  GET_CREATOR_CERT_FAILED: 34,
  GET_SENDER_CERT_FAILED: 35,
  CONTRACT_FREEZE_FAILED: 36,
  CONTRACT_TOO_DEEP_FAILED: 37,
  CONTRACT_REVOKE_FAILED: 38,
  CONTRACT_INVOKE_METHOD_FAILED: 39,
  ARCHIVED_TX: 40,
  ARCHIVED_BLOCK: 41,
  GAS_BALANCE_NOT_ENOUGH_FAILED: 42,
  GAS_LIMIT_NOT_SET: 43,
  GAS_LIMIT_TOO_SMALL: 44,
  GET_ACCOUNT_BALANCE_FAILED: 45,
  PARSE_ACCOUNT_BALANCE_FAILED: 46,
  GET_ACCOUNT_STATUS_FAILED: 47,
  ACCOUNT_STATUS_FROZEN: 48
};

goog.object.extend(exports, proto.common);
