// source: common/birdsnest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.common.BirdsNest', null, global);
goog.exportSymbol('proto.common.BirdsNestConfig', null, global);
goog.exportSymbol('proto.common.BlockHeightSerializeIntervalConfig', null, global);
goog.exportSymbol('proto.common.CuckooConfig', null, global);
goog.exportSymbol('proto.common.CuckooFilter', null, global);
goog.exportSymbol('proto.common.FilterExtensionType', null, global);
goog.exportSymbol('proto.common.KeyType', null, global);
goog.exportSymbol('proto.common.RuleType', null, global);
goog.exportSymbol('proto.common.RulesConfig', null, global);
goog.exportSymbol('proto.common.SerializeIntervalType', null, global);
goog.exportSymbol('proto.common.ShardingBirdsNest', null, global);
goog.exportSymbol('proto.common.ShardingBirdsNestConfig', null, global);
goog.exportSymbol('proto.common.SnapshotSerializerConfig', null, global);
goog.exportSymbol('proto.common.TimedSerializeIntervalConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.BirdsNest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.BirdsNest.repeatedFields_, null);
};
goog.inherits(proto.common.BirdsNest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.BirdsNest.displayName = 'proto.common.BirdsNest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ShardingBirdsNest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ShardingBirdsNest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ShardingBirdsNest.displayName = 'proto.common.ShardingBirdsNest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CuckooFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.CuckooFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CuckooFilter.displayName = 'proto.common.CuckooFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ShardingBirdsNestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ShardingBirdsNestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ShardingBirdsNestConfig.displayName = 'proto.common.ShardingBirdsNestConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.BirdsNestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.BirdsNestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.BirdsNestConfig.displayName = 'proto.common.BirdsNestConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.RulesConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.RulesConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.RulesConfig.displayName = 'proto.common.RulesConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CuckooConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.CuckooConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CuckooConfig.displayName = 'proto.common.CuckooConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.SnapshotSerializerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.SnapshotSerializerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.SnapshotSerializerConfig.displayName = 'proto.common.SnapshotSerializerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TimedSerializeIntervalConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TimedSerializeIntervalConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TimedSerializeIntervalConfig.displayName = 'proto.common.TimedSerializeIntervalConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.BlockHeightSerializeIntervalConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.BlockHeightSerializeIntervalConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.BlockHeightSerializeIntervalConfig.displayName = 'proto.common.BlockHeightSerializeIntervalConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.BirdsNest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.BirdsNest.prototype.toObject = function(opt_includeInstance) {
  return proto.common.BirdsNest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.BirdsNest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BirdsNest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.common.BirdsNestConfig.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.common.CuckooFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.BirdsNest}
 */
proto.common.BirdsNest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.BirdsNest;
  return proto.common.BirdsNest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.BirdsNest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.BirdsNest}
 */
proto.common.BirdsNest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.BirdsNestConfig;
      reader.readMessage(value,proto.common.BirdsNestConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentindex(value);
      break;
    case 4:
      var value = new proto.common.CuckooFilter;
      reader.readMessage(value,proto.common.CuckooFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.BirdsNest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.BirdsNest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.BirdsNest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BirdsNest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.BirdsNestConfig.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCurrentindex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.common.CuckooFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional BirdsNestConfig config = 1;
 * @return {?proto.common.BirdsNestConfig}
 */
proto.common.BirdsNest.prototype.getConfig = function() {
  return /** @type{?proto.common.BirdsNestConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.BirdsNestConfig, 1));
};


/**
 * @param {?proto.common.BirdsNestConfig|undefined} value
 * @return {!proto.common.BirdsNest} returns this
*/
proto.common.BirdsNest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BirdsNest} returns this
 */
proto.common.BirdsNest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BirdsNest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.common.BirdsNest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BirdsNest} returns this
 */
proto.common.BirdsNest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 currentIndex = 3;
 * @return {number}
 */
proto.common.BirdsNest.prototype.getCurrentindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BirdsNest} returns this
 */
proto.common.BirdsNest.prototype.setCurrentindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated CuckooFilter filters = 4;
 * @return {!Array<!proto.common.CuckooFilter>}
 */
proto.common.BirdsNest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.common.CuckooFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.CuckooFilter, 4));
};


/**
 * @param {!Array<!proto.common.CuckooFilter>} value
 * @return {!proto.common.BirdsNest} returns this
*/
proto.common.BirdsNest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.common.CuckooFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.CuckooFilter}
 */
proto.common.BirdsNest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.common.CuckooFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.BirdsNest} returns this
 */
proto.common.BirdsNest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ShardingBirdsNest.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ShardingBirdsNest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ShardingBirdsNest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ShardingBirdsNest.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    config: (f = msg.getConfig()) && proto.common.ShardingBirdsNestConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ShardingBirdsNest}
 */
proto.common.ShardingBirdsNest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ShardingBirdsNest;
  return proto.common.ShardingBirdsNest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ShardingBirdsNest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ShardingBirdsNest}
 */
proto.common.ShardingBirdsNest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.common.ShardingBirdsNestConfig;
      reader.readMessage(value,proto.common.ShardingBirdsNestConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ShardingBirdsNest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ShardingBirdsNest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ShardingBirdsNest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ShardingBirdsNest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.ShardingBirdsNestConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 length = 1;
 * @return {number}
 */
proto.common.ShardingBirdsNest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ShardingBirdsNest} returns this
 */
proto.common.ShardingBirdsNest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.common.ShardingBirdsNest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ShardingBirdsNest} returns this
 */
proto.common.ShardingBirdsNest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ShardingBirdsNestConfig config = 3;
 * @return {?proto.common.ShardingBirdsNestConfig}
 */
proto.common.ShardingBirdsNest.prototype.getConfig = function() {
  return /** @type{?proto.common.ShardingBirdsNestConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.ShardingBirdsNestConfig, 3));
};


/**
 * @param {?proto.common.ShardingBirdsNestConfig|undefined} value
 * @return {!proto.common.ShardingBirdsNest} returns this
*/
proto.common.ShardingBirdsNest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ShardingBirdsNest} returns this
 */
proto.common.ShardingBirdsNest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ShardingBirdsNest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CuckooFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CuckooFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CuckooFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CuckooFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    cuckoo: msg.getCuckoo_asB64(),
    extension: msg.getExtension_asB64(),
    config: msg.getConfig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CuckooFilter}
 */
proto.common.CuckooFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CuckooFilter;
  return proto.common.CuckooFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CuckooFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CuckooFilter}
 */
proto.common.CuckooFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuckoo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtension$(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CuckooFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CuckooFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CuckooFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CuckooFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCuckoo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getExtension_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes cuckoo = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.CuckooFilter.prototype.getCuckoo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cuckoo = 1;
 * This is a type-conversion wrapper around `getCuckoo()`
 * @return {string}
 */
proto.common.CuckooFilter.prototype.getCuckoo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuckoo()));
};


/**
 * optional bytes cuckoo = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuckoo()`
 * @return {!Uint8Array}
 */
proto.common.CuckooFilter.prototype.getCuckoo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuckoo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.CuckooFilter} returns this
 */
proto.common.CuckooFilter.prototype.setCuckoo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes extension = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.CuckooFilter.prototype.getExtension$ = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes extension = 2;
 * This is a type-conversion wrapper around `getExtension$()`
 * @return {string}
 */
proto.common.CuckooFilter.prototype.getExtension_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtension$()));
};


/**
 * optional bytes extension = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtension$()`
 * @return {!Uint8Array}
 */
proto.common.CuckooFilter.prototype.getExtension_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtension$()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.CuckooFilter} returns this
 */
proto.common.CuckooFilter.prototype.setExtension$ = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes config = 3;
 * @return {!(string|Uint8Array)}
 */
proto.common.CuckooFilter.prototype.getConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes config = 3;
 * This is a type-conversion wrapper around `getConfig()`
 * @return {string}
 */
proto.common.CuckooFilter.prototype.getConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfig()));
};


/**
 * optional bytes config = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfig()`
 * @return {!Uint8Array}
 */
proto.common.CuckooFilter.prototype.getConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.CuckooFilter} returns this
 */
proto.common.CuckooFilter.prototype.setConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ShardingBirdsNestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ShardingBirdsNestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ShardingBirdsNestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ShardingBirdsNestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    birdsnest: (f = msg.getBirdsnest()) && proto.common.BirdsNestConfig.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.common.SnapshotSerializerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ShardingBirdsNestConfig}
 */
proto.common.ShardingBirdsNestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ShardingBirdsNestConfig;
  return proto.common.ShardingBirdsNestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ShardingBirdsNestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ShardingBirdsNestConfig}
 */
proto.common.ShardingBirdsNestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 4:
      var value = new proto.common.BirdsNestConfig;
      reader.readMessage(value,proto.common.BirdsNestConfig.deserializeBinaryFromReader);
      msg.setBirdsnest(value);
      break;
    case 5:
      var value = new proto.common.SnapshotSerializerConfig;
      reader.readMessage(value,proto.common.SnapshotSerializerConfig.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ShardingBirdsNestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ShardingBirdsNestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ShardingBirdsNestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ShardingBirdsNestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBirdsnest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.BirdsNestConfig.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.SnapshotSerializerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.common.ShardingBirdsNestConfig.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
 */
proto.common.ShardingBirdsNestConfig.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 length = 2;
 * @return {number}
 */
proto.common.ShardingBirdsNestConfig.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
 */
proto.common.ShardingBirdsNestConfig.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timeout = 3;
 * @return {number}
 */
proto.common.ShardingBirdsNestConfig.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
 */
proto.common.ShardingBirdsNestConfig.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional BirdsNestConfig birdsnest = 4;
 * @return {?proto.common.BirdsNestConfig}
 */
proto.common.ShardingBirdsNestConfig.prototype.getBirdsnest = function() {
  return /** @type{?proto.common.BirdsNestConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.BirdsNestConfig, 4));
};


/**
 * @param {?proto.common.BirdsNestConfig|undefined} value
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
*/
proto.common.ShardingBirdsNestConfig.prototype.setBirdsnest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
 */
proto.common.ShardingBirdsNestConfig.prototype.clearBirdsnest = function() {
  return this.setBirdsnest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ShardingBirdsNestConfig.prototype.hasBirdsnest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SnapshotSerializerConfig snapshot = 5;
 * @return {?proto.common.SnapshotSerializerConfig}
 */
proto.common.ShardingBirdsNestConfig.prototype.getSnapshot = function() {
  return /** @type{?proto.common.SnapshotSerializerConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.SnapshotSerializerConfig, 5));
};


/**
 * @param {?proto.common.SnapshotSerializerConfig|undefined} value
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
*/
proto.common.ShardingBirdsNestConfig.prototype.setSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ShardingBirdsNestConfig} returns this
 */
proto.common.ShardingBirdsNestConfig.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ShardingBirdsNestConfig.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.BirdsNestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.BirdsNestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.BirdsNestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BirdsNestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rules: (f = msg.getRules()) && proto.common.RulesConfig.toObject(includeInstance, f),
    cuckoo: (f = msg.getCuckoo()) && proto.common.CuckooConfig.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.common.SnapshotSerializerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.BirdsNestConfig}
 */
proto.common.BirdsNestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.BirdsNestConfig;
  return proto.common.BirdsNestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.BirdsNestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.BirdsNestConfig}
 */
proto.common.BirdsNestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    case 3:
      var value = new proto.common.RulesConfig;
      reader.readMessage(value,proto.common.RulesConfig.deserializeBinaryFromReader);
      msg.setRules(value);
      break;
    case 4:
      var value = new proto.common.CuckooConfig;
      reader.readMessage(value,proto.common.CuckooConfig.deserializeBinaryFromReader);
      msg.setCuckoo(value);
      break;
    case 5:
      var value = new proto.common.SnapshotSerializerConfig;
      reader.readMessage(value,proto.common.SnapshotSerializerConfig.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.BirdsNestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.BirdsNestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.BirdsNestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BirdsNestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRules();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.RulesConfig.serializeBinaryToWriter
    );
  }
  f = message.getCuckoo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.CuckooConfig.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.SnapshotSerializerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.common.BirdsNestConfig.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.BirdsNestConfig} returns this
 */
proto.common.BirdsNestConfig.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 length = 2;
 * @return {number}
 */
proto.common.BirdsNestConfig.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BirdsNestConfig} returns this
 */
proto.common.BirdsNestConfig.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RulesConfig rules = 3;
 * @return {?proto.common.RulesConfig}
 */
proto.common.BirdsNestConfig.prototype.getRules = function() {
  return /** @type{?proto.common.RulesConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.RulesConfig, 3));
};


/**
 * @param {?proto.common.RulesConfig|undefined} value
 * @return {!proto.common.BirdsNestConfig} returns this
*/
proto.common.BirdsNestConfig.prototype.setRules = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BirdsNestConfig} returns this
 */
proto.common.BirdsNestConfig.prototype.clearRules = function() {
  return this.setRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BirdsNestConfig.prototype.hasRules = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CuckooConfig cuckoo = 4;
 * @return {?proto.common.CuckooConfig}
 */
proto.common.BirdsNestConfig.prototype.getCuckoo = function() {
  return /** @type{?proto.common.CuckooConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.CuckooConfig, 4));
};


/**
 * @param {?proto.common.CuckooConfig|undefined} value
 * @return {!proto.common.BirdsNestConfig} returns this
*/
proto.common.BirdsNestConfig.prototype.setCuckoo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BirdsNestConfig} returns this
 */
proto.common.BirdsNestConfig.prototype.clearCuckoo = function() {
  return this.setCuckoo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BirdsNestConfig.prototype.hasCuckoo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SnapshotSerializerConfig snapshot = 5;
 * @return {?proto.common.SnapshotSerializerConfig}
 */
proto.common.BirdsNestConfig.prototype.getSnapshot = function() {
  return /** @type{?proto.common.SnapshotSerializerConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.SnapshotSerializerConfig, 5));
};


/**
 * @param {?proto.common.SnapshotSerializerConfig|undefined} value
 * @return {!proto.common.BirdsNestConfig} returns this
*/
proto.common.BirdsNestConfig.prototype.setSnapshot = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.BirdsNestConfig} returns this
 */
proto.common.BirdsNestConfig.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.BirdsNestConfig.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.RulesConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.RulesConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.RulesConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.RulesConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    absoluteExpireTime: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.RulesConfig}
 */
proto.common.RulesConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.RulesConfig;
  return proto.common.RulesConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.RulesConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.RulesConfig}
 */
proto.common.RulesConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAbsoluteExpireTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.RulesConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.RulesConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.RulesConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.RulesConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbsoluteExpireTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 absolute_expire_time = 1;
 * @return {number}
 */
proto.common.RulesConfig.prototype.getAbsoluteExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.RulesConfig} returns this
 */
proto.common.RulesConfig.prototype.setAbsoluteExpireTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CuckooConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CuckooConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CuckooConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CuckooConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagsPerBucket: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bitsPerItem: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxNumKeys: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tableType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CuckooConfig}
 */
proto.common.CuckooConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CuckooConfig;
  return proto.common.CuckooConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CuckooConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CuckooConfig}
 */
proto.common.CuckooConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.KeyType} */ (reader.readEnum());
      msg.setKeyType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagsPerBucket(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitsPerItem(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxNumKeys(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTableType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CuckooConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CuckooConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CuckooConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CuckooConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTagsPerBucket();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBitsPerItem();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxNumKeys();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTableType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional KeyType key_type = 1;
 * @return {!proto.common.KeyType}
 */
proto.common.CuckooConfig.prototype.getKeyType = function() {
  return /** @type {!proto.common.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.KeyType} value
 * @return {!proto.common.CuckooConfig} returns this
 */
proto.common.CuckooConfig.prototype.setKeyType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 tags_per_bucket = 2;
 * @return {number}
 */
proto.common.CuckooConfig.prototype.getTagsPerBucket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.CuckooConfig} returns this
 */
proto.common.CuckooConfig.prototype.setTagsPerBucket = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 bits_per_item = 3;
 * @return {number}
 */
proto.common.CuckooConfig.prototype.getBitsPerItem = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.CuckooConfig} returns this
 */
proto.common.CuckooConfig.prototype.setBitsPerItem = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_num_keys = 4;
 * @return {number}
 */
proto.common.CuckooConfig.prototype.getMaxNumKeys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.CuckooConfig} returns this
 */
proto.common.CuckooConfig.prototype.setMaxNumKeys = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 table_type = 5;
 * @return {number}
 */
proto.common.CuckooConfig.prototype.getTableType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.CuckooConfig} returns this
 */
proto.common.CuckooConfig.prototype.setTableType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.SnapshotSerializerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.SnapshotSerializerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.SnapshotSerializerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SnapshotSerializerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timed: (f = msg.getTimed()) && proto.common.TimedSerializeIntervalConfig.toObject(includeInstance, f),
    blockHeight: (f = msg.getBlockHeight()) && proto.common.BlockHeightSerializeIntervalConfig.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.SnapshotSerializerConfig}
 */
proto.common.SnapshotSerializerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.SnapshotSerializerConfig;
  return proto.common.SnapshotSerializerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.SnapshotSerializerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.SnapshotSerializerConfig}
 */
proto.common.SnapshotSerializerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.SerializeIntervalType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.common.TimedSerializeIntervalConfig;
      reader.readMessage(value,proto.common.TimedSerializeIntervalConfig.deserializeBinaryFromReader);
      msg.setTimed(value);
      break;
    case 3:
      var value = new proto.common.BlockHeightSerializeIntervalConfig;
      reader.readMessage(value,proto.common.BlockHeightSerializeIntervalConfig.deserializeBinaryFromReader);
      msg.setBlockHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.SnapshotSerializerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.SnapshotSerializerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.SnapshotSerializerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.SnapshotSerializerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimed();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.TimedSerializeIntervalConfig.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.BlockHeightSerializeIntervalConfig.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SerializeIntervalType type = 1;
 * @return {!proto.common.SerializeIntervalType}
 */
proto.common.SnapshotSerializerConfig.prototype.getType = function() {
  return /** @type {!proto.common.SerializeIntervalType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.SerializeIntervalType} value
 * @return {!proto.common.SnapshotSerializerConfig} returns this
 */
proto.common.SnapshotSerializerConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TimedSerializeIntervalConfig timed = 2;
 * @return {?proto.common.TimedSerializeIntervalConfig}
 */
proto.common.SnapshotSerializerConfig.prototype.getTimed = function() {
  return /** @type{?proto.common.TimedSerializeIntervalConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.TimedSerializeIntervalConfig, 2));
};


/**
 * @param {?proto.common.TimedSerializeIntervalConfig|undefined} value
 * @return {!proto.common.SnapshotSerializerConfig} returns this
*/
proto.common.SnapshotSerializerConfig.prototype.setTimed = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.SnapshotSerializerConfig} returns this
 */
proto.common.SnapshotSerializerConfig.prototype.clearTimed = function() {
  return this.setTimed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.SnapshotSerializerConfig.prototype.hasTimed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlockHeightSerializeIntervalConfig block_height = 3;
 * @return {?proto.common.BlockHeightSerializeIntervalConfig}
 */
proto.common.SnapshotSerializerConfig.prototype.getBlockHeight = function() {
  return /** @type{?proto.common.BlockHeightSerializeIntervalConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.BlockHeightSerializeIntervalConfig, 3));
};


/**
 * @param {?proto.common.BlockHeightSerializeIntervalConfig|undefined} value
 * @return {!proto.common.SnapshotSerializerConfig} returns this
*/
proto.common.SnapshotSerializerConfig.prototype.setBlockHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.SnapshotSerializerConfig} returns this
 */
proto.common.SnapshotSerializerConfig.prototype.clearBlockHeight = function() {
  return this.setBlockHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.SnapshotSerializerConfig.prototype.hasBlockHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.common.SnapshotSerializerConfig.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.SnapshotSerializerConfig} returns this
 */
proto.common.SnapshotSerializerConfig.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TimedSerializeIntervalConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TimedSerializeIntervalConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TimedSerializeIntervalConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TimedSerializeIntervalConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TimedSerializeIntervalConfig}
 */
proto.common.TimedSerializeIntervalConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TimedSerializeIntervalConfig;
  return proto.common.TimedSerializeIntervalConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TimedSerializeIntervalConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TimedSerializeIntervalConfig}
 */
proto.common.TimedSerializeIntervalConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TimedSerializeIntervalConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TimedSerializeIntervalConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TimedSerializeIntervalConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TimedSerializeIntervalConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 interval = 1;
 * @return {number}
 */
proto.common.TimedSerializeIntervalConfig.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TimedSerializeIntervalConfig} returns this
 */
proto.common.TimedSerializeIntervalConfig.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.BlockHeightSerializeIntervalConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.BlockHeightSerializeIntervalConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.BlockHeightSerializeIntervalConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockHeightSerializeIntervalConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.BlockHeightSerializeIntervalConfig}
 */
proto.common.BlockHeightSerializeIntervalConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.BlockHeightSerializeIntervalConfig;
  return proto.common.BlockHeightSerializeIntervalConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.BlockHeightSerializeIntervalConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.BlockHeightSerializeIntervalConfig}
 */
proto.common.BlockHeightSerializeIntervalConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.BlockHeightSerializeIntervalConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.BlockHeightSerializeIntervalConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.BlockHeightSerializeIntervalConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.BlockHeightSerializeIntervalConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 interval = 1;
 * @return {number}
 */
proto.common.BlockHeightSerializeIntervalConfig.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.BlockHeightSerializeIntervalConfig} returns this
 */
proto.common.BlockHeightSerializeIntervalConfig.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.common.KeyType = {
  KTDEFAULT: 0,
  KTTIMESTAMPKEY: 1
};

/**
 * @enum {number}
 */
proto.common.FilterExtensionType = {
  FETDEFAULT: 0,
  FETTIMESTAMP: 1
};

/**
 * @enum {number}
 */
proto.common.RuleType = {
  ABSOLUTEEXPIRETIME: 0
};

/**
 * @enum {number}
 */
proto.common.SerializeIntervalType = {
  HEIGHT: 0,
  TIMED: 1,
  EXIT: 2
};

goog.object.extend(exports, proto.common);
