// source: consensus/maxbft/maxbft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_block_pb = require('../../common/block_pb.js');
goog.object.extend(proto, common_block_pb);
var common_request_pb = require('../../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
var common_rwset_pb = require('../../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
var config_chain_config_pb = require('../../config/chain_config_pb.js');
goog.object.extend(proto, config_chain_config_pb);
goog.exportSymbol('proto.maxbft.BuildProposal', null, global);
goog.exportSymbol('proto.maxbft.ConsStateType', null, global);
goog.exportSymbol('proto.maxbft.ConsensusMsg', null, global);
goog.exportSymbol('proto.maxbft.GovernanceContract', null, global);
goog.exportSymbol('proto.maxbft.MessageType', null, global);
goog.exportSymbol('proto.maxbft.NodeStatus', null, global);
goog.exportSymbol('proto.maxbft.ProposalData', null, global);
goog.exportSymbol('proto.maxbft.ProposalFetchMsg', null, global);
goog.exportSymbol('proto.maxbft.ProposalRespMsg', null, global);
goog.exportSymbol('proto.maxbft.ProposeBlock', null, global);
goog.exportSymbol('proto.maxbft.QuorumCert', null, global);
goog.exportSymbol('proto.maxbft.ViewData', null, global);
goog.exportSymbol('proto.maxbft.VoteData', null, global);
goog.exportSymbol('proto.maxbft.WalEntry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ConsensusMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.ConsensusMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ConsensusMsg.displayName = 'proto.maxbft.ConsensusMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ProposalData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maxbft.ProposalData.repeatedFields_, null);
};
goog.inherits(proto.maxbft.ProposalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ProposalData.displayName = 'proto.maxbft.ProposalData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.QuorumCert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maxbft.QuorumCert.repeatedFields_, null);
};
goog.inherits(proto.maxbft.QuorumCert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.QuorumCert.displayName = 'proto.maxbft.QuorumCert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.VoteData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.VoteData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.VoteData.displayName = 'proto.maxbft.VoteData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ViewData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.ViewData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ViewData.displayName = 'proto.maxbft.ViewData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ProposalFetchMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.ProposalFetchMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ProposalFetchMsg.displayName = 'proto.maxbft.ProposalFetchMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ProposalRespMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.ProposalRespMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ProposalRespMsg.displayName = 'proto.maxbft.ProposalRespMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.BuildProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.BuildProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.BuildProposal.displayName = 'proto.maxbft.BuildProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.WalEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.WalEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.WalEntry.displayName = 'proto.maxbft.WalEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.GovernanceContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.maxbft.GovernanceContract.repeatedFields_, null);
};
goog.inherits(proto.maxbft.GovernanceContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.GovernanceContract.displayName = 'proto.maxbft.GovernanceContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.NodeStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.NodeStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.NodeStatus.displayName = 'proto.maxbft.NodeStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.maxbft.ProposeBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.maxbft.ProposeBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.maxbft.ProposeBlock.displayName = 'proto.maxbft.ProposeBlock';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ConsensusMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ConsensusMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ConsensusMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ConsensusMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ConsensusMsg}
 */
proto.maxbft.ConsensusMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ConsensusMsg;
  return proto.maxbft.ConsensusMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ConsensusMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ConsensusMsg}
 */
proto.maxbft.ConsensusMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.maxbft.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ConsensusMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ConsensusMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ConsensusMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ConsensusMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional MessageType type = 1;
 * @return {!proto.maxbft.MessageType}
 */
proto.maxbft.ConsensusMsg.prototype.getType = function() {
  return /** @type {!proto.maxbft.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.maxbft.MessageType} value
 * @return {!proto.maxbft.ConsensusMsg} returns this
 */
proto.maxbft.ConsensusMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.ConsensusMsg.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.maxbft.ConsensusMsg.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.maxbft.ConsensusMsg.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.ConsensusMsg} returns this
 */
proto.maxbft.ConsensusMsg.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maxbft.ProposalData.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ProposalData.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ProposalData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ProposalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalData.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && common_block_pb.Block.toObject(includeInstance, f),
    view: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    justifyQc: (f = msg.getJustifyQc()) && proto.maxbft.QuorumCert.toObject(includeInstance, f),
    epochId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    txRwSetList: jspb.Message.toObjectList(msg.getTxRwSetList(),
    common_rwset_pb.TxRWSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ProposalData}
 */
proto.maxbft.ProposalData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ProposalData;
  return proto.maxbft.ProposalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ProposalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ProposalData}
 */
proto.maxbft.ProposalData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposer(value);
      break;
    case 4:
      var value = new proto.maxbft.QuorumCert;
      reader.readMessage(value,proto.maxbft.QuorumCert.deserializeBinaryFromReader);
      msg.setJustifyQc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochId(value);
      break;
    case 6:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.addTxRwSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ProposalData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ProposalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getProposer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJustifyQc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.maxbft.QuorumCert.serializeBinaryToWriter
    );
  }
  f = message.getEpochId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTxRwSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Block block = 1;
 * @return {?proto.common.Block}
 */
proto.maxbft.ProposalData.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.maxbft.ProposalData} returns this
*/
proto.maxbft.ProposalData.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.ProposalData.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 view = 2;
 * @return {number}
 */
proto.maxbft.ProposalData.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string proposer = 3;
 * @return {string}
 */
proto.maxbft.ProposalData.prototype.getProposer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.setProposer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional QuorumCert justify_qc = 4;
 * @return {?proto.maxbft.QuorumCert}
 */
proto.maxbft.ProposalData.prototype.getJustifyQc = function() {
  return /** @type{?proto.maxbft.QuorumCert} */ (
    jspb.Message.getWrapperField(this, proto.maxbft.QuorumCert, 4));
};


/**
 * @param {?proto.maxbft.QuorumCert|undefined} value
 * @return {!proto.maxbft.ProposalData} returns this
*/
proto.maxbft.ProposalData.prototype.setJustifyQc = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.clearJustifyQc = function() {
  return this.setJustifyQc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.ProposalData.prototype.hasJustifyQc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 epoch_id = 5;
 * @return {number}
 */
proto.maxbft.ProposalData.prototype.getEpochId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.setEpochId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated common.TxRWSet tx_rw_set = 6;
 * @return {!Array<!proto.common.TxRWSet>}
 */
proto.maxbft.ProposalData.prototype.getTxRwSetList = function() {
  return /** @type{!Array<!proto.common.TxRWSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_rwset_pb.TxRWSet, 6));
};


/**
 * @param {!Array<!proto.common.TxRWSet>} value
 * @return {!proto.maxbft.ProposalData} returns this
*/
proto.maxbft.ProposalData.prototype.setTxRwSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.common.TxRWSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.TxRWSet}
 */
proto.maxbft.ProposalData.prototype.addTxRwSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.common.TxRWSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maxbft.ProposalData} returns this
 */
proto.maxbft.ProposalData.prototype.clearTxRwSetList = function() {
  return this.setTxRwSetList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maxbft.QuorumCert.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.QuorumCert.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.QuorumCert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.QuorumCert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.QuorumCert.toObject = function(includeInstance, msg) {
  var f, obj = {
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.maxbft.VoteData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.QuorumCert}
 */
proto.maxbft.QuorumCert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.QuorumCert;
  return proto.maxbft.QuorumCert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.QuorumCert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.QuorumCert}
 */
proto.maxbft.QuorumCert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.maxbft.VoteData;
      reader.readMessage(value,proto.maxbft.VoteData.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.QuorumCert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.QuorumCert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.QuorumCert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.QuorumCert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.maxbft.VoteData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VoteData votes = 1;
 * @return {!Array<!proto.maxbft.VoteData>}
 */
proto.maxbft.QuorumCert.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.maxbft.VoteData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.maxbft.VoteData, 1));
};


/**
 * @param {!Array<!proto.maxbft.VoteData>} value
 * @return {!proto.maxbft.QuorumCert} returns this
*/
proto.maxbft.QuorumCert.prototype.setVotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.maxbft.VoteData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.maxbft.VoteData}
 */
proto.maxbft.QuorumCert.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.maxbft.VoteData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maxbft.QuorumCert} returns this
 */
proto.maxbft.QuorumCert.prototype.clearVotesList = function() {
  return this.setVotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.VoteData.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.VoteData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.VoteData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.VoteData.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: msg.getBlockId_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    view: jspb.Message.getFieldWithDefault(msg, 3, 0),
    author: msg.getAuthor_asB64(),
    epochId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signature: (f = msg.getSignature()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.VoteData}
 */
proto.maxbft.VoteData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.VoteData;
  return proto.maxbft.VoteData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.VoteData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.VoteData}
 */
proto.maxbft.VoteData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochId(value);
      break;
    case 6:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.VoteData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.VoteData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.VoteData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.VoteData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAuthor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEpochId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.VoteData.prototype.getBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.maxbft.VoteData.prototype.getBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockId()));
};


/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.maxbft.VoteData.prototype.getBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.maxbft.VoteData.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 view = 3;
 * @return {number}
 */
proto.maxbft.VoteData.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes author = 4;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.VoteData.prototype.getAuthor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes author = 4;
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {string}
 */
proto.maxbft.VoteData.prototype.getAuthor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthor()));
};


/**
 * optional bytes author = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {!Uint8Array}
 */
proto.maxbft.VoteData.prototype.getAuthor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 epoch_id = 5;
 * @return {number}
 */
proto.maxbft.VoteData.prototype.getEpochId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.setEpochId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional common.EndorsementEntry signature = 6;
 * @return {?proto.common.EndorsementEntry}
 */
proto.maxbft.VoteData.prototype.getSignature = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 6));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.maxbft.VoteData} returns this
*/
proto.maxbft.VoteData.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.VoteData} returns this
 */
proto.maxbft.VoteData.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.VoteData.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ViewData.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ViewData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ViewData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ViewData.toObject = function(includeInstance, msg) {
  var f, obj = {
    view: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epochId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ViewData}
 */
proto.maxbft.ViewData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ViewData;
  return proto.maxbft.ViewData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ViewData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ViewData}
 */
proto.maxbft.ViewData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ViewData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ViewData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ViewData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ViewData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEpochId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 view = 1;
 * @return {number}
 */
proto.maxbft.ViewData.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ViewData} returns this
 */
proto.maxbft.ViewData.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 epoch_id = 2;
 * @return {number}
 */
proto.maxbft.ViewData.prototype.getEpochId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ViewData} returns this
 */
proto.maxbft.ViewData.prototype.setEpochId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ProposalFetchMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ProposalFetchMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ProposalFetchMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalFetchMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: msg.getBlockId_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    view: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requester: msg.getRequester_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ProposalFetchMsg}
 */
proto.maxbft.ProposalFetchMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ProposalFetchMsg;
  return proto.maxbft.ProposalFetchMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ProposalFetchMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ProposalFetchMsg}
 */
proto.maxbft.ProposalFetchMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequester(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalFetchMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ProposalFetchMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ProposalFetchMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalFetchMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRequester_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.ProposalFetchMsg.prototype.getBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.maxbft.ProposalFetchMsg.prototype.getBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockId()));
};


/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalFetchMsg.prototype.getBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.ProposalFetchMsg} returns this
 */
proto.maxbft.ProposalFetchMsg.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.maxbft.ProposalFetchMsg.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ProposalFetchMsg} returns this
 */
proto.maxbft.ProposalFetchMsg.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 view = 3;
 * @return {number}
 */
proto.maxbft.ProposalFetchMsg.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.ProposalFetchMsg} returns this
 */
proto.maxbft.ProposalFetchMsg.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes requester = 4;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.ProposalFetchMsg.prototype.getRequester = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes requester = 4;
 * This is a type-conversion wrapper around `getRequester()`
 * @return {string}
 */
proto.maxbft.ProposalFetchMsg.prototype.getRequester_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequester()));
};


/**
 * optional bytes requester = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequester()`
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalFetchMsg.prototype.getRequester_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequester()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.ProposalFetchMsg} returns this
 */
proto.maxbft.ProposalFetchMsg.prototype.setRequester = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ProposalRespMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ProposalRespMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ProposalRespMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalRespMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.maxbft.ProposalData.toObject(includeInstance, f),
    responser: msg.getResponser_asB64(),
    qc: (f = msg.getQc()) && proto.maxbft.QuorumCert.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ProposalRespMsg}
 */
proto.maxbft.ProposalRespMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ProposalRespMsg;
  return proto.maxbft.ProposalRespMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ProposalRespMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ProposalRespMsg}
 */
proto.maxbft.ProposalRespMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.maxbft.ProposalData;
      reader.readMessage(value,proto.maxbft.ProposalData.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponser(value);
      break;
    case 3:
      var value = new proto.maxbft.QuorumCert;
      reader.readMessage(value,proto.maxbft.QuorumCert.deserializeBinaryFromReader);
      msg.setQc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalRespMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ProposalRespMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ProposalRespMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposalRespMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.maxbft.ProposalData.serializeBinaryToWriter
    );
  }
  f = message.getResponser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.maxbft.QuorumCert.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProposalData proposal = 1;
 * @return {?proto.maxbft.ProposalData}
 */
proto.maxbft.ProposalRespMsg.prototype.getProposal = function() {
  return /** @type{?proto.maxbft.ProposalData} */ (
    jspb.Message.getWrapperField(this, proto.maxbft.ProposalData, 1));
};


/**
 * @param {?proto.maxbft.ProposalData|undefined} value
 * @return {!proto.maxbft.ProposalRespMsg} returns this
*/
proto.maxbft.ProposalRespMsg.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.ProposalRespMsg} returns this
 */
proto.maxbft.ProposalRespMsg.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.ProposalRespMsg.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes responser = 2;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.ProposalRespMsg.prototype.getResponser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes responser = 2;
 * This is a type-conversion wrapper around `getResponser()`
 * @return {string}
 */
proto.maxbft.ProposalRespMsg.prototype.getResponser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponser()));
};


/**
 * optional bytes responser = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponser()`
 * @return {!Uint8Array}
 */
proto.maxbft.ProposalRespMsg.prototype.getResponser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.ProposalRespMsg} returns this
 */
proto.maxbft.ProposalRespMsg.prototype.setResponser = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional QuorumCert qc = 3;
 * @return {?proto.maxbft.QuorumCert}
 */
proto.maxbft.ProposalRespMsg.prototype.getQc = function() {
  return /** @type{?proto.maxbft.QuorumCert} */ (
    jspb.Message.getWrapperField(this, proto.maxbft.QuorumCert, 3));
};


/**
 * @param {?proto.maxbft.QuorumCert|undefined} value
 * @return {!proto.maxbft.ProposalRespMsg} returns this
*/
proto.maxbft.ProposalRespMsg.prototype.setQc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.ProposalRespMsg} returns this
 */
proto.maxbft.ProposalRespMsg.prototype.clearQc = function() {
  return this.setQc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.ProposalRespMsg.prototype.hasQc = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.BuildProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.BuildProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.BuildProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.BuildProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    view: jspb.Message.getFieldWithDefault(msg, 2, 0),
    preHash: msg.getPreHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.BuildProposal}
 */
proto.maxbft.BuildProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.BuildProposal;
  return proto.maxbft.BuildProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.BuildProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.BuildProposal}
 */
proto.maxbft.BuildProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.BuildProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.BuildProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.BuildProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.BuildProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPreHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.maxbft.BuildProposal.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.BuildProposal} returns this
 */
proto.maxbft.BuildProposal.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 view = 2;
 * @return {number}
 */
proto.maxbft.BuildProposal.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.BuildProposal} returns this
 */
proto.maxbft.BuildProposal.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes pre_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.BuildProposal.prototype.getPreHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pre_hash = 3;
 * This is a type-conversion wrapper around `getPreHash()`
 * @return {string}
 */
proto.maxbft.BuildProposal.prototype.getPreHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreHash()));
};


/**
 * optional bytes pre_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreHash()`
 * @return {!Uint8Array}
 */
proto.maxbft.BuildProposal.prototype.getPreHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.BuildProposal} returns this
 */
proto.maxbft.BuildProposal.prototype.setPreHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.WalEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.WalEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.WalEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.WalEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: msg.getMsg_asB64(),
    msgType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastSnapshotIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.WalEntry}
 */
proto.maxbft.WalEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.WalEntry;
  return proto.maxbft.WalEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.WalEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.WalEntry}
 */
proto.maxbft.WalEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!proto.maxbft.MessageType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSnapshotIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.WalEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.WalEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.WalEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.WalEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLastSnapshotIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes msg = 1;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.WalEntry.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes msg = 1;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.maxbft.WalEntry.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.maxbft.WalEntry.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.WalEntry} returns this
 */
proto.maxbft.WalEntry.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional MessageType msg_type = 2;
 * @return {!proto.maxbft.MessageType}
 */
proto.maxbft.WalEntry.prototype.getMsgType = function() {
  return /** @type {!proto.maxbft.MessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.maxbft.MessageType} value
 * @return {!proto.maxbft.WalEntry} returns this
 */
proto.maxbft.WalEntry.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 last_snapshot_index = 3;
 * @return {number}
 */
proto.maxbft.WalEntry.prototype.getLastSnapshotIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.WalEntry} returns this
 */
proto.maxbft.WalEntry.prototype.setLastSnapshotIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.maxbft.GovernanceContract.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.GovernanceContract.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.GovernanceContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.GovernanceContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.GovernanceContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endView: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validatorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    configSequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chainConfig: (f = msg.getChainConfig()) && config_chain_config_pb.ChainConfig.toObject(includeInstance, f),
    certFrozenList: msg.getCertFrozenList_asB64(),
    crl: msg.getCrl_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.GovernanceContract}
 */
proto.maxbft.GovernanceContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.GovernanceContract;
  return proto.maxbft.GovernanceContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.GovernanceContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.GovernanceContract}
 */
proto.maxbft.GovernanceContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndView(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addValidators(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigSequence(value);
      break;
    case 5:
      var value = new config_chain_config_pb.ChainConfig;
      reader.readMessage(value,config_chain_config_pb.ChainConfig.deserializeBinaryFromReader);
      msg.setChainConfig(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCertFrozenList(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.GovernanceContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.GovernanceContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.GovernanceContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.GovernanceContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndView();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getConfigSequence();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getChainConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      config_chain_config_pb.ChainConfig.serializeBinaryToWriter
    );
  }
  f = message.getCertFrozenList_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCrl_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional uint64 epoch_id = 1;
 * @return {number}
 */
proto.maxbft.GovernanceContract.prototype.getEpochId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setEpochId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 end_view = 2;
 * @return {number}
 */
proto.maxbft.GovernanceContract.prototype.getEndView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setEndView = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string validators = 3;
 * @return {!Array<string>}
 */
proto.maxbft.GovernanceContract.prototype.getValidatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setValidatorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.addValidators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * optional uint64 config_sequence = 4;
 * @return {number}
 */
proto.maxbft.GovernanceContract.prototype.getConfigSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setConfigSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional config.ChainConfig chain_config = 5;
 * @return {?proto.config.ChainConfig}
 */
proto.maxbft.GovernanceContract.prototype.getChainConfig = function() {
  return /** @type{?proto.config.ChainConfig} */ (
    jspb.Message.getWrapperField(this, config_chain_config_pb.ChainConfig, 5));
};


/**
 * @param {?proto.config.ChainConfig|undefined} value
 * @return {!proto.maxbft.GovernanceContract} returns this
*/
proto.maxbft.GovernanceContract.prototype.setChainConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.clearChainConfig = function() {
  return this.setChainConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.maxbft.GovernanceContract.prototype.hasChainConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes cert_frozen_list = 6;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.GovernanceContract.prototype.getCertFrozenList = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes cert_frozen_list = 6;
 * This is a type-conversion wrapper around `getCertFrozenList()`
 * @return {string}
 */
proto.maxbft.GovernanceContract.prototype.getCertFrozenList_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCertFrozenList()));
};


/**
 * optional bytes cert_frozen_list = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertFrozenList()`
 * @return {!Uint8Array}
 */
proto.maxbft.GovernanceContract.prototype.getCertFrozenList_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCertFrozenList()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setCertFrozenList = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes CRL = 7;
 * @return {!(string|Uint8Array)}
 */
proto.maxbft.GovernanceContract.prototype.getCrl = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes CRL = 7;
 * This is a type-conversion wrapper around `getCrl()`
 * @return {string}
 */
proto.maxbft.GovernanceContract.prototype.getCrl_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCrl()));
};


/**
 * optional bytes CRL = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCrl()`
 * @return {!Uint8Array}
 */
proto.maxbft.GovernanceContract.prototype.getCrl_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCrl()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.maxbft.GovernanceContract} returns this
 */
proto.maxbft.GovernanceContract.prototype.setCrl = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.NodeStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.NodeStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.NodeStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.NodeStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    view: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nodeId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.NodeStatus}
 */
proto.maxbft.NodeStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.NodeStatus;
  return proto.maxbft.NodeStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.NodeStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.NodeStatus}
 */
proto.maxbft.NodeStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.NodeStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.NodeStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.NodeStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.NodeStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.maxbft.NodeStatus.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.NodeStatus} returns this
 */
proto.maxbft.NodeStatus.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 view = 2;
 * @return {number}
 */
proto.maxbft.NodeStatus.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.NodeStatus} returns this
 */
proto.maxbft.NodeStatus.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 epoch = 3;
 * @return {number}
 */
proto.maxbft.NodeStatus.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.maxbft.NodeStatus} returns this
 */
proto.maxbft.NodeStatus.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string node_id = 4;
 * @return {string}
 */
proto.maxbft.NodeStatus.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.maxbft.NodeStatus} returns this
 */
proto.maxbft.NodeStatus.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.maxbft.ProposeBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.maxbft.ProposeBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.maxbft.ProposeBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposeBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    isPropose: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.maxbft.ProposeBlock}
 */
proto.maxbft.ProposeBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.maxbft.ProposeBlock;
  return proto.maxbft.ProposeBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.maxbft.ProposeBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.maxbft.ProposeBlock}
 */
proto.maxbft.ProposeBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPropose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.maxbft.ProposeBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.maxbft.ProposeBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.maxbft.ProposeBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.maxbft.ProposeBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsPropose();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_propose = 1;
 * @return {boolean}
 */
proto.maxbft.ProposeBlock.prototype.getIsPropose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.maxbft.ProposeBlock} returns this
 */
proto.maxbft.ProposeBlock.prototype.setIsPropose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.maxbft.MessageType = {
  PROPOSAL_MESSAGE: 0,
  VOTE_MESSAGE: 1,
  PROPOSAL_FETCH_MESSAGE: 2,
  PROPOSAL_RESP_MESSAGE: 3,
  NEW_VIEW_MESSAGE: 4
};

/**
 * @enum {number}
 */
proto.maxbft.ConsStateType = {
  VOTE_COLLECT: 0,
  PACEMAKER: 1
};

goog.object.extend(exports, proto.maxbft);
