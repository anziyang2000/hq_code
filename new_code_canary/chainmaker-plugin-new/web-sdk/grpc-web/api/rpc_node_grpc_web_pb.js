/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: api/rpc_node.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_request_pb = require('../common/request_pb.js')

var common_result_pb = require('../common/result_pb.js')

var config_local_config_pb = require('../config/local_config_pb.js')

var config_log_config_pb = require('../config/log_config_pb.js')

var config_chainmaker_server_pb = require('../config/chainmaker_server_pb.js')

var google_api_annotations_pb = require('../google/api/annotations_pb.js')

var txpool_transaction_pool_pb = require('../txpool/transaction_pool_pb.js')
const proto = {};
proto.api = require('./rpc_node_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.RpcNodeClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.RpcNodePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.TxRequest,
 *   !proto.common.TxResponse>}
 */
const methodDescriptor_RpcNode_SendRequest = new grpc.web.MethodDescriptor(
  '/api.RpcNode/SendRequest',
  grpc.web.MethodType.UNARY,
  common_request_pb.TxRequest,
  common_result_pb.TxResponse,
  /**
   * @param {!proto.common.TxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_result_pb.TxResponse.deserializeBinary
);


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.TxResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.TxResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.sendRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/SendRequest',
      request,
      metadata || {},
      methodDescriptor_RpcNode_SendRequest,
      callback);
};


/**
 * @param {!proto.common.TxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.TxResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.sendRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/SendRequest',
      request,
      metadata || {},
      methodDescriptor_RpcNode_SendRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.TxRequest,
 *   !proto.common.SubscribeResult>}
 */
const methodDescriptor_RpcNode_Subscribe = new grpc.web.MethodDescriptor(
  '/api.RpcNode/Subscribe',
  grpc.web.MethodType.SERVER_STREAMING,
  common_request_pb.TxRequest,
  common_result_pb.SubscribeResult,
  /**
   * @param {!proto.common.TxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_result_pb.SubscribeResult.deserializeBinary
);


/**
 * @param {!proto.common.TxRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.common.SubscribeResult>}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.subscribe =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.RpcNode/Subscribe',
      request,
      metadata || {},
      methodDescriptor_RpcNode_Subscribe);
};


/**
 * @param {!proto.common.TxRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.common.SubscribeResult>}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodePromiseClient.prototype.subscribe =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.RpcNode/Subscribe',
      request,
      metadata || {},
      methodDescriptor_RpcNode_Subscribe);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.common.RawTxRequest,
 *   !proto.common.SubscribeResult>}
 */
const methodDescriptor_RpcNode_SubscribeWS = new grpc.web.MethodDescriptor(
  '/api.RpcNode/SubscribeWS',
  grpc.web.MethodType.SERVER_STREAMING,
  common_request_pb.RawTxRequest,
  common_result_pb.SubscribeResult,
  /**
   * @param {!proto.common.RawTxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_result_pb.SubscribeResult.deserializeBinary
);


/**
 * @param {!proto.common.RawTxRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.common.SubscribeResult>}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.subscribeWS =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.RpcNode/SubscribeWS',
      request,
      metadata || {},
      methodDescriptor_RpcNode_SubscribeWS);
};


/**
 * @param {!proto.common.RawTxRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.common.SubscribeResult>}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodePromiseClient.prototype.subscribeWS =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/api.RpcNode/SubscribeWS',
      request,
      metadata || {},
      methodDescriptor_RpcNode_SubscribeWS);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.config.DebugConfigRequest,
 *   !proto.config.DebugConfigResponse>}
 */
const methodDescriptor_RpcNode_UpdateDebugConfig = new grpc.web.MethodDescriptor(
  '/api.RpcNode/UpdateDebugConfig',
  grpc.web.MethodType.UNARY,
  config_local_config_pb.DebugConfigRequest,
  config_local_config_pb.DebugConfigResponse,
  /**
   * @param {!proto.config.DebugConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  config_local_config_pb.DebugConfigResponse.deserializeBinary
);


/**
 * @param {!proto.config.DebugConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.config.DebugConfigResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.config.DebugConfigResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.updateDebugConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/UpdateDebugConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_UpdateDebugConfig,
      callback);
};


/**
 * @param {!proto.config.DebugConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.config.DebugConfigResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.updateDebugConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/UpdateDebugConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_UpdateDebugConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.config.LogLevelsRequest,
 *   !proto.config.LogLevelsResponse>}
 */
const methodDescriptor_RpcNode_RefreshLogLevelsConfig = new grpc.web.MethodDescriptor(
  '/api.RpcNode/RefreshLogLevelsConfig',
  grpc.web.MethodType.UNARY,
  config_log_config_pb.LogLevelsRequest,
  config_log_config_pb.LogLevelsResponse,
  /**
   * @param {!proto.config.LogLevelsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  config_log_config_pb.LogLevelsResponse.deserializeBinary
);


/**
 * @param {!proto.config.LogLevelsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.config.LogLevelsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.config.LogLevelsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.refreshLogLevelsConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/RefreshLogLevelsConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_RefreshLogLevelsConfig,
      callback);
};


/**
 * @param {!proto.config.LogLevelsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.config.LogLevelsResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.refreshLogLevelsConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/RefreshLogLevelsConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_RefreshLogLevelsConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.config.ChainMakerVersionRequest,
 *   !proto.config.ChainMakerVersionResponse>}
 */
const methodDescriptor_RpcNode_GetChainMakerVersion = new grpc.web.MethodDescriptor(
  '/api.RpcNode/GetChainMakerVersion',
  grpc.web.MethodType.UNARY,
  config_chainmaker_server_pb.ChainMakerVersionRequest,
  config_chainmaker_server_pb.ChainMakerVersionResponse,
  /**
   * @param {!proto.config.ChainMakerVersionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  config_chainmaker_server_pb.ChainMakerVersionResponse.deserializeBinary
);


/**
 * @param {!proto.config.ChainMakerVersionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.config.ChainMakerVersionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.config.ChainMakerVersionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.getChainMakerVersion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/GetChainMakerVersion',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetChainMakerVersion,
      callback);
};


/**
 * @param {!proto.config.ChainMakerVersionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.config.ChainMakerVersionResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.getChainMakerVersion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/GetChainMakerVersion',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetChainMakerVersion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.config.CheckNewBlockChainConfigRequest,
 *   !proto.config.CheckNewBlockChainConfigResponse>}
 */
const methodDescriptor_RpcNode_CheckNewBlockChainConfig = new grpc.web.MethodDescriptor(
  '/api.RpcNode/CheckNewBlockChainConfig',
  grpc.web.MethodType.UNARY,
  config_local_config_pb.CheckNewBlockChainConfigRequest,
  config_local_config_pb.CheckNewBlockChainConfigResponse,
  /**
   * @param {!proto.config.CheckNewBlockChainConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  config_local_config_pb.CheckNewBlockChainConfigResponse.deserializeBinary
);


/**
 * @param {!proto.config.CheckNewBlockChainConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.config.CheckNewBlockChainConfigResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.config.CheckNewBlockChainConfigResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.checkNewBlockChainConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/CheckNewBlockChainConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_CheckNewBlockChainConfig,
      callback);
};


/**
 * @param {!proto.config.CheckNewBlockChainConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.config.CheckNewBlockChainConfigResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.checkNewBlockChainConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/CheckNewBlockChainConfig',
      request,
      metadata || {},
      methodDescriptor_RpcNode_CheckNewBlockChainConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.txpool.GetPoolStatusRequest,
 *   !proto.txpool.TxPoolStatus>}
 */
const methodDescriptor_RpcNode_GetPoolStatus = new grpc.web.MethodDescriptor(
  '/api.RpcNode/GetPoolStatus',
  grpc.web.MethodType.UNARY,
  txpool_transaction_pool_pb.GetPoolStatusRequest,
  txpool_transaction_pool_pb.TxPoolStatus,
  /**
   * @param {!proto.txpool.GetPoolStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  txpool_transaction_pool_pb.TxPoolStatus.deserializeBinary
);


/**
 * @param {!proto.txpool.GetPoolStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.txpool.TxPoolStatus)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.txpool.TxPoolStatus>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.getPoolStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/GetPoolStatus',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetPoolStatus,
      callback);
};


/**
 * @param {!proto.txpool.GetPoolStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.txpool.TxPoolStatus>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.getPoolStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/GetPoolStatus',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetPoolStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.txpool.GetTxIdsByTypeAndStageRequest,
 *   !proto.txpool.GetTxIdsByTypeAndStageResponse>}
 */
const methodDescriptor_RpcNode_GetTxIdsByTypeAndStage = new grpc.web.MethodDescriptor(
  '/api.RpcNode/GetTxIdsByTypeAndStage',
  grpc.web.MethodType.UNARY,
  txpool_transaction_pool_pb.GetTxIdsByTypeAndStageRequest,
  txpool_transaction_pool_pb.GetTxIdsByTypeAndStageResponse,
  /**
   * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  txpool_transaction_pool_pb.GetTxIdsByTypeAndStageResponse.deserializeBinary
);


/**
 * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.txpool.GetTxIdsByTypeAndStageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.txpool.GetTxIdsByTypeAndStageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.getTxIdsByTypeAndStage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/GetTxIdsByTypeAndStage',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetTxIdsByTypeAndStage,
      callback);
};


/**
 * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.txpool.GetTxIdsByTypeAndStageResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.getTxIdsByTypeAndStage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/GetTxIdsByTypeAndStage',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetTxIdsByTypeAndStage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.txpool.GetTxsInPoolByTxIdsRequest,
 *   !proto.txpool.GetTxsInPoolByTxIdsResponse>}
 */
const methodDescriptor_RpcNode_GetTxsInPoolByTxIds = new grpc.web.MethodDescriptor(
  '/api.RpcNode/GetTxsInPoolByTxIds',
  grpc.web.MethodType.UNARY,
  txpool_transaction_pool_pb.GetTxsInPoolByTxIdsRequest,
  txpool_transaction_pool_pb.GetTxsInPoolByTxIdsResponse,
  /**
   * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  txpool_transaction_pool_pb.GetTxsInPoolByTxIdsResponse.deserializeBinary
);


/**
 * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.txpool.GetTxsInPoolByTxIdsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.txpool.GetTxsInPoolByTxIdsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.RpcNodeClient.prototype.getTxsInPoolByTxIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.RpcNode/GetTxsInPoolByTxIds',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetTxsInPoolByTxIds,
      callback);
};


/**
 * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.txpool.GetTxsInPoolByTxIdsResponse>}
 *     Promise that resolves to the response
 */
proto.api.RpcNodePromiseClient.prototype.getTxsInPoolByTxIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.RpcNode/GetTxsInPoolByTxIds',
      request,
      metadata || {},
      methodDescriptor_RpcNode_GetTxsInPoolByTxIds);
};


module.exports = proto.api;

