// source: txpool/transaction_pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_transaction_pb = require('../common/transaction_pb.js');
goog.object.extend(proto, common_transaction_pb);
var common_request_pb = require('../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
goog.exportSymbol('proto.txpool.GetPoolStatusRequest', null, global);
goog.exportSymbol('proto.txpool.GetTxIdsByTypeAndStageRequest', null, global);
goog.exportSymbol('proto.txpool.GetTxIdsByTypeAndStageResponse', null, global);
goog.exportSymbol('proto.txpool.GetTxsInPoolByTxIdsRequest', null, global);
goog.exportSymbol('proto.txpool.GetTxsInPoolByTxIdsResponse', null, global);
goog.exportSymbol('proto.txpool.SignalType', null, global);
goog.exportSymbol('proto.txpool.TxBatch', null, global);
goog.exportSymbol('proto.txpool.TxBatchRecoverRequest', null, global);
goog.exportSymbol('proto.txpool.TxBatchRecoverResponse', null, global);
goog.exportSymbol('proto.txpool.TxPoolMsg', null, global);
goog.exportSymbol('proto.txpool.TxPoolMsgType', null, global);
goog.exportSymbol('proto.txpool.TxPoolSignal', null, global);
goog.exportSymbol('proto.txpool.TxPoolStatus', null, global);
goog.exportSymbol('proto.txpool.TxRecoverRequest', null, global);
goog.exportSymbol('proto.txpool.TxRecoverResponse', null, global);
goog.exportSymbol('proto.txpool.TxStage', null, global);
goog.exportSymbol('proto.txpool.TxType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxPoolSignal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpool.TxPoolSignal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxPoolSignal.displayName = 'proto.txpool.TxPoolSignal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxPoolStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpool.TxPoolStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxPoolStatus.displayName = 'proto.txpool.TxPoolStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxPoolMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpool.TxPoolMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxPoolMsg.displayName = 'proto.txpool.TxPoolMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.TxBatch.repeatedFields_, null);
};
goog.inherits(proto.txpool.TxBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxBatch.displayName = 'proto.txpool.TxBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxRecoverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.TxRecoverRequest.repeatedFields_, null);
};
goog.inherits(proto.txpool.TxRecoverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxRecoverRequest.displayName = 'proto.txpool.TxRecoverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxRecoverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.TxRecoverResponse.repeatedFields_, null);
};
goog.inherits(proto.txpool.TxRecoverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxRecoverResponse.displayName = 'proto.txpool.TxRecoverResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxBatchRecoverRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.TxBatchRecoverRequest.repeatedFields_, null);
};
goog.inherits(proto.txpool.TxBatchRecoverRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxBatchRecoverRequest.displayName = 'proto.txpool.TxBatchRecoverRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.TxBatchRecoverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.TxBatchRecoverResponse.repeatedFields_, null);
};
goog.inherits(proto.txpool.TxBatchRecoverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.TxBatchRecoverResponse.displayName = 'proto.txpool.TxBatchRecoverResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.GetPoolStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpool.GetPoolStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.GetPoolStatusRequest.displayName = 'proto.txpool.GetPoolStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.GetTxIdsByTypeAndStageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpool.GetTxIdsByTypeAndStageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.GetTxIdsByTypeAndStageRequest.displayName = 'proto.txpool.GetTxIdsByTypeAndStageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.GetTxIdsByTypeAndStageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.GetTxIdsByTypeAndStageResponse.repeatedFields_, null);
};
goog.inherits(proto.txpool.GetTxIdsByTypeAndStageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.GetTxIdsByTypeAndStageResponse.displayName = 'proto.txpool.GetTxIdsByTypeAndStageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.GetTxsInPoolByTxIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.GetTxsInPoolByTxIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.txpool.GetTxsInPoolByTxIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.GetTxsInPoolByTxIdsRequest.displayName = 'proto.txpool.GetTxsInPoolByTxIdsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpool.GetTxsInPoolByTxIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpool.GetTxsInPoolByTxIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.txpool.GetTxsInPoolByTxIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpool.GetTxsInPoolByTxIdsResponse.displayName = 'proto.txpool.GetTxsInPoolByTxIdsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxPoolSignal.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxPoolSignal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxPoolSignal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolSignal.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxPoolSignal}
 */
proto.txpool.TxPoolSignal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxPoolSignal;
  return proto.txpool.TxPoolSignal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxPoolSignal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxPoolSignal}
 */
proto.txpool.TxPoolSignal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.txpool.SignalType} */ (reader.readEnum());
      msg.setSignalType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxPoolSignal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxPoolSignal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxPoolSignal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolSignal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional SignalType signal_type = 1;
 * @return {!proto.txpool.SignalType}
 */
proto.txpool.TxPoolSignal.prototype.getSignalType = function() {
  return /** @type {!proto.txpool.SignalType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.txpool.SignalType} value
 * @return {!proto.txpool.TxPoolSignal} returns this
 */
proto.txpool.TxPoolSignal.prototype.setSignalType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.txpool.TxPoolSignal.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxPoolSignal} returns this
 */
proto.txpool.TxPoolSignal.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxPoolStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxPoolStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxPoolStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    configTxPoolSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commonTxPoolSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    configTxNumInQueue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    configTxNumInPending: jspb.Message.getFieldWithDefault(msg, 4, 0),
    commonTxNumInQueue: jspb.Message.getFieldWithDefault(msg, 5, 0),
    commonTxNumInPending: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxPoolStatus}
 */
proto.txpool.TxPoolStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxPoolStatus;
  return proto.txpool.TxPoolStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxPoolStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxPoolStatus}
 */
proto.txpool.TxPoolStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfigTxPoolSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommonTxPoolSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfigTxNumInQueue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfigTxNumInPending(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommonTxNumInQueue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommonTxNumInPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxPoolStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxPoolStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxPoolStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigTxPoolSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCommonTxPoolSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConfigTxNumInQueue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getConfigTxNumInPending();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCommonTxNumInQueue();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCommonTxNumInPending();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 config_tx_pool_size = 1;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getConfigTxPoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setConfigTxPoolSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 common_tx_pool_size = 2;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getCommonTxPoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setCommonTxPoolSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 config_tx_num_in_queue = 3;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getConfigTxNumInQueue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setConfigTxNumInQueue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 config_tx_num_in_pending = 4;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getConfigTxNumInPending = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setConfigTxNumInPending = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 common_tx_num_in_queue = 5;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getCommonTxNumInQueue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setCommonTxNumInQueue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 common_tx_num_in_pending = 6;
 * @return {number}
 */
proto.txpool.TxPoolStatus.prototype.getCommonTxNumInPending = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxPoolStatus} returns this
 */
proto.txpool.TxPoolStatus.prototype.setCommonTxNumInPending = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxPoolMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxPoolMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxPoolMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxPoolMsg}
 */
proto.txpool.TxPoolMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxPoolMsg;
  return proto.txpool.TxPoolMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxPoolMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxPoolMsg}
 */
proto.txpool.TxPoolMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.txpool.TxPoolMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxPoolMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxPoolMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxPoolMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxPoolMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional TxPoolMsgType type = 1;
 * @return {!proto.txpool.TxPoolMsgType}
 */
proto.txpool.TxPoolMsg.prototype.getType = function() {
  return /** @type {!proto.txpool.TxPoolMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.txpool.TxPoolMsgType} value
 * @return {!proto.txpool.TxPoolMsg} returns this
 */
proto.txpool.TxPoolMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.txpool.TxPoolMsg.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.txpool.TxPoolMsg.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.txpool.TxPoolMsg.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.txpool.TxPoolMsg} returns this
 */
proto.txpool.TxPoolMsg.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.TxBatch.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    common_transaction_pb.Transaction.toObject, includeInstance),
    txIdsMapMap: (f = msg.getTxIdsMapMap()) ? f.toObject(includeInstance, undefined) : [],
    endorsement: (f = msg.getEndorsement()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxBatch}
 */
proto.txpool.TxBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxBatch;
  return proto.txpool.TxBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxBatch}
 */
proto.txpool.TxBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 4:
      var value = new common_transaction_pb.Transaction;
      reader.readMessage(value,common_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 5:
      var value = msg.getTxIdsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 6:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setEndorsement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTxIdsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getEndorsement();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string batch_id = 1;
 * @return {string}
 */
proto.txpool.TxBatch.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxBatch} returns this
 */
proto.txpool.TxBatch.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 size = 3;
 * @return {number}
 */
proto.txpool.TxBatch.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxBatch} returns this
 */
proto.txpool.TxBatch.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated common.Transaction txs = 4;
 * @return {!Array<!proto.common.Transaction>}
 */
proto.txpool.TxBatch.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.common.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_transaction_pb.Transaction, 4));
};


/**
 * @param {!Array<!proto.common.Transaction>} value
 * @return {!proto.txpool.TxBatch} returns this
*/
proto.txpool.TxBatch.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.common.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Transaction}
 */
proto.txpool.TxBatch.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.common.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.TxBatch} returns this
 */
proto.txpool.TxBatch.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * map<string, int32> tx_ids_map = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.txpool.TxBatch.prototype.getTxIdsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.txpool.TxBatch} returns this
 */
proto.txpool.TxBatch.prototype.clearTxIdsMapMap = function() {
  this.getTxIdsMapMap().clear();
  return this;};


/**
 * optional common.EndorsementEntry endorsement = 6;
 * @return {?proto.common.EndorsementEntry}
 */
proto.txpool.TxBatch.prototype.getEndorsement = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 6));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.txpool.TxBatch} returns this
*/
proto.txpool.TxBatch.prototype.setEndorsement = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpool.TxBatch} returns this
 */
proto.txpool.TxBatch.prototype.clearEndorsement = function() {
  return this.setEndorsement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpool.TxBatch.prototype.hasEndorsement = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.TxRecoverRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxRecoverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxRecoverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxRecoverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxRecoverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxRecoverRequest}
 */
proto.txpool.TxRecoverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxRecoverRequest;
  return proto.txpool.TxRecoverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxRecoverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxRecoverRequest}
 */
proto.txpool.TxRecoverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxRecoverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxRecoverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxRecoverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxRecoverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.txpool.TxRecoverRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxRecoverRequest} returns this
 */
proto.txpool.TxRecoverRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.txpool.TxRecoverRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxRecoverRequest} returns this
 */
proto.txpool.TxRecoverRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string tx_ids = 3;
 * @return {!Array<string>}
 */
proto.txpool.TxRecoverRequest.prototype.getTxIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpool.TxRecoverRequest} returns this
 */
proto.txpool.TxRecoverRequest.prototype.setTxIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpool.TxRecoverRequest} returns this
 */
proto.txpool.TxRecoverRequest.prototype.addTxIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.TxRecoverRequest} returns this
 */
proto.txpool.TxRecoverRequest.prototype.clearTxIdsList = function() {
  return this.setTxIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.TxRecoverResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxRecoverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxRecoverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxRecoverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxRecoverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    common_transaction_pb.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxRecoverResponse}
 */
proto.txpool.TxRecoverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxRecoverResponse;
  return proto.txpool.TxRecoverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxRecoverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxRecoverResponse}
 */
proto.txpool.TxRecoverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new common_transaction_pb.Transaction;
      reader.readMessage(value,common_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxRecoverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxRecoverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxRecoverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxRecoverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.txpool.TxRecoverResponse.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxRecoverResponse} returns this
 */
proto.txpool.TxRecoverResponse.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.txpool.TxRecoverResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxRecoverResponse} returns this
 */
proto.txpool.TxRecoverResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated common.Transaction txs = 3;
 * @return {!Array<!proto.common.Transaction>}
 */
proto.txpool.TxRecoverResponse.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.common.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_transaction_pb.Transaction, 3));
};


/**
 * @param {!Array<!proto.common.Transaction>} value
 * @return {!proto.txpool.TxRecoverResponse} returns this
*/
proto.txpool.TxRecoverResponse.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Transaction}
 */
proto.txpool.TxRecoverResponse.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.TxRecoverResponse} returns this
 */
proto.txpool.TxRecoverResponse.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.TxBatchRecoverRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxBatchRecoverRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxBatchRecoverRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxBatchRecoverRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatchRecoverRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    batchIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxBatchRecoverRequest}
 */
proto.txpool.TxBatchRecoverRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxBatchRecoverRequest;
  return proto.txpool.TxBatchRecoverRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxBatchRecoverRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxBatchRecoverRequest}
 */
proto.txpool.TxBatchRecoverRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBatchIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxBatchRecoverRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxBatchRecoverRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxBatchRecoverRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatchRecoverRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBatchIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.txpool.TxBatchRecoverRequest.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxBatchRecoverRequest} returns this
 */
proto.txpool.TxBatchRecoverRequest.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.txpool.TxBatchRecoverRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxBatchRecoverRequest} returns this
 */
proto.txpool.TxBatchRecoverRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string batch_ids = 3;
 * @return {!Array<string>}
 */
proto.txpool.TxBatchRecoverRequest.prototype.getBatchIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpool.TxBatchRecoverRequest} returns this
 */
proto.txpool.TxBatchRecoverRequest.prototype.setBatchIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpool.TxBatchRecoverRequest} returns this
 */
proto.txpool.TxBatchRecoverRequest.prototype.addBatchIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.TxBatchRecoverRequest} returns this
 */
proto.txpool.TxBatchRecoverRequest.prototype.clearBatchIdsList = function() {
  return this.setBatchIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.TxBatchRecoverResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.TxBatchRecoverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.TxBatchRecoverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.TxBatchRecoverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatchRecoverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txBatchesList: jspb.Message.toObjectList(msg.getTxBatchesList(),
    proto.txpool.TxBatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.TxBatchRecoverResponse}
 */
proto.txpool.TxBatchRecoverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.TxBatchRecoverResponse;
  return proto.txpool.TxBatchRecoverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.TxBatchRecoverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.TxBatchRecoverResponse}
 */
proto.txpool.TxBatchRecoverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.txpool.TxBatch;
      reader.readMessage(value,proto.txpool.TxBatch.deserializeBinaryFromReader);
      msg.addTxBatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.TxBatchRecoverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.TxBatchRecoverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.TxBatchRecoverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.TxBatchRecoverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxBatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.txpool.TxBatch.serializeBinaryToWriter
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.txpool.TxBatchRecoverResponse.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.TxBatchRecoverResponse} returns this
 */
proto.txpool.TxBatchRecoverResponse.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.txpool.TxBatchRecoverResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpool.TxBatchRecoverResponse} returns this
 */
proto.txpool.TxBatchRecoverResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TxBatch tx_batches = 3;
 * @return {!Array<!proto.txpool.TxBatch>}
 */
proto.txpool.TxBatchRecoverResponse.prototype.getTxBatchesList = function() {
  return /** @type{!Array<!proto.txpool.TxBatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.txpool.TxBatch, 3));
};


/**
 * @param {!Array<!proto.txpool.TxBatch>} value
 * @return {!proto.txpool.TxBatchRecoverResponse} returns this
*/
proto.txpool.TxBatchRecoverResponse.prototype.setTxBatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.txpool.TxBatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.txpool.TxBatch}
 */
proto.txpool.TxBatchRecoverResponse.prototype.addTxBatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.txpool.TxBatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.TxBatchRecoverResponse} returns this
 */
proto.txpool.TxBatchRecoverResponse.prototype.clearTxBatchesList = function() {
  return this.setTxBatchesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.GetPoolStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.GetPoolStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.GetPoolStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetPoolStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.GetPoolStatusRequest}
 */
proto.txpool.GetPoolStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.GetPoolStatusRequest;
  return proto.txpool.GetPoolStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.GetPoolStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.GetPoolStatusRequest}
 */
proto.txpool.GetPoolStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.GetPoolStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.GetPoolStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.GetPoolStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetPoolStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.txpool.GetPoolStatusRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.GetPoolStatusRequest} returns this
 */
proto.txpool.GetPoolStatusRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.GetTxIdsByTypeAndStageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txStage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.GetTxIdsByTypeAndStageRequest}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.GetTxIdsByTypeAndStageRequest;
  return proto.txpool.GetTxIdsByTypeAndStageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.GetTxIdsByTypeAndStageRequest}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!proto.txpool.TxType} */ (reader.readEnum());
      msg.setTxType(value);
      break;
    case 3:
      var value = /** @type {!proto.txpool.TxStage} */ (reader.readEnum());
      msg.setTxStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.GetTxIdsByTypeAndStageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.GetTxIdsByTypeAndStageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTxStage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.GetTxIdsByTypeAndStageRequest} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TxType tx_type = 2;
 * @return {!proto.txpool.TxType}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.getTxType = function() {
  return /** @type {!proto.txpool.TxType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.txpool.TxType} value
 * @return {!proto.txpool.GetTxIdsByTypeAndStageRequest} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.setTxType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TxStage tx_stage = 3;
 * @return {!proto.txpool.TxStage}
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.getTxStage = function() {
  return /** @type {!proto.txpool.TxStage} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.txpool.TxStage} value
 * @return {!proto.txpool.GetTxIdsByTypeAndStageRequest} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageRequest.prototype.setTxStage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.GetTxIdsByTypeAndStageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.GetTxIdsByTypeAndStageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.GetTxIdsByTypeAndStageResponse}
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.GetTxIdsByTypeAndStageResponse;
  return proto.txpool.GetTxIdsByTypeAndStageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.GetTxIdsByTypeAndStageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.GetTxIdsByTypeAndStageResponse}
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.GetTxIdsByTypeAndStageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.GetTxIdsByTypeAndStageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string tx_ids = 1;
 * @return {!Array<string>}
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.getTxIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpool.GetTxIdsByTypeAndStageResponse} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.setTxIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpool.GetTxIdsByTypeAndStageResponse} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.addTxIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.GetTxIdsByTypeAndStageResponse} returns this
 */
proto.txpool.GetTxIdsByTypeAndStageResponse.prototype.clearTxIdsList = function() {
  return this.setTxIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.GetTxsInPoolByTxIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.GetTxsInPoolByTxIdsRequest;
  return proto.txpool.GetTxsInPoolByTxIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.GetTxsInPoolByTxIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.GetTxsInPoolByTxIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string tx_ids = 2;
 * @return {!Array<string>}
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.getTxIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.setTxIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.addTxIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsRequest} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsRequest.prototype.clearTxIdsList = function() {
  return this.setTxIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.txpool.GetTxsInPoolByTxIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpool.GetTxsInPoolByTxIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    common_transaction_pb.Transaction.toObject, includeInstance),
    txIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpool.GetTxsInPoolByTxIdsResponse;
  return proto.txpool.GetTxsInPoolByTxIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpool.GetTxsInPoolByTxIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_transaction_pb.Transaction;
      reader.readMessage(value,common_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpool.GetTxsInPoolByTxIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpool.GetTxsInPoolByTxIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTxIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated common.Transaction txs = 1;
 * @return {!Array<!proto.common.Transaction>}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.common.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_transaction_pb.Transaction, 1));
};


/**
 * @param {!Array<!proto.common.Transaction>} value
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse} returns this
*/
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Transaction}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * repeated string tx_ids = 2;
 * @return {!Array<string>}
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.getTxIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.setTxIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.addTxIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpool.GetTxsInPoolByTxIdsResponse} returns this
 */
proto.txpool.GetTxsInPoolByTxIdsResponse.prototype.clearTxIdsList = function() {
  return this.setTxIdsList([]);
};


/**
 * @enum {number}
 */
proto.txpool.SignalType = {
  NO_EVENT: 0,
  TRANSACTION_INCOME: 1,
  BLOCK_PROPOSE: 2
};

/**
 * @enum {number}
 */
proto.txpool.TxType = {
  UNKNOWN_TYPE: 0,
  CONFIG_TX: 1,
  COMMON_TX: 2,
  ALL_TYPE: 3
};

/**
 * @enum {number}
 */
proto.txpool.TxStage = {
  UNKNOWN_STAGE: 0,
  IN_QUEUE: 1,
  IN_PENDING: 2,
  ALL_STAGE: 3
};

/**
 * @enum {number}
 */
proto.txpool.TxPoolMsgType = {
  SINGLE_TX: 0,
  BATCH_TX: 1,
  RECOVER_REQ: 2,
  RECOVER_RESP: 3
};

goog.object.extend(exports, proto.txpool);
