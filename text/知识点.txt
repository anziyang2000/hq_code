1、 ssh-keygen -t rsa -C "2475576676@qq.com"
输入hqshuke@192.168.90.141的密码（远程操作密码：hqsk）

2、 堡垒机账户：
su anziyang
密：hqsk

3、 vim中退出“insert” 模式并保存更改，请按下“Escape” 键，然后在命令模式下输入“:wq” 以保存并退出

4、 创建文件夹：mkdir 文件夹名
删除某个文件：
rm -rf 目录名字

5、 提示我没有权限，输入：source /etc/profile

6、 复制这个目录下的所有文件命令：
cp -rfv /fabric-samples/tokenerc-20/ ./
cp -rfv /fabric-samples/tokenerc-20/* ./  这个是只复制内容，不复制那层目录名

cp -rfv /home/hqshuke/.vscode-server

7、 ctx.getContract 是 Hyperledger Fabric Node.js SDK 中的一个方法，用于获取通道上已经实例化的智能合约（chaincode）的实例。在 Fabric 网络中，智能合约需要在通道上进行实例化后才能被调用。
具体而言，ctx.getContract 方法接受两个参数：
1、chaincodeName：要获取的智能合约的名称。
2、channelName：智能合约所在的通道的名称。
然后，它返回一个包含指定智能合约的实例的对象，您可以使用这个对象来调用智能合约的方法。

8、 network.getContract 是 Hyperledger Fabric Node.js SDK 中的一个方法，用于获取通道上已经实例化的智能合约（chaincode）的实例。在 Fabric 网络中，智能合约需要在通道上进行实例化后才能被调用。
具体而言，network.getContract 方法接受一个参数：
chaincodeName：要获取的智能合约的名称。

9、 部署脚本：
./network.sh chaincode ccDeploy  -deploy_mode multi    -channel_name chan-hqsk-ticket -org_name business -ccn token20-v1 -ccv 1.0 -ccp /node-data/code/fabric-samples/token-erc-20/chaincode-javascript -ccl javascript

10、 测试网部署脚本：
./network.sh deployCC -ccn token20-v1 -ccv 1.0.0 -ccl javascript -ccp ../token-erc-20/chaincode-javascript/
./network.sh deployCC -ccn business-v1 -ccv 1.0.0 -ccl javascript -ccp ../token-erc-20/chaincode-javascript2/
测试网络调用函数：
export ContractName="token20-v1"
export FABRIC_CFG_PATH=/fabric-samples/test-network/compose/docker/peercfg/

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp
export CORE_PEER_ADDRESS=peer0.org1.example.com:7051

peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls \
--cafile "/fabric-samples/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" \
-C mychannel -n $ContractName \
--peerAddresses localhost:7051 --tlsRootCertFiles "/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem" \
-c '{"function":"Initialize","Args":["name", "symbol", "2"]}'

ssh-keygen -t rsa -C "2475576676@qq.com"


11、 部署到开发网（需要cd到 fabric-deploy执行命令）：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn tk20-v2 -ccv 1 -ccp /fabric-samples/token-erc-20/chaincode-go/ -ccl go


./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket721-v6 -ccv 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket/ -ccl javascript
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ERC20-v1 -ccv 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/token20/chaincode-javascript/ -ccl javascript
   
./network.sh chaincode ccDeploy -ccp /node-data/fabric-code/token-erc-20/
/node-data/fabric-code/fabric-samples/token-erc-20/chaincode-javascript
开发网络调用函数：
！旧版本的：：export FABRIC_CFG_PATH=/fabric-deploy/org/skdatacenter1/peers/peer1

141部署：
（可以直接测下了）laolaolaolaolaosilaxixixixilaxilasao
没有做分割之前的：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 2.9.1 -ccs 67 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/ticketBefore3525/ -ccl javascript
做了分割之后的：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn split-tickets -ccv 1.1.9 -ccs 19 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn evidence-contract -ccv 1.0.8 -ccs 6 -ccp  /node-data/code/smart-contracts/fabric-contracts/evidence/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn exchange-contract -ccv 1.1.6 -ccs 17 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn financial-system -ccv 1.0.1 -ccs 2 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/finance/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn testCall -ccv 1.0.1 -ccs 2 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/testCall/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn test-contract -ccv 1.0.2 -ccs 3 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

   ./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn test-tickets -ccv 1.0.0 -ccs 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript
   
   ./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn TestToken -ccv 1.0.1 -ccs 2 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/test-transfer/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets1 -ccv 1.0.0 -ccs 1 -ccep "AND('yilvtong.member')" -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets2 -ccv 1.0.0 -ccs 1 -ccep "AND('yilvtong.member', 'upaypal.member')" -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 2.9.1 -ccs 67 -ccp  /home/anziyang/code/smart-contracts/fabric-contracts/ticketBefore3525/ -ccl javascript

-ccep "AND('yilvtong.member')"
-ccep "AND('yilvtong.member', 'upaypal.member', 'financenet.member', 'notarization.member')"
digital-tickets1
digital-tickets2

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-credits -ccv 10.0 -ccs 2 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/token20/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn integral-app -ccv 1.0 -ccs 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/token20/ -ccl javascript

		./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn tickets -ccv 1.0 -ccs 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript
				./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn tickets -ccv 3 -ccs 3  -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript
		./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn token -ccv 1.0 -ccs 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/token20/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn upgrade-v1 -ccv 2 -ccs 2 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn token-v1 -ccv 1 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/token20/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket-v15 -ccv 4.0 -ccs 4 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh deployCC -ccn ticket-v16 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccv 1 -ccl javascript
./network.sh deployCC -ccn ticket-v2 /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript -ccv 1.0 -ccs 1

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket-v2 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript -ccv 1.0 -ccs 1


result: status:200 payload:"{\"type\":\"Buffer\",\"data\":[34,104,113,115,107,34]}" 
result: status:200 payload:"{\"type\":\"Buffer\",\"data\":[34,104,113,115,107,34]}" 
-c '{"Args":["InitLedger", "123"]}'
-c '{"function":"InitLedger","Args":["skdatacenter1", "0xskadministrator1"]}'

 "\000nft\000111\000"



链上调用：
export FABRIC_CFG_PATH=/fabric-deploy/data/org/yilvtong/peers/peer1
export ContractName="split-tickets"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="yilvtong"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/yilvtong/users/0xsksta91e425813dbbfe97b0f8b7ce743e78899af/msp
export CORE_PEER_ADDRESS=peer1.yilvtong:7001

peer chaincode invoke -o order1.datamint:5001 --ordererTLSHostnameOverride order1.datamint --tls --cafile "/fabric-deploy/data/org/datamint/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C tourism -n $ContractName \
--peerAddresses peer1.yilvtong:7001 --tlsRootCertFiles "/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.upaypal:7005 --tlsRootCertFiles "/fabric-deploy/data/org/upaypal/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.notarization:7009 --tlsRootCertFiles "/fabric-deploy/data/org/notarization/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Initialize","Args":["ticket", "TICKET", "yilvtong", "0xsksta91e425813dbbfe97b0f8b7ce743e78899af"]}'

export FABRIC_CFG_PATH=/fabric-deploy/data/org/yilvtong/peers/peer1
export ContractName="test-contract"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="yilvtong"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/yilvtong/users/0xsksta91e425813dbbfe97b0f8b7ce743e78899af/msp
export CORE_PEER_ADDRESS=peer1.yilvtong:7001

peer chaincode invoke -o order1.datamint:5001 --ordererTLSHostnameOverride order1.datamint --tls --cafile "/fabric-deploy/data/org/datamint/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C tourism -n $ContractName \
--peerAddresses peer1.yilvtong:7001 --tlsRootCertFiles "/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.upaypal:7005 --tlsRootCertFiles "/fabric-deploy/data/org/upaypal/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.notarization:7009 --tlsRootCertFiles "/fabric-deploy/data/org/notarization/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Mint","Args":["100"]}'
-c '{"function":"Init","Args":["hqsk", "HQSK", "18", "yilvtong", "0xsksta91e425813dbbfe97b0f8b7ce743e78899af"]}'

export FABRIC_CFG_PATH=/fabric-deploy/data/org/skdatacenter1/peers/peer1
export ContractName="test-contract"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="skdatacenter1"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/skdatacenter1/users/0xskadministrator1/msp
export CORE_PEER_ADDRESS=peer1.skdatacenter1:7001

peer chaincode invoke -o order1.skorder1:5001 --ordererTLSHostnameOverride order1.skorder1 --tls --cafile "/fabric-deploy/data/org/skorder1/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C chan-travel -n $ContractName \
--peerAddresses peer1.skdatacenter1:7001 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter2:7005 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter2/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter3:7009 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter3/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Initialize","Args":["hqsk", "HQSK", "18", "skdatacenter1", "0xskadministrator1"]}'

-c '{"function":"Transfer","Args":["", ""]}'
Transfer

fabric-deploy/data/org/skdatacenter1/users/0xskadministrator1

这是我在我的js合约中编写的Mint函数，但是微服务调用我的函数报错的时候并不会收到具体的报错信息，可以帮我看下是怎么回事吗？如何让他收到具体的报错信息
开发网部署合约路径：
/node-data/code/smart-contracts
记得在root里面，且名字要规范
部署之前可以 proxy 一下
41-dev开发网：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 1.1.2 -ccs 17 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn evidence-contract -ccv 1.1.1 -ccs 9 -ccp /node-data/code/smart-contracts/fabric-contracts/evidence/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn exchange-contract -ccv 1.0.8 -ccs 9 -ccp /node-data/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn financial-system -ccv 1.0.0 -ccs 1 -ccp /node-data/code/smart-contracts/fabric-contracts/finance/ -ccl javascript

               ./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket-v6 -ccv 1 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript
43-test开发网：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 1.5.5 -ccs 51 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn exchange-contract -ccv 1.0.6 -ccs 7 -ccp /node-data/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn financial-system -ccv 1.0.0 -ccs 1 -ccp /node-data/code/smart-contracts/fabric-contracts/finance/ -ccl javascript

canary 环境：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 1.1.6 -ccs 17 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn Digital-Tickets -ccv 1.0 -ccs 1 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn exchange-contract -ccv 1.0.4 -ccs 5 -ccp /node-data/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn financial-system -ccv 1.0.1 -ccs 2 -ccp /node-data/code/smart-contracts/fabric-contracts/finance/ -ccl javascript

prod 正式环境：
./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn digital-tickets -ccv 1.0.1 -ccs 2 -ccp /node-data/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn exchange-contract -ccv 1.0.4 -ccs 5 -ccp /node-data/code/smart-contracts/fabric-contracts/exchange/ -ccl javascript

./network.sh chaincode ccDeploy -deploy_mode multi -channel_name tourism -org_name yilvtong -ccn financial-system -ccv 1.0.0 -ccs 1 -ccp /node-data/code/smart-contracts/fabric-contracts/finance/ -ccl javascript


export FABRIC_CFG_PATH=/fabric-deploy/data/org/yilvtong/peers/peer1
export ContractName="exchange-contract"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="yilvtong"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/yilvtong/users/0xsksta91e425813dbbfe97b0f8b7ce743e78899af/msp
export CORE_PEER_ADDRESS=peer1.yilvtong:7001

peer chaincode invoke -o order1.datamint:5001 --ordererTLSHostnameOverride order1.datamint --tls --cafile "/fabric-deploy/data/org/datamint/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C tourism -n $ContractName \
--peerAddresses peer1.yilvtong:7001 --tlsRootCertFiles "/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.upaypal:7001 --tlsRootCertFiles "/fabric-deploy/data/org/upaypal/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.notarization:7001 --tlsRootCertFiles "/fabric-deploy/data/org/notarization/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Initialize","Args":["ticket", "TICKET", "yilvtong", "0xsksta91e425813dbbfe97b0f8b7ce743e78899af"]}'

export FABRIC_CFG_PATH=/fabric-deploy/data/org/yilvtong/peers/peer1
export ContractName="digital-tickets"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="yilvtong"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/yilvtong/users/0xsksta91e425813dbbfe97b0f8b7ce743e78899af/msp
export CORE_PEER_ADDRESS=peer1.yilvtong:7001

peer chaincode invoke -o order1.datamint:5001 --ordererTLSHostnameOverride order1.datamint --tls --cafile "/fabric-deploy/data/org/datamint/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C tourism -n $ContractName \
--peerAddresses peer1.yilvtong:7001 --tlsRootCertFiles "/fabric-deploy/data/org/yilvtong/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.upaypal:7005 --tlsRootCertFiles "/fabric-deploy/data/org/upaypal/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.notarization:7009 --tlsRootCertFiles "/fabric-deploy/data/org/notarization/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Initialize","Args":["ticket", "TICKET", "yilvtong", "0xsksta91e425813dbbfe97b0f8b7ce743e78899af"]}'
178986228049022976120240724ace791b1da554f3f0004



sinon.assert.calledWith(token.sub, 1500, 500)  这个函数用于检查指定的 Sinon stub  函数是否被调用，并且检查调用时传入的参数是否符合预期
token.sub(1500, 500)，即用户的余额为 1500，需要支付的费用为 500。这个断言验证了在调用 token.Fee 函数时，用户账户余额被正确扣除了相应的费用。


cd /node-data/fabric-code/fabric-samples/token-erc-20/ ./

feature-fabric-crosstest


12、 推送到git：
	1、拉取指定的origin（远程仓库别名），本地分支名称：远程分支名称
	2、git init
	3、git add .
	4、git commit -m "要用英文"
	5、推送到远程 git push origin master:feature-fabric-crosstest
	账户：anziyang
	密：An19
	!!!!!!!!!出现冲突强制推送：git push --force origin master:feature-fabric-crosstest 
cd /code/smart-contracts/下面  但是推送到gitlab需要配置公司的个人邮箱，公私钥gitlab和本地要匹配（如果在远程开发，要保证gitlab和远程要匹配），然后git push 分支名
	
13、 erc721合约中的 Mint 函数应该有把 nft 铸造给谁的那个 to 参数（之前mzxkg）


14、js中
将js对象转成json格式的字符串：JSON.stringify（）
将json格式的字符串转成js对象：JSON.parse()

15、!!!!!!!!在 Fabric 智能合约中，传递的参数都是以字符串形式传递的，但你可以在链码中对这些字符串进行解析和转换，以满足具体的业务需求

16、
在 JavaScript 中，对象的属性名可以不带引号。在 JSON 格式中，属性名需要带双引号，但在 JavaScript 中，如果属性名符合标识符的命名规则（比如不以数字开头，不包含特殊字符等），则可以不用引号。

例如，以下两种写法在 JavaScript 中都是合法的：

```javascript
const obj = {
    name: "John",
    age: 30,
    city: "New York"
};

const obj = {
    "name": "John",
    "age": 30,
    "city": "New York"
};
```
上述两种写法表达的意思是一样的，它们都创建了相同的对象，并且这两个对象是一模一样的。JavaScript 解析器会将不带引号的属性名转换为带引号的属性名，因此这两种写法在内部表示上是相同的。因此，无论使用哪种写法，创建的对象都是一样的。

17、 git config --list

18、
0x3F6A 的十进制表示为：
0x 表示这是一个十六进制的数字，0-9，A-F
0x3F6A = (3 * 16^3) + (15 * 16^2) + (6 * 16^1) + (10 * 16^0)
       = (3 * 4096) + (15 * 256) + (6 * 16) + (10 * 1)
       = 12288 + 3840 + 96 + 10
       = 16490
	   
	   
要将一个十进制数转换为十六进制，你可以使用除以16的方法。以下是一个示例过程：

1. 将十进制数除以16，得到商和余数。
2. 将余数转换为对应的十六进制数字，并记录下来。
3. 将商继续除以16，重复上述步骤，直到商为0为止。
4. 将记录下来的十六进制数字倒序排列，即可得到最终的十六进制表示。

让我们来尝试将十进制数67429转换为十六进制：

- 67429 ÷ 16 = 4214 ... 5
- 4214 ÷ 16 = 263 ... 6
- 263 ÷ 16 = 16 ... 7
- 16 ÷ 16 = 1 ... 0
- 1 ÷ 16 = 0 ... 1

现在我们已经得到了商为0的结果，接下来我们将余数转换为对应的十六进制数字，然后倒序排列：

- 1: 1
- 0: 0
- 7: 7
- 6: 6
- 5: 5

所以，67429的十六进制表示为0x10765。
	   
19、部署完合约调用函数的时候报错：
Command 'peer' not found, did you mean:

  command 'beer' from deb gerstensaft (0.3-4.2)
  command 'pear' from deb php-pear (1:1.10.9+submodules+notgz-1ubuntu0.20.04.3)
  command 'peek' from deb peek (1.5.1-1)
  command 'seer' from deb seer (1.1.4-2build2)
  command 'peet' from deb pipexec (2.5.5-2)
  command 'pee' from deb moreutils (0.63-1)

Try: apt install <deb name>
  可运行：source /etc/profile
         peer --version


20、cd 到 Root 脚本的fa-de下面 执行./testnet.sh  -stop 关闭网络
                            执行./testnet.sh  -testnet 开启网络
							
41网络中：root@blockchain-dev-01:/node-data/code/smart-contracts/fabric-contracts#在这个目录下拉取代码：
通过su - 或者sudo 进入root ，密码就是 root
root@blockchain-test:/node-data/code# git clone -b dev-tickets git@git.shukeyun.com:blockchain/smart-contracts.git
                                      git clone -b dev-tickets git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b dev-test-proxy git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b dev-stockNumber git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b dev-cancry git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  
									  
									  
									  目前合约是这四个分支：
									  git clone -b dev-no-balance git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b canary git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b test git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b prod git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b master git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  
									  git@git.shukeyun.com:research-and-development/blockchain/smart-contracts.git
									  git clone -b dev-no-balance https://git.shukeyun.com/research-and-development/blockchain/smart-contracts.git
									  git clone -b test https://git.shukeyun.com/research-and-development/blockchain/smart-contracts.git
									  git clone -b canary https://git.shukeyun.com/research-and-development/blockchain/smart-contracts.git
									  
									  
									  77e0a2b63c00c7fffcc0606ba56e8954bf6814ce
git push --set-upstream origin dev-test-proxy
"将本地的 dev-test-proxy 分支推送到远程仓库（引用名为 origin），并设置远程的 dev-test-proxy 分支为本地 dev-test-proxy 分支的上游分支。"

目前三个分支：
dev-tickets         分割了，有库存信息，出票有限制
dev-test-proxy      分割了，无库存信息，出票有限制
fix-lib             分割了，有库存信息，出票无限制
ticketBefore3525 这一版本是没有做分割的时候的合约哦

        rz
		git branch -vv -a
		ll
		git status
		su
		git status
		git pull（前提得先在141网络已经 git push 了）
跳板机的密码：An
git clone -b 分支名称 git地址 可以拉取远程的指定的分支
141中代码的编写的位置npm test的：anziyang@hqshuke:~/code/smart-contracts/fabric-contracts/ticket3525$ 
		
21、 sql-90.101
	地址：192.168.90.101:5432
	空间：blockchain
	初始库名称：postgres
	账户：blockchain_test    
	密码：blockchain_test

	
	# sql-90.141
	host: "192.168.90.141"
	port: "5432"
	name: "postgres"
	passwd: "postgres"
	
22、浏览器：http://192.168.90.141:8080/#/transactions
0xskstandarduser1
user1pw2267dd2d4f546a484

23、查询安装合约的命令
./network.sh chaincode ccQueryDetails -task installed -channel_name tourism -org_name upaypal
这是查询 sequence 的命令
./network.sh chaincode ccQueryDetails -task sequence  -channel_name tourism -org_name upaypal	

 peer chaincode list --instantiated -C channel_name 

24、查错误
首先看 /data/app/bin/log 下对应的日志      tail -f ticket.log
然后根据 docker 里面的报错信息，对比req，分析问题      docker logs -f --tail 100 peer2.yilvtong
	
25、查看控制台打印 root下
docker ps -a
docker ps -a | grep peer2
docker logs -f 选择一个容器 -n 100
docker logs -f 24f2a2c78430 -n 100
docker logs -f bed0cfb1b1a8 -n 100
docker logs -f 8d384f957c61 -n 100
docker logs -f a600a6aa7227 -n 100

supervisorctl status
supervisorctl status 命令用于列出所有由 Supervisor 管理的进程及其当前状态。通过该命令，您可以快速了解每个进程是否正在运行、停止或处于其他状态。


docker logs -f 6acbd02a02b8 -n 2000 | grep '180330463727657779420240701d48095c1567f4eb10008'
docker logs -f 6acbd02a02b8 --since '2024-07-01T04:35:01.997Z' --until '2024-07-01T05:57:01.997Z'

docker logs --since '2024-07-05T06:42:01.997Z' --until '2024-07-05T06:44:01.997Z' peer1.yilvtong

- 查询某个固定信息在那个日志文件中存在
grep -rl "10f430c2027fbe9b2ccd0835e4dac8078bdac3dc3c004596b4f73221266b4a70" *.log
10f430c2027fbe9b2ccd0835e4dac8078bdac3dc3c004596b4f73221266b4a70
grep -rl "87bb7c35-4710-487c-9ed2-b146b508c8d7" *.log

git reset --hard 23513c8553e4ef600887cd42946ad57cbabfe37d
这个命令会将当前分支的指针（HEAD）和工作目录的内容都重置到指定的提交


26、hardhat 编译合约的 abi 和 bin 文件，不用部署：
npx solc --bin --abi .\contracts\Test.sol
部署脚本：npx solc --bin --abi .\scripts\deploy.js
测试脚本：npx test
编译脚本：npx compile

Solidity是一个静态类型语言，它在编译时检查类型匹配
在 Solidity 中，不能使用 new uint256 直接初始化一个空的 uint256[] 数组。要初始化一个空的 uint256[] 数组，你应该使用 new uint256[](0)

Internal or recursive type is not allowed for public state variables. 公共状态变量不能使用递归或复杂的结构体类型

只要提交代码了，都在这里记录一下
8.1  15:14
test环境：部署了stockNumber分支的，他现在是加了订单的，且对updateStockInfo中的readNFT进行了修改的
canary环境：部署了canary的，它现在预授信、激活的错误也改了，也部署了，updateStockInfo中的readNFT也改了，也加了订单的，也加了updateStockInfo的事件的，
test-tickets基分支：预授信、激活的错误改了，订单的加了，updateStockInfo中的readNFT改了，push了，目前没有哪个环境使用这个分支的代码
注：目前这三个分支的内容应该都是一样的了，都是最新版本的代码了
只有dev-tickets是最新版本的，更新了激活时候 updateNFT 的取值，test部署的是这个版本，canary还是自己的代码
dev-tickets 为了给景区测试，关掉了出票的报错限制

现在 test 环境是 test 的最新版本的合约，是dev-no-balance的没有加文档的一版，且是变了查询方式的一版， 
dev 是 dev-no-balance 的最新版本的合约，canary 环境是 canary 的最新版本的合约
prod 环境本应该是 prod 分支的代码，但是master才是主分支，所以：
prod环境是 master 的最新版本的合约，这一版本现在与 dev-no-balance 是一模一样的版本
prod分支目前是没有和支付做解耦的情况，但是却有文档这样

test 和 dev-no-balance 都是有exchange合约的，test上的exchange合约部署到了141，dev-no-balance上的exchange合约部署到了dev环境上哦哦哦哦哦

目前 canary 与 dev-no-balance 是一模一样的版本
堡垒机里面 4-  之后的生产环境，不要碰



#查看当前分支和所属分支
git branch 
#切换分支
git checkout [分支名]
# 添加需要提交/修改的文件
git add [file_path]
# 声明提交
git commit -m "first commit"
# 推送更新到远程仓库
git push origin [分支名]
 其他分支目前我没打 tag
canary 分支的 tag	#创建标签
					git tag -a v1.0 -m "canary v1.0"
					# 远程推送
					git push origin v1.0

用于查询验证部署的索引
docker logs peer1.yilvtong  2>&1 | grep "CouchDB index"

2024-08-12 11:26:18.087 UTC 109038 INFO [couchdb] createIndex -> Created CouchDB index [token_id-index] in state database [tourism_split-tickets] using design document [_design/indexTokenId]
2024-08-13 08:34:54.218 UTC 27e628 INFO [couchdb] createIndex -> Updated CouchDB index [token_id-index] in state database [tourism_split-tickets] using design document [_design/indexTokenId]
[couchdb] createIndex -> INFO 072 Created CouchDB index [indexOwner] in state database [mychannel_ledger] using design document [_design/indexOwnerDoc]



rz  上传文件
unrar x demo-xx.rar   解压文件 

655555555555555555555555



export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="skdatacenter2"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/skdatacenter2/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/skdatacenter2/users/0xskadministrator1/msp
export CORE_PEER_ADDRESS=peer1.skdatacenter2:7005

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="skdatacenter3"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/skdatacenter3/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/skdatacenter3/users/0xskadministrator1/msp
export CORE_PEER_ADDRESS=peer1.skdatacenter3:7009






export FABRIC_CFG_PATH=/fabric-deploy/data/org/skdatacenter1/peers/peer1
export ContractName="ticket-v4"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="skdatacenter1"
export CORE_PEER_TLS_ROOTCERT_FILE=/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem
export CORE_PEER_MSPCONFIGPATH=/fabric-deploy/data/org/skdatacenter1/users/0xskadministrator1/msp
export CORE_PEER_ADDRESS=peer1.skdatacenter1:7001

peer chaincode invoke -o order1.skorder1:5001 --ordererTLSHostnameOverride order1.skorder1 --tls --cafile "/fabric-deploy/data/org/skorder1/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" \
-C chan-travel -n $ContractName \
--peerAddresses peer1.skdatacenter1:7001 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter2:7005 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter2/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter3:7009 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter3/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"constructor","Args":[]}'




Error: chaincode install failed with status: 500 - failed to invoke backing implementation of 'InstallChaincode': chaincode already successfully installed (package ID 'ticket-v5_1.0:54896f818fbf77c57d1a11e4c8fe80f225b0419225b32a8c8249f3f42f2b61fe')
Chaincode installation on peer1.skdatacenter1 has failed




./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket-v5 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript -ccv 1.0


./network.sh chaincode ccDeploy -deploy_mode multi -channel_name chan-travel -org_name skdatacenter1 -ccn ticket-v5 -ccp /home/anziyang/code/smart-contracts/fabric-contracts/ticket3525/ -ccl javascript -ccv 2.0 -ccs 2


#查看是不是都批准了：
peer lifecycle chaincode checkcommitreadiness --channelID chan-travel --name ticket-v4 --version 2.0 --sequence 2 --tls --cafile "/fabric-deploy/data/org/skorder1/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" --output json


peer lifecycle chaincode commit -o order1.skorder1:5001 --ordererTLSHostnameOverride order1.skorder1 --channelID chan-travel --name ticket-v4 --version 2.0 --sequence 2 --tls --cafile "/fabric-deploy/data/org/skorder1/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" --peerAddresses peer1.skdatacenter1:7001 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \ --peerAddresses peer1.skdatacenter2:7005 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter2/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \ --peerAddresses peer1.skdatacenter3:7009 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter3/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem"


peer chaincode invoke -o order1.skorder1:5001 --ordererTLSHostnameOverride order1.skorder1 --tls --cafile "/fabric-deploy/data/org/skorder1/orders/order1/tls-msp/tlscacerts/tls-cacerts.pem" -C chan-travel -n ticket-v4 --peerAddresses peer1.skdatacenter1:7001 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter1/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter2:7005 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter2/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
--peerAddresses peer1.skdatacenter3:7009 --tlsRootCertFiles "/fabric-deploy/data/org/skdatacenter3/peers/peer1/tls-msp/tlscacerts/tls-cacerts.pem" \
-c '{"function":"Initialize","Args":["hqsk", "HQSK"]}'
