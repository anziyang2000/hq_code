// source: consensus/tbft/tbft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_block_pb = require('../../common/block_pb.js');
goog.object.extend(proto, common_block_pb);
var common_request_pb = require('../../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
var common_rwset_pb = require('../../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
goog.exportSymbol('proto.tbft.BlockVotes', null, global);
goog.exportSymbol('proto.tbft.ConsensusState', null, global);
goog.exportSymbol('proto.tbft.FetchRoundQC', null, global);
goog.exportSymbol('proto.tbft.GossipState', null, global);
goog.exportSymbol('proto.tbft.HeightRoundVoteSet', null, global);
goog.exportSymbol('proto.tbft.Proposal', null, global);
goog.exportSymbol('proto.tbft.RoundQC', null, global);
goog.exportSymbol('proto.tbft.RoundVoteSet', null, global);
goog.exportSymbol('proto.tbft.Step', null, global);
goog.exportSymbol('proto.tbft.TBFTMsg', null, global);
goog.exportSymbol('proto.tbft.TBFTMsgType', null, global);
goog.exportSymbol('proto.tbft.TimeoutInfo', null, global);
goog.exportSymbol('proto.tbft.ValidatorSet', null, global);
goog.exportSymbol('proto.tbft.Vote', null, global);
goog.exportSymbol('proto.tbft.VoteSet', null, global);
goog.exportSymbol('proto.tbft.VoteType', null, global);
goog.exportSymbol('proto.tbft.WalEntry', null, global);
goog.exportSymbol('proto.tbft.WalEntryType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.ValidatorSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tbft.ValidatorSet.repeatedFields_, null);
};
goog.inherits(proto.tbft.ValidatorSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.ValidatorSet.displayName = 'proto.tbft.ValidatorSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.TBFTMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.TBFTMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.TBFTMsg.displayName = 'proto.tbft.TBFTMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tbft.Proposal.repeatedFields_, null);
};
goog.inherits(proto.tbft.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.Proposal.displayName = 'proto.tbft.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tbft.Vote.repeatedFields_, null);
};
goog.inherits(proto.tbft.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.Vote.displayName = 'proto.tbft.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.BlockVotes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.BlockVotes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.BlockVotes.displayName = 'proto.tbft.BlockVotes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.VoteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.VoteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.VoteSet.displayName = 'proto.tbft.VoteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.RoundVoteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.RoundVoteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.RoundVoteSet.displayName = 'proto.tbft.RoundVoteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.HeightRoundVoteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.HeightRoundVoteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.HeightRoundVoteSet.displayName = 'proto.tbft.HeightRoundVoteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.ConsensusState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.ConsensusState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.ConsensusState.displayName = 'proto.tbft.ConsensusState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.FetchRoundQC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.FetchRoundQC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.FetchRoundQC.displayName = 'proto.tbft.FetchRoundQC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.RoundQC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.RoundQC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.RoundQC.displayName = 'proto.tbft.RoundQC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.GossipState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.GossipState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.GossipState.displayName = 'proto.tbft.GossipState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.TimeoutInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.TimeoutInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.TimeoutInfo.displayName = 'proto.tbft.TimeoutInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tbft.WalEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tbft.WalEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tbft.WalEntry.displayName = 'proto.tbft.WalEntry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tbft.ValidatorSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.ValidatorSet.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.ValidatorSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.ValidatorSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.ValidatorSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.ValidatorSet}
 */
proto.tbft.ValidatorSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.ValidatorSet;
  return proto.tbft.ValidatorSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.ValidatorSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.ValidatorSet}
 */
proto.tbft.ValidatorSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.ValidatorSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.ValidatorSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.ValidatorSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.ValidatorSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string validators = 1;
 * @return {!Array<string>}
 */
proto.tbft.ValidatorSet.prototype.getValidatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tbft.ValidatorSet} returns this
 */
proto.tbft.ValidatorSet.prototype.setValidatorsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tbft.ValidatorSet} returns this
 */
proto.tbft.ValidatorSet.prototype.addValidators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tbft.ValidatorSet} returns this
 */
proto.tbft.ValidatorSet.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.TBFTMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.TBFTMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.TBFTMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.TBFTMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.TBFTMsg}
 */
proto.tbft.TBFTMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.TBFTMsg;
  return proto.tbft.TBFTMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.TBFTMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.TBFTMsg}
 */
proto.tbft.TBFTMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tbft.TBFTMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.TBFTMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.TBFTMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.TBFTMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.TBFTMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional TBFTMsgType type = 1;
 * @return {!proto.tbft.TBFTMsgType}
 */
proto.tbft.TBFTMsg.prototype.getType = function() {
  return /** @type {!proto.tbft.TBFTMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tbft.TBFTMsgType} value
 * @return {!proto.tbft.TBFTMsg} returns this
 */
proto.tbft.TBFTMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.TBFTMsg.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes msg = 2;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.tbft.TBFTMsg.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.tbft.TBFTMsg.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.TBFTMsg} returns this
 */
proto.tbft.TBFTMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tbft.Proposal.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    voter: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    polRound: jspb.Message.getFieldWithDefault(msg, 4, 0),
    block: (f = msg.getBlock()) && common_block_pb.Block.toObject(includeInstance, f),
    endorsement: (f = msg.getEndorsement()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f),
    txsRwSetMap: (f = msg.getTxsRwSetMap()) ? f.toObject(includeInstance, proto.common.TxRWSet.toObject) : [],
    qcList: jspb.Message.toObjectList(msg.getQcList(),
    proto.tbft.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.Proposal}
 */
proto.tbft.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.Proposal;
  return proto.tbft.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.Proposal}
 */
proto.tbft.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPolRound(value);
      break;
    case 5:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 6:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setEndorsement(value);
      break;
    case 7:
      var value = msg.getTxsRwSetMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.TxRWSet.deserializeBinaryFromReader, "", new proto.common.TxRWSet());
         });
      break;
    case 8:
      var value = new proto.tbft.Vote;
      reader.readMessage(value,proto.tbft.Vote.deserializeBinaryFromReader);
      msg.addQc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPolRound();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getEndorsement();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
  f = message.getTxsRwSetMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.TxRWSet.serializeBinaryToWriter);
  }
  f = message.getQcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.tbft.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional string voter = 1;
 * @return {string}
 */
proto.tbft.Proposal.prototype.getVoter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.setVoter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.Proposal.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.Proposal.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 pol_round = 4;
 * @return {number}
 */
proto.tbft.Proposal.prototype.getPolRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.setPolRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional common.Block block = 5;
 * @return {?proto.common.Block}
 */
proto.tbft.Proposal.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 5));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.tbft.Proposal} returns this
*/
proto.tbft.Proposal.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.Proposal.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional common.EndorsementEntry endorsement = 6;
 * @return {?proto.common.EndorsementEntry}
 */
proto.tbft.Proposal.prototype.getEndorsement = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 6));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.tbft.Proposal} returns this
*/
proto.tbft.Proposal.prototype.setEndorsement = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.clearEndorsement = function() {
  return this.setEndorsement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.Proposal.prototype.hasEndorsement = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, common.TxRWSet> txs_rw_set = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.TxRWSet>}
 */
proto.tbft.Proposal.prototype.getTxsRwSetMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.TxRWSet>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.common.TxRWSet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.clearTxsRwSetMap = function() {
  this.getTxsRwSetMap().clear();
  return this;};


/**
 * repeated Vote qc = 8;
 * @return {!Array<!proto.tbft.Vote>}
 */
proto.tbft.Proposal.prototype.getQcList = function() {
  return /** @type{!Array<!proto.tbft.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tbft.Vote, 8));
};


/**
 * @param {!Array<!proto.tbft.Vote>} value
 * @return {!proto.tbft.Proposal} returns this
*/
proto.tbft.Proposal.prototype.setQcList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.tbft.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tbft.Vote}
 */
proto.tbft.Proposal.prototype.addQc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tbft.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tbft.Proposal} returns this
 */
proto.tbft.Proposal.prototype.clearQcList = function() {
  return this.setQcList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tbft.Vote.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    voter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    round: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hash: msg.getHash_asB64(),
    endorsement: (f = msg.getEndorsement()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f),
    invalidtxsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.Vote}
 */
proto.tbft.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.Vote;
  return proto.tbft.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.Vote}
 */
proto.tbft.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tbft.VoteType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 6:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setEndorsement(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvalidtxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVoter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getEndorsement();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
  f = message.getInvalidtxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional VoteType type = 1;
 * @return {!proto.tbft.VoteType}
 */
proto.tbft.Vote.prototype.getType = function() {
  return /** @type {!proto.tbft.VoteType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tbft.VoteType} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string voter = 2;
 * @return {string}
 */
proto.tbft.Vote.prototype.getVoter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setVoter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 height = 3;
 * @return {number}
 */
proto.tbft.Vote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 round = 4;
 * @return {number}
 */
proto.tbft.Vote.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.Vote.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes hash = 5;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.tbft.Vote.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.tbft.Vote.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional common.EndorsementEntry endorsement = 6;
 * @return {?proto.common.EndorsementEntry}
 */
proto.tbft.Vote.prototype.getEndorsement = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 6));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.tbft.Vote} returns this
*/
proto.tbft.Vote.prototype.setEndorsement = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.clearEndorsement = function() {
  return this.setEndorsement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.Vote.prototype.hasEndorsement = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string invalidTxs = 7;
 * @return {!Array<string>}
 */
proto.tbft.Vote.prototype.getInvalidtxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.setInvalidtxsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.addInvalidtxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tbft.Vote} returns this
 */
proto.tbft.Vote.prototype.clearInvalidtxsList = function() {
  return this.setInvalidtxsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.BlockVotes.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.BlockVotes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.BlockVotes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.BlockVotes.toObject = function(includeInstance, msg) {
  var f, obj = {
    votesMap: (f = msg.getVotesMap()) ? f.toObject(includeInstance, proto.tbft.Vote.toObject) : [],
    sum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.BlockVotes}
 */
proto.tbft.BlockVotes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.BlockVotes;
  return proto.tbft.BlockVotes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.BlockVotes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.BlockVotes}
 */
proto.tbft.BlockVotes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVotesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tbft.Vote.deserializeBinaryFromReader, "", new proto.tbft.Vote());
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.BlockVotes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.BlockVotes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.BlockVotes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.BlockVotes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tbft.Vote.serializeBinaryToWriter);
  }
  f = message.getSum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * map<string, Vote> votes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tbft.Vote>}
 */
proto.tbft.BlockVotes.prototype.getVotesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tbft.Vote>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tbft.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tbft.BlockVotes} returns this
 */
proto.tbft.BlockVotes.prototype.clearVotesMap = function() {
  this.getVotesMap().clear();
  return this;};


/**
 * optional uint64 sum = 2;
 * @return {number}
 */
proto.tbft.BlockVotes.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.BlockVotes} returns this
 */
proto.tbft.BlockVotes.prototype.setSum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.VoteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.VoteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.VoteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.VoteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maj23: msg.getMaj23_asB64(),
    votesMap: (f = msg.getVotesMap()) ? f.toObject(includeInstance, proto.tbft.Vote.toObject) : [],
    votesByBlockMap: (f = msg.getVotesByBlockMap()) ? f.toObject(includeInstance, proto.tbft.BlockVotes.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.VoteSet}
 */
proto.tbft.VoteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.VoteSet;
  return proto.tbft.VoteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.VoteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.VoteSet}
 */
proto.tbft.VoteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tbft.VoteType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSum(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMaj23(value);
      break;
    case 6:
      var value = msg.getVotesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tbft.Vote.deserializeBinaryFromReader, "", new proto.tbft.Vote());
         });
      break;
    case 7:
      var value = msg.getVotesByBlockMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tbft.BlockVotes.deserializeBinaryFromReader, "", new proto.tbft.BlockVotes());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.VoteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.VoteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.VoteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.VoteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSum();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMaj23_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVotesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tbft.Vote.serializeBinaryToWriter);
  }
  f = message.getVotesByBlockMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tbft.BlockVotes.serializeBinaryToWriter);
  }
};


/**
 * optional VoteType type = 1;
 * @return {!proto.tbft.VoteType}
 */
proto.tbft.VoteSet.prototype.getType = function() {
  return /** @type {!proto.tbft.VoteType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tbft.VoteType} value
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.VoteSet.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.VoteSet.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 sum = 4;
 * @return {number}
 */
proto.tbft.VoteSet.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.setSum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes maj23 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.VoteSet.prototype.getMaj23 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes maj23 = 5;
 * This is a type-conversion wrapper around `getMaj23()`
 * @return {string}
 */
proto.tbft.VoteSet.prototype.getMaj23_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMaj23()));
};


/**
 * optional bytes maj23 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMaj23()`
 * @return {!Uint8Array}
 */
proto.tbft.VoteSet.prototype.getMaj23_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMaj23()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.setMaj23 = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * map<string, Vote> votes = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tbft.Vote>}
 */
proto.tbft.VoteSet.prototype.getVotesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tbft.Vote>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.tbft.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.clearVotesMap = function() {
  this.getVotesMap().clear();
  return this;};


/**
 * map<string, BlockVotes> votes_by_block = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tbft.BlockVotes>}
 */
proto.tbft.VoteSet.prototype.getVotesByBlockMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tbft.BlockVotes>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.tbft.BlockVotes));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tbft.VoteSet} returns this
 */
proto.tbft.VoteSet.prototype.clearVotesByBlockMap = function() {
  this.getVotesByBlockMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.RoundVoteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.RoundVoteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.RoundVoteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.RoundVoteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    prevotes: (f = msg.getPrevotes()) && proto.tbft.VoteSet.toObject(includeInstance, f),
    precommits: (f = msg.getPrecommits()) && proto.tbft.VoteSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.RoundVoteSet}
 */
proto.tbft.RoundVoteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.RoundVoteSet;
  return proto.tbft.RoundVoteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.RoundVoteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.RoundVoteSet}
 */
proto.tbft.RoundVoteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = new proto.tbft.VoteSet;
      reader.readMessage(value,proto.tbft.VoteSet.deserializeBinaryFromReader);
      msg.setPrevotes(value);
      break;
    case 4:
      var value = new proto.tbft.VoteSet;
      reader.readMessage(value,proto.tbft.VoteSet.deserializeBinaryFromReader);
      msg.setPrecommits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.RoundVoteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.RoundVoteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.RoundVoteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.RoundVoteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPrevotes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tbft.VoteSet.serializeBinaryToWriter
    );
  }
  f = message.getPrecommits();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tbft.VoteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.tbft.RoundVoteSet.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.RoundVoteSet} returns this
 */
proto.tbft.RoundVoteSet.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.tbft.RoundVoteSet.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.RoundVoteSet} returns this
 */
proto.tbft.RoundVoteSet.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional VoteSet prevotes = 3;
 * @return {?proto.tbft.VoteSet}
 */
proto.tbft.RoundVoteSet.prototype.getPrevotes = function() {
  return /** @type{?proto.tbft.VoteSet} */ (
    jspb.Message.getWrapperField(this, proto.tbft.VoteSet, 3));
};


/**
 * @param {?proto.tbft.VoteSet|undefined} value
 * @return {!proto.tbft.RoundVoteSet} returns this
*/
proto.tbft.RoundVoteSet.prototype.setPrevotes = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.RoundVoteSet} returns this
 */
proto.tbft.RoundVoteSet.prototype.clearPrevotes = function() {
  return this.setPrevotes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.RoundVoteSet.prototype.hasPrevotes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VoteSet precommits = 4;
 * @return {?proto.tbft.VoteSet}
 */
proto.tbft.RoundVoteSet.prototype.getPrecommits = function() {
  return /** @type{?proto.tbft.VoteSet} */ (
    jspb.Message.getWrapperField(this, proto.tbft.VoteSet, 4));
};


/**
 * @param {?proto.tbft.VoteSet|undefined} value
 * @return {!proto.tbft.RoundVoteSet} returns this
*/
proto.tbft.RoundVoteSet.prototype.setPrecommits = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.RoundVoteSet} returns this
 */
proto.tbft.RoundVoteSet.prototype.clearPrecommits = function() {
  return this.setPrecommits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.RoundVoteSet.prototype.hasPrecommits = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.HeightRoundVoteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.HeightRoundVoteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.HeightRoundVoteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.HeightRoundVoteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roundVoteSetsMap: (f = msg.getRoundVoteSetsMap()) ? f.toObject(includeInstance, proto.tbft.RoundVoteSet.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.HeightRoundVoteSet}
 */
proto.tbft.HeightRoundVoteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.HeightRoundVoteSet;
  return proto.tbft.HeightRoundVoteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.HeightRoundVoteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.HeightRoundVoteSet}
 */
proto.tbft.HeightRoundVoteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = msg.getRoundVoteSetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.tbft.RoundVoteSet.deserializeBinaryFromReader, 0, new proto.tbft.RoundVoteSet());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.HeightRoundVoteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.HeightRoundVoteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.HeightRoundVoteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.HeightRoundVoteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoundVoteSetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.tbft.RoundVoteSet.serializeBinaryToWriter);
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.tbft.HeightRoundVoteSet.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.HeightRoundVoteSet} returns this
 */
proto.tbft.HeightRoundVoteSet.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.tbft.HeightRoundVoteSet.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.HeightRoundVoteSet} returns this
 */
proto.tbft.HeightRoundVoteSet.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<int32, RoundVoteSet> round_vote_sets = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tbft.RoundVoteSet>}
 */
proto.tbft.HeightRoundVoteSet.prototype.getRoundVoteSetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tbft.RoundVoteSet>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.tbft.RoundVoteSet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tbft.HeightRoundVoteSet} returns this
 */
proto.tbft.HeightRoundVoteSet.prototype.clearRoundVoteSetsMap = function() {
  this.getRoundVoteSetsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.ConsensusState.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.ConsensusState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.ConsensusState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.ConsensusState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    step: jspb.Message.getFieldWithDefault(msg, 4, 0),
    proposal: (f = msg.getProposal()) && proto.tbft.Proposal.toObject(includeInstance, f),
    verifingProposal: (f = msg.getVerifingProposal()) && proto.tbft.Proposal.toObject(includeInstance, f),
    lockedProposal: (f = msg.getLockedProposal()) && proto.tbft.Proposal.toObject(includeInstance, f),
    validProposal: (f = msg.getValidProposal()) && proto.tbft.Proposal.toObject(includeInstance, f),
    heightRoundVoteSet: (f = msg.getHeightRoundVoteSet()) && proto.tbft.HeightRoundVoteSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.ConsensusState}
 */
proto.tbft.ConsensusState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.ConsensusState;
  return proto.tbft.ConsensusState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.ConsensusState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.ConsensusState}
 */
proto.tbft.ConsensusState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {!proto.tbft.Step} */ (reader.readEnum());
      msg.setStep(value);
      break;
    case 5:
      var value = new proto.tbft.Proposal;
      reader.readMessage(value,proto.tbft.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 6:
      var value = new proto.tbft.Proposal;
      reader.readMessage(value,proto.tbft.Proposal.deserializeBinaryFromReader);
      msg.setVerifingProposal(value);
      break;
    case 7:
      var value = new proto.tbft.Proposal;
      reader.readMessage(value,proto.tbft.Proposal.deserializeBinaryFromReader);
      msg.setLockedProposal(value);
      break;
    case 8:
      var value = new proto.tbft.Proposal;
      reader.readMessage(value,proto.tbft.Proposal.deserializeBinaryFromReader);
      msg.setValidProposal(value);
      break;
    case 9:
      var value = new proto.tbft.HeightRoundVoteSet;
      reader.readMessage(value,proto.tbft.HeightRoundVoteSet.deserializeBinaryFromReader);
      msg.setHeightRoundVoteSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.ConsensusState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.ConsensusState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.ConsensusState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.ConsensusState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStep();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tbft.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getVerifingProposal();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tbft.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getLockedProposal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tbft.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getValidProposal();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tbft.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getHeightRoundVoteSet();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.tbft.HeightRoundVoteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tbft.ConsensusState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.ConsensusState.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.ConsensusState.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Step step = 4;
 * @return {!proto.tbft.Step}
 */
proto.tbft.ConsensusState.prototype.getStep = function() {
  return /** @type {!proto.tbft.Step} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tbft.Step} value
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.setStep = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Proposal proposal = 5;
 * @return {?proto.tbft.Proposal}
 */
proto.tbft.ConsensusState.prototype.getProposal = function() {
  return /** @type{?proto.tbft.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.tbft.Proposal, 5));
};


/**
 * @param {?proto.tbft.Proposal|undefined} value
 * @return {!proto.tbft.ConsensusState} returns this
*/
proto.tbft.ConsensusState.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.ConsensusState.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Proposal verifing_proposal = 6;
 * @return {?proto.tbft.Proposal}
 */
proto.tbft.ConsensusState.prototype.getVerifingProposal = function() {
  return /** @type{?proto.tbft.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.tbft.Proposal, 6));
};


/**
 * @param {?proto.tbft.Proposal|undefined} value
 * @return {!proto.tbft.ConsensusState} returns this
*/
proto.tbft.ConsensusState.prototype.setVerifingProposal = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.clearVerifingProposal = function() {
  return this.setVerifingProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.ConsensusState.prototype.hasVerifingProposal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Proposal locked_proposal = 7;
 * @return {?proto.tbft.Proposal}
 */
proto.tbft.ConsensusState.prototype.getLockedProposal = function() {
  return /** @type{?proto.tbft.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.tbft.Proposal, 7));
};


/**
 * @param {?proto.tbft.Proposal|undefined} value
 * @return {!proto.tbft.ConsensusState} returns this
*/
proto.tbft.ConsensusState.prototype.setLockedProposal = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.clearLockedProposal = function() {
  return this.setLockedProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.ConsensusState.prototype.hasLockedProposal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Proposal valid_proposal = 8;
 * @return {?proto.tbft.Proposal}
 */
proto.tbft.ConsensusState.prototype.getValidProposal = function() {
  return /** @type{?proto.tbft.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.tbft.Proposal, 8));
};


/**
 * @param {?proto.tbft.Proposal|undefined} value
 * @return {!proto.tbft.ConsensusState} returns this
*/
proto.tbft.ConsensusState.prototype.setValidProposal = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.clearValidProposal = function() {
  return this.setValidProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.ConsensusState.prototype.hasValidProposal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional HeightRoundVoteSet height_round_vote_set = 9;
 * @return {?proto.tbft.HeightRoundVoteSet}
 */
proto.tbft.ConsensusState.prototype.getHeightRoundVoteSet = function() {
  return /** @type{?proto.tbft.HeightRoundVoteSet} */ (
    jspb.Message.getWrapperField(this, proto.tbft.HeightRoundVoteSet, 9));
};


/**
 * @param {?proto.tbft.HeightRoundVoteSet|undefined} value
 * @return {!proto.tbft.ConsensusState} returns this
*/
proto.tbft.ConsensusState.prototype.setHeightRoundVoteSet = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.ConsensusState} returns this
 */
proto.tbft.ConsensusState.prototype.clearHeightRoundVoteSet = function() {
  return this.setHeightRoundVoteSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.ConsensusState.prototype.hasHeightRoundVoteSet = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.FetchRoundQC.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.FetchRoundQC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.FetchRoundQC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.FetchRoundQC.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.FetchRoundQC}
 */
proto.tbft.FetchRoundQC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.FetchRoundQC;
  return proto.tbft.FetchRoundQC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.FetchRoundQC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.FetchRoundQC}
 */
proto.tbft.FetchRoundQC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.FetchRoundQC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.FetchRoundQC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.FetchRoundQC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.FetchRoundQC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tbft.FetchRoundQC.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.FetchRoundQC} returns this
 */
proto.tbft.FetchRoundQC.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.FetchRoundQC.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.FetchRoundQC} returns this
 */
proto.tbft.FetchRoundQC.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.FetchRoundQC.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.FetchRoundQC} returns this
 */
proto.tbft.FetchRoundQC.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.RoundQC.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.RoundQC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.RoundQC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.RoundQC.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    qc: (f = msg.getQc()) && proto.tbft.VoteSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.RoundQC}
 */
proto.tbft.RoundQC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.RoundQC;
  return proto.tbft.RoundQC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.RoundQC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.RoundQC}
 */
proto.tbft.RoundQC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = new proto.tbft.VoteSet;
      reader.readMessage(value,proto.tbft.VoteSet.deserializeBinaryFromReader);
      msg.setQc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.RoundQC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.RoundQC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.RoundQC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.RoundQC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getQc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tbft.VoteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tbft.RoundQC.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.RoundQC} returns this
 */
proto.tbft.RoundQC.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.RoundQC.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.RoundQC} returns this
 */
proto.tbft.RoundQC.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.RoundQC.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.RoundQC} returns this
 */
proto.tbft.RoundQC.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional VoteSet qc = 4;
 * @return {?proto.tbft.VoteSet}
 */
proto.tbft.RoundQC.prototype.getQc = function() {
  return /** @type{?proto.tbft.VoteSet} */ (
    jspb.Message.getWrapperField(this, proto.tbft.VoteSet, 4));
};


/**
 * @param {?proto.tbft.VoteSet|undefined} value
 * @return {!proto.tbft.RoundQC} returns this
*/
proto.tbft.RoundQC.prototype.setQc = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.RoundQC} returns this
 */
proto.tbft.RoundQC.prototype.clearQc = function() {
  return this.setQc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.RoundQC.prototype.hasQc = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.GossipState.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.GossipState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.GossipState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.GossipState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    step: jspb.Message.getFieldWithDefault(msg, 4, 0),
    proposal: msg.getProposal_asB64(),
    verifingProposal: msg.getVerifingProposal_asB64(),
    roundVoteSet: (f = msg.getRoundVoteSet()) && proto.tbft.RoundVoteSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.GossipState}
 */
proto.tbft.GossipState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.GossipState;
  return proto.tbft.GossipState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.GossipState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.GossipState}
 */
proto.tbft.GossipState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {!proto.tbft.Step} */ (reader.readEnum());
      msg.setStep(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposal(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVerifingProposal(value);
      break;
    case 7:
      var value = new proto.tbft.RoundVoteSet;
      reader.readMessage(value,proto.tbft.RoundVoteSet.deserializeBinaryFromReader);
      msg.setRoundVoteSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.GossipState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.GossipState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.GossipState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.GossipState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStep();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getProposal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVerifingProposal_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRoundVoteSet();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tbft.RoundVoteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tbft.GossipState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.GossipState.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.GossipState.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Step step = 4;
 * @return {!proto.tbft.Step}
 */
proto.tbft.GossipState.prototype.getStep = function() {
  return /** @type {!proto.tbft.Step} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tbft.Step} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setStep = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes proposal = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.GossipState.prototype.getProposal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proposal = 5;
 * This is a type-conversion wrapper around `getProposal()`
 * @return {string}
 */
proto.tbft.GossipState.prototype.getProposal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposal()));
};


/**
 * optional bytes proposal = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposal()`
 * @return {!Uint8Array}
 */
proto.tbft.GossipState.prototype.getProposal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setProposal = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes verifing_proposal = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.GossipState.prototype.getVerifingProposal = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes verifing_proposal = 6;
 * This is a type-conversion wrapper around `getVerifingProposal()`
 * @return {string}
 */
proto.tbft.GossipState.prototype.getVerifingProposal_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVerifingProposal()));
};


/**
 * optional bytes verifing_proposal = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVerifingProposal()`
 * @return {!Uint8Array}
 */
proto.tbft.GossipState.prototype.getVerifingProposal_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVerifingProposal()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.setVerifingProposal = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional RoundVoteSet round_vote_set = 7;
 * @return {?proto.tbft.RoundVoteSet}
 */
proto.tbft.GossipState.prototype.getRoundVoteSet = function() {
  return /** @type{?proto.tbft.RoundVoteSet} */ (
    jspb.Message.getWrapperField(this, proto.tbft.RoundVoteSet, 7));
};


/**
 * @param {?proto.tbft.RoundVoteSet|undefined} value
 * @return {!proto.tbft.GossipState} returns this
*/
proto.tbft.GossipState.prototype.setRoundVoteSet = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tbft.GossipState} returns this
 */
proto.tbft.GossipState.prototype.clearRoundVoteSet = function() {
  return this.setRoundVoteSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tbft.GossipState.prototype.hasRoundVoteSet = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.TimeoutInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.TimeoutInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.TimeoutInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.TimeoutInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    step: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.TimeoutInfo}
 */
proto.tbft.TimeoutInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.TimeoutInfo;
  return proto.tbft.TimeoutInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.TimeoutInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.TimeoutInfo}
 */
proto.tbft.TimeoutInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {!proto.tbft.Step} */ (reader.readEnum());
      msg.setStep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.TimeoutInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.TimeoutInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.TimeoutInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.TimeoutInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStep();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional int64 duration = 1;
 * @return {number}
 */
proto.tbft.TimeoutInfo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.TimeoutInfo} returns this
 */
proto.tbft.TimeoutInfo.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.tbft.TimeoutInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.TimeoutInfo} returns this
 */
proto.tbft.TimeoutInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tbft.TimeoutInfo.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.TimeoutInfo} returns this
 */
proto.tbft.TimeoutInfo.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Step step = 4;
 * @return {!proto.tbft.Step}
 */
proto.tbft.TimeoutInfo.prototype.getStep = function() {
  return /** @type {!proto.tbft.Step} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tbft.Step} value
 * @return {!proto.tbft.TimeoutInfo} returns this
 */
proto.tbft.TimeoutInfo.prototype.setStep = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tbft.WalEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.tbft.WalEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tbft.WalEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.WalEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tbft.WalEntry}
 */
proto.tbft.WalEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tbft.WalEntry;
  return proto.tbft.WalEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tbft.WalEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tbft.WalEntry}
 */
proto.tbft.WalEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!proto.tbft.WalEntryType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tbft.WalEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tbft.WalEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tbft.WalEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tbft.WalEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.tbft.WalEntry.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tbft.WalEntry} returns this
 */
proto.tbft.WalEntry.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WalEntryType type = 2;
 * @return {!proto.tbft.WalEntryType}
 */
proto.tbft.WalEntry.prototype.getType = function() {
  return /** @type {!proto.tbft.WalEntryType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tbft.WalEntryType} value
 * @return {!proto.tbft.WalEntry} returns this
 */
proto.tbft.WalEntry.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tbft.WalEntry.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tbft.WalEntry.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tbft.WalEntry.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tbft.WalEntry} returns this
 */
proto.tbft.WalEntry.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.tbft.TBFTMsgType = {
  MSG_PROPOSE: 0,
  MSG_PREVOTE: 1,
  MSG_PRECOMMIT: 2,
  MSG_STATE: 3,
  MSG_FETCH_ROUNDQC: 4,
  MSG_SEND_ROUND_QC: 5
};

/**
 * @enum {number}
 */
proto.tbft.VoteType = {
  VOTE_PREVOTE: 0,
  VOTE_PRECOMMIT: 1
};

/**
 * @enum {number}
 */
proto.tbft.Step = {
  NEW_HEIGHT: 0,
  NEW_ROUND: 1,
  PROPOSE: 2,
  PREVOTE: 3,
  PREVOTE_WAIT: 4,
  PRECOMMIT: 5,
  PRECOMMIT_WAIT: 6,
  COMMIT: 7
};

/**
 * @enum {number}
 */
proto.tbft.WalEntryType = {
  TIMEOUT_ENTRY: 0,
  PROPOSAL_ENTRY: 1,
  VOTE_ENTRY: 2,
  PROPOSAL_VOTE_ENTRY: 3
};

goog.object.extend(exports, proto.tbft);
