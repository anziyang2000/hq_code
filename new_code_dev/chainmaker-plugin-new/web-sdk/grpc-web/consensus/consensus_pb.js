// source: consensus/consensus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_block_pb = require('../common/block_pb.js');
goog.object.extend(proto, common_block_pb);
var common_rwset_pb = require('../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
goog.exportSymbol('proto.consensus.BlockHeaderConsensusArgs', null, global);
goog.exportSymbol('proto.consensus.ConsensusType', null, global);
goog.exportSymbol('proto.consensus.GovernanceContract', null, global);
goog.exportSymbol('proto.consensus.GovernanceMember', null, global);
goog.exportSymbol('proto.consensus.ProposalBlock', null, global);
goog.exportSymbol('proto.consensus.RwSetVerifyFailTxs', null, global);
goog.exportSymbol('proto.consensus.VerifyResult', null, global);
goog.exportSymbol('proto.consensus.VerifyResult.Code', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.VerifyResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.VerifyResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.VerifyResult.displayName = 'proto.consensus.VerifyResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.RwSetVerifyFailTxs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.consensus.RwSetVerifyFailTxs.repeatedFields_, null);
};
goog.inherits(proto.consensus.RwSetVerifyFailTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.RwSetVerifyFailTxs.displayName = 'proto.consensus.RwSetVerifyFailTxs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.ProposalBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.ProposalBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.ProposalBlock.displayName = 'proto.consensus.ProposalBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.BlockHeaderConsensusArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.BlockHeaderConsensusArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.BlockHeaderConsensusArgs.displayName = 'proto.consensus.BlockHeaderConsensusArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.GovernanceMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.GovernanceMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.GovernanceMember.displayName = 'proto.consensus.GovernanceMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.GovernanceContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.consensus.GovernanceContract.repeatedFields_, null);
};
goog.inherits(proto.consensus.GovernanceContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.consensus.GovernanceContract.displayName = 'proto.consensus.GovernanceContract';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.VerifyResult.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.VerifyResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.VerifyResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VerifyResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    verifiedBlock: (f = msg.getVerifiedBlock()) && common_block_pb.Block.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txsRwSetMap: (f = msg.getTxsRwSetMap()) ? f.toObject(includeInstance, proto.common.TxRWSet.toObject) : [],
    rwSetVerifyFailTxs: (f = msg.getRwSetVerifyFailTxs()) && proto.consensus.RwSetVerifyFailTxs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.VerifyResult}
 */
proto.consensus.VerifyResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.VerifyResult;
  return proto.consensus.VerifyResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.VerifyResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.VerifyResult}
 */
proto.consensus.VerifyResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setVerifiedBlock(value);
      break;
    case 2:
      var value = /** @type {!proto.consensus.VerifyResult.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 4:
      var value = msg.getTxsRwSetMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.TxRWSet.deserializeBinaryFromReader, "", new proto.common.TxRWSet());
         });
      break;
    case 5:
      var value = new proto.consensus.RwSetVerifyFailTxs;
      reader.readMessage(value,proto.consensus.RwSetVerifyFailTxs.deserializeBinaryFromReader);
      msg.setRwSetVerifyFailTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.VerifyResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.VerifyResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.VerifyResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VerifyResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerifiedBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxsRwSetMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.TxRWSet.serializeBinaryToWriter);
  }
  f = message.getRwSetVerifyFailTxs();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.consensus.RwSetVerifyFailTxs.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.consensus.VerifyResult.Code = {
  SUCCESS: 0,
  FAIL: 1
};

/**
 * optional common.Block verified_block = 1;
 * @return {?proto.common.Block}
 */
proto.consensus.VerifyResult.prototype.getVerifiedBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.consensus.VerifyResult} returns this
*/
proto.consensus.VerifyResult.prototype.setVerifiedBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.clearVerifiedBlock = function() {
  return this.setVerifiedBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.VerifyResult.prototype.hasVerifiedBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Code code = 2;
 * @return {!proto.consensus.VerifyResult.Code}
 */
proto.consensus.VerifyResult.prototype.getCode = function() {
  return /** @type {!proto.consensus.VerifyResult.Code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.consensus.VerifyResult.Code} value
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.consensus.VerifyResult.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, common.TxRWSet> txs_rw_set = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.TxRWSet>}
 */
proto.consensus.VerifyResult.prototype.getTxsRwSetMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.TxRWSet>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.common.TxRWSet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.clearTxsRwSetMap = function() {
  this.getTxsRwSetMap().clear();
  return this;};


/**
 * optional RwSetVerifyFailTxs rw_set_verify_fail_txs = 5;
 * @return {?proto.consensus.RwSetVerifyFailTxs}
 */
proto.consensus.VerifyResult.prototype.getRwSetVerifyFailTxs = function() {
  return /** @type{?proto.consensus.RwSetVerifyFailTxs} */ (
    jspb.Message.getWrapperField(this, proto.consensus.RwSetVerifyFailTxs, 5));
};


/**
 * @param {?proto.consensus.RwSetVerifyFailTxs|undefined} value
 * @return {!proto.consensus.VerifyResult} returns this
*/
proto.consensus.VerifyResult.prototype.setRwSetVerifyFailTxs = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.VerifyResult} returns this
 */
proto.consensus.VerifyResult.prototype.clearRwSetVerifyFailTxs = function() {
  return this.setRwSetVerifyFailTxs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.VerifyResult.prototype.hasRwSetVerifyFailTxs = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.consensus.RwSetVerifyFailTxs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.RwSetVerifyFailTxs.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.RwSetVerifyFailTxs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.RwSetVerifyFailTxs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RwSetVerifyFailTxs.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.RwSetVerifyFailTxs}
 */
proto.consensus.RwSetVerifyFailTxs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.RwSetVerifyFailTxs;
  return proto.consensus.RwSetVerifyFailTxs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.RwSetVerifyFailTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.RwSetVerifyFailTxs}
 */
proto.consensus.RwSetVerifyFailTxs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.RwSetVerifyFailTxs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.RwSetVerifyFailTxs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.RwSetVerifyFailTxs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RwSetVerifyFailTxs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTxIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.consensus.RwSetVerifyFailTxs.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.RwSetVerifyFailTxs} returns this
 */
proto.consensus.RwSetVerifyFailTxs.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string tx_ids = 2;
 * @return {!Array<string>}
 */
proto.consensus.RwSetVerifyFailTxs.prototype.getTxIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.consensus.RwSetVerifyFailTxs} returns this
 */
proto.consensus.RwSetVerifyFailTxs.prototype.setTxIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.consensus.RwSetVerifyFailTxs} returns this
 */
proto.consensus.RwSetVerifyFailTxs.prototype.addTxIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.RwSetVerifyFailTxs} returns this
 */
proto.consensus.RwSetVerifyFailTxs.prototype.clearTxIdsList = function() {
  return this.setTxIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.ProposalBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.ProposalBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.ProposalBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.ProposalBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && common_block_pb.Block.toObject(includeInstance, f),
    txsRwSetMap: (f = msg.getTxsRwSetMap()) ? f.toObject(includeInstance, proto.common.TxRWSet.toObject) : [],
    cutBlock: (f = msg.getCutBlock()) && common_block_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.ProposalBlock}
 */
proto.consensus.ProposalBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.ProposalBlock;
  return proto.consensus.ProposalBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.ProposalBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.ProposalBlock}
 */
proto.consensus.ProposalBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = msg.getTxsRwSetMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.TxRWSet.deserializeBinaryFromReader, "", new proto.common.TxRWSet());
         });
      break;
    case 3:
      var value = new common_block_pb.Block;
      reader.readMessage(value,common_block_pb.Block.deserializeBinaryFromReader);
      msg.setCutBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.ProposalBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.ProposalBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.ProposalBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.ProposalBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getTxsRwSetMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.TxRWSet.serializeBinaryToWriter);
  }
  f = message.getCutBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_block_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Block block = 1;
 * @return {?proto.common.Block}
 */
proto.consensus.ProposalBlock.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.consensus.ProposalBlock} returns this
*/
proto.consensus.ProposalBlock.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.ProposalBlock} returns this
 */
proto.consensus.ProposalBlock.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ProposalBlock.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, common.TxRWSet> txs_rw_set = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.TxRWSet>}
 */
proto.consensus.ProposalBlock.prototype.getTxsRwSetMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.TxRWSet>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.common.TxRWSet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.consensus.ProposalBlock} returns this
 */
proto.consensus.ProposalBlock.prototype.clearTxsRwSetMap = function() {
  this.getTxsRwSetMap().clear();
  return this;};


/**
 * optional common.Block cut_block = 3;
 * @return {?proto.common.Block}
 */
proto.consensus.ProposalBlock.prototype.getCutBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_block_pb.Block, 3));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.consensus.ProposalBlock} returns this
*/
proto.consensus.ProposalBlock.prototype.setCutBlock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.ProposalBlock} returns this
 */
proto.consensus.ProposalBlock.prototype.clearCutBlock = function() {
  return this.setCutBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ProposalBlock.prototype.hasCutBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.BlockHeaderConsensusArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.BlockHeaderConsensusArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.BlockHeaderConsensusArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    view: jspb.Message.getFieldWithDefault(msg, 3, 0),
    consensusData: (f = msg.getConsensusData()) && common_rwset_pb.TxRWSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.BlockHeaderConsensusArgs}
 */
proto.consensus.BlockHeaderConsensusArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.BlockHeaderConsensusArgs;
  return proto.consensus.BlockHeaderConsensusArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.BlockHeaderConsensusArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.BlockHeaderConsensusArgs}
 */
proto.consensus.BlockHeaderConsensusArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConsensusType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setView(value);
      break;
    case 4:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.setConsensusData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.BlockHeaderConsensusArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.BlockHeaderConsensusArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.BlockHeaderConsensusArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusType();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getView();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getConsensusData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 consensus_type = 1;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getConsensusType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setConsensusType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 round = 2;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 view = 3;
 * @return {number}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getView = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.setView = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional common.TxRWSet consensus_data = 4;
 * @return {?proto.common.TxRWSet}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.getConsensusData = function() {
  return /** @type{?proto.common.TxRWSet} */ (
    jspb.Message.getWrapperField(this, common_rwset_pb.TxRWSet, 4));
};


/**
 * @param {?proto.common.TxRWSet|undefined} value
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
*/
proto.consensus.BlockHeaderConsensusArgs.prototype.setConsensusData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.consensus.BlockHeaderConsensusArgs} returns this
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.clearConsensusData = function() {
  return this.setConsensusData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.BlockHeaderConsensusArgs.prototype.hasConsensusData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.GovernanceMember.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.GovernanceMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.GovernanceMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.GovernanceMember;
  return proto.consensus.GovernanceMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.GovernanceMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.GovernanceMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.GovernanceMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.GovernanceMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.consensus.GovernanceMember.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.consensus.GovernanceMember} returns this
 */
proto.consensus.GovernanceMember.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.consensus.GovernanceMember.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceMember} returns this
 */
proto.consensus.GovernanceMember.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.consensus.GovernanceContract.repeatedFields_ = [15,16,17,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.GovernanceContract.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.GovernanceContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.GovernanceContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    curMaxIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skipTimeoutCommit: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    configSequence: jspb.Message.getFieldWithDefault(msg, 6, 0),
    n: jspb.Message.getFieldWithDefault(msg, 7, 0),
    minQuorumForQc: jspb.Message.getFieldWithDefault(msg, 8, 0),
    cachedLen: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nextSwitchHeight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    transitBlock: jspb.Message.getFieldWithDefault(msg, 11, 0),
    blockNumPerEpoch: jspb.Message.getFieldWithDefault(msg, 12, 0),
    validatorNum: jspb.Message.getFieldWithDefault(msg, 13, 0),
    nodeProposeRound: jspb.Message.getFieldWithDefault(msg, 14, 0),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    nextValidatorsList: jspb.Message.toObjectList(msg.getNextValidatorsList(),
    proto.consensus.GovernanceMember.toObject, includeInstance),
    lastMinQuorumForQc: jspb.Message.getFieldWithDefault(msg, 18, 0),
    maxbftRoundTimeoutMill: jspb.Message.getFieldWithDefault(msg, 19, 0),
    maxbftRoundTimeoutIntervalMill: jspb.Message.getFieldWithDefault(msg, 20, 0),
    lastValidatorsList: jspb.Message.toObjectList(msg.getLastValidatorsList(),
    proto.consensus.GovernanceMember.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.GovernanceContract}
 */
proto.consensus.GovernanceContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.GovernanceContract;
  return proto.consensus.GovernanceContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.GovernanceContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.GovernanceContract}
 */
proto.consensus.GovernanceContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochId(value);
      break;
    case 2:
      var value = /** @type {!proto.consensus.ConsensusType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurMaxIndex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipTimeoutCommit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigSequence(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setN(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinQuorumForQc(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCachedLen(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSwitchHeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransitBlock(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumPerEpoch(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorNum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNodeProposeRound(value);
      break;
    case 15:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 16:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 17:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addNextValidators(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastMinQuorumForQc(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxbftRoundTimeoutMill(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxbftRoundTimeoutIntervalMill(value);
      break;
    case 21:
      var value = new proto.consensus.GovernanceMember;
      reader.readMessage(value,proto.consensus.GovernanceMember.deserializeBinaryFromReader);
      msg.addLastValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.GovernanceContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.GovernanceContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.GovernanceContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.GovernanceContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurMaxIndex();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSkipTimeoutCommit();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getConfigSequence();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getN();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMinQuorumForQc();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getCachedLen();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getNextSwitchHeight();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getTransitBlock();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getBlockNumPerEpoch();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getValidatorNum();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getNodeProposeRound();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getNextValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
  f = message.getLastMinQuorumForQc();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getMaxbftRoundTimeoutMill();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getMaxbftRoundTimeoutIntervalMill();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getLastValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.consensus.GovernanceMember.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 epoch_id = 1;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getEpochId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setEpochId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ConsensusType type = 2;
 * @return {!proto.consensus.ConsensusType}
 */
proto.consensus.GovernanceContract.prototype.getType = function() {
  return /** @type {!proto.consensus.ConsensusType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.consensus.ConsensusType} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 cur_max_index = 3;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getCurMaxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setCurMaxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool skip_timeout_commit = 4;
 * @return {boolean}
 */
proto.consensus.GovernanceContract.prototype.getSkipTimeoutCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setSkipTimeoutCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 config_sequence = 6;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getConfigSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setConfigSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 n = 7;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 min_quorum_for_qc = 8;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getMinQuorumForQc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setMinQuorumForQc = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 cached_len = 9;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getCachedLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setCachedLen = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 next_switch_height = 10;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getNextSwitchHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setNextSwitchHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 transit_block = 11;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getTransitBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setTransitBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 block_num_per_epoch = 12;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getBlockNumPerEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setBlockNumPerEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 validator_num = 13;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getValidatorNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setValidatorNum = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 node_propose_round = 14;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getNodeProposeRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setNodeProposeRound = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated GovernanceMember members = 15;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 15));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * repeated GovernanceMember validators = 16;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 16));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * repeated GovernanceMember next_validators = 17;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getNextValidatorsList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 17));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setNextValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addNextValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearNextValidatorsList = function() {
  return this.setNextValidatorsList([]);
};


/**
 * optional uint64 last_min_quorum_for_qc = 18;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getLastMinQuorumForQc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setLastMinQuorumForQc = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 maxbft_round_timeout_mill = 19;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getMaxbftRoundTimeoutMill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setMaxbftRoundTimeoutMill = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 maxbft_round_timeout_interval_mill = 20;
 * @return {number}
 */
proto.consensus.GovernanceContract.prototype.getMaxbftRoundTimeoutIntervalMill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.setMaxbftRoundTimeoutIntervalMill = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * repeated GovernanceMember last_validators = 21;
 * @return {!Array<!proto.consensus.GovernanceMember>}
 */
proto.consensus.GovernanceContract.prototype.getLastValidatorsList = function() {
  return /** @type{!Array<!proto.consensus.GovernanceMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.consensus.GovernanceMember, 21));
};


/**
 * @param {!Array<!proto.consensus.GovernanceMember>} value
 * @return {!proto.consensus.GovernanceContract} returns this
*/
proto.consensus.GovernanceContract.prototype.setLastValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.consensus.GovernanceMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.consensus.GovernanceMember}
 */
proto.consensus.GovernanceContract.prototype.addLastValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.consensus.GovernanceMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.consensus.GovernanceContract} returns this
 */
proto.consensus.GovernanceContract.prototype.clearLastValidatorsList = function() {
  return this.setLastValidatorsList([]);
};


/**
 * @enum {number}
 */
proto.consensus.ConsensusType = {
  SOLO: 0,
  TBFT: 1,
  MBFT: 2,
  MAXBFT: 3,
  RAFT: 4,
  DPOS: 5,
  POW: 10
};

goog.object.extend(exports, proto.consensus);
