/**
 * @fileoverview gRPC-Web generated client stub for tee
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.1
// source: tee/enclave_outcall.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_result_pb = require('../common/result_pb.js')
const proto = {};
proto.tee = require('./enclave_outcall_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tee.EnclaveOutCallServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tee.EnclaveOutCallServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tee.OutCallGetRequest,
 *   !proto.common.ContractResult>}
 */
const methodDescriptor_EnclaveOutCallServer_OutCallGet = new grpc.web.MethodDescriptor(
  '/tee.EnclaveOutCallServer/OutCallGet',
  grpc.web.MethodType.UNARY,
  proto.tee.OutCallGetRequest,
  common_result_pb.ContractResult,
  /**
   * @param {!proto.tee.OutCallGetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_result_pb.ContractResult.deserializeBinary
);


/**
 * @param {!proto.tee.OutCallGetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.ContractResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.ContractResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveOutCallServerClient.prototype.outCallGet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveOutCallServer/OutCallGet',
      request,
      metadata || {},
      methodDescriptor_EnclaveOutCallServer_OutCallGet,
      callback);
};


/**
 * @param {!proto.tee.OutCallGetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.ContractResult>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveOutCallServerPromiseClient.prototype.outCallGet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveOutCallServer/OutCallGet',
      request,
      metadata || {},
      methodDescriptor_EnclaveOutCallServer_OutCallGet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tee.OutCallPutRequest,
 *   !proto.common.ContractResult>}
 */
const methodDescriptor_EnclaveOutCallServer_OutCallPut = new grpc.web.MethodDescriptor(
  '/tee.EnclaveOutCallServer/OutCallPut',
  grpc.web.MethodType.UNARY,
  proto.tee.OutCallPutRequest,
  common_result_pb.ContractResult,
  /**
   * @param {!proto.tee.OutCallPutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_result_pb.ContractResult.deserializeBinary
);


/**
 * @param {!proto.tee.OutCallPutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.common.ContractResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.common.ContractResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tee.EnclaveOutCallServerClient.prototype.outCallPut =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tee.EnclaveOutCallServer/OutCallPut',
      request,
      metadata || {},
      methodDescriptor_EnclaveOutCallServer_OutCallPut,
      callback);
};


/**
 * @param {!proto.tee.OutCallPutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.common.ContractResult>}
 *     Promise that resolves to the response
 */
proto.tee.EnclaveOutCallServerPromiseClient.prototype.outCallPut =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tee.EnclaveOutCallServer/OutCallPut',
      request,
      metadata || {},
      methodDescriptor_EnclaveOutCallServer_OutCallPut);
};


module.exports = proto.tee;

