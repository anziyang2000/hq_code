// source: tee/enclave_server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_request_pb = require('../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
var common_result_pb = require('../common/result_pb.js');
goog.object.extend(proto, common_result_pb);
var common_rwset_pb = require('../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
goog.exportSymbol('proto.tee.EnclaveResponse', null, global);
goog.exportSymbol('proto.tee.EnclaveResponsePayload', null, global);
goog.exportSymbol('proto.tee.InitEnclaveRequest', null, global);
goog.exportSymbol('proto.tee.InitEnclaveResponse', null, global);
goog.exportSymbol('proto.tee.RemoteAttestationPayload', null, global);
goog.exportSymbol('proto.tee.RemoteAttestationRequest', null, global);
goog.exportSymbol('proto.tee.RemoteAttestationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.InitEnclaveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.InitEnclaveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.InitEnclaveRequest.displayName = 'proto.tee.InitEnclaveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.InitEnclaveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.InitEnclaveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.InitEnclaveResponse.displayName = 'proto.tee.InitEnclaveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.EnclaveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.EnclaveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.EnclaveResponse.displayName = 'proto.tee.EnclaveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.EnclaveResponsePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.EnclaveResponsePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.EnclaveResponsePayload.displayName = 'proto.tee.EnclaveResponsePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.RemoteAttestationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.RemoteAttestationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.RemoteAttestationRequest.displayName = 'proto.tee.RemoteAttestationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.RemoteAttestationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.RemoteAttestationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.RemoteAttestationResponse.displayName = 'proto.tee.RemoteAttestationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tee.RemoteAttestationPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tee.RemoteAttestationPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tee.RemoteAttestationPayload.displayName = 'proto.tee.RemoteAttestationPayload';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.InitEnclaveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.InitEnclaveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.InitEnclaveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.InitEnclaveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    teeCertSignAlg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    teeEncryptAlg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.InitEnclaveRequest}
 */
proto.tee.InitEnclaveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.InitEnclaveRequest;
  return proto.tee.InitEnclaveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.InitEnclaveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.InitEnclaveRequest}
 */
proto.tee.InitEnclaveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeeCertSignAlg(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeeEncryptAlg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.InitEnclaveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.InitEnclaveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.InitEnclaveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.InitEnclaveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeeCertSignAlg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTeeEncryptAlg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string tee_cert_sign_alg = 1;
 * @return {string}
 */
proto.tee.InitEnclaveRequest.prototype.getTeeCertSignAlg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.InitEnclaveRequest} returns this
 */
proto.tee.InitEnclaveRequest.prototype.setTeeCertSignAlg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tee_encrypt_alg = 2;
 * @return {string}
 */
proto.tee.InitEnclaveRequest.prototype.getTeeEncryptAlg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.InitEnclaveRequest} returns this
 */
proto.tee.InitEnclaveRequest.prototype.setTeeEncryptAlg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.InitEnclaveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.InitEnclaveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.InitEnclaveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.InitEnclaveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    teeReport: msg.getTeeReport_asB64(),
    teePubkey: msg.getTeePubkey_asB64(),
    teeCsr: msg.getTeeCsr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.InitEnclaveResponse}
 */
proto.tee.InitEnclaveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.InitEnclaveResponse;
  return proto.tee.InitEnclaveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.InitEnclaveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.InitEnclaveResponse}
 */
proto.tee.InitEnclaveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTeeReport(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTeePubkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTeeCsr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.InitEnclaveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.InitEnclaveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.InitEnclaveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.InitEnclaveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeeReport_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTeePubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTeeCsr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes tee_report = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeReport = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tee_report = 1;
 * This is a type-conversion wrapper around `getTeeReport()`
 * @return {string}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeReport_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTeeReport()));
};


/**
 * optional bytes tee_report = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTeeReport()`
 * @return {!Uint8Array}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeReport_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTeeReport()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.InitEnclaveResponse} returns this
 */
proto.tee.InitEnclaveResponse.prototype.setTeeReport = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes tee_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tee.InitEnclaveResponse.prototype.getTeePubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tee_pubkey = 2;
 * This is a type-conversion wrapper around `getTeePubkey()`
 * @return {string}
 */
proto.tee.InitEnclaveResponse.prototype.getTeePubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTeePubkey()));
};


/**
 * optional bytes tee_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTeePubkey()`
 * @return {!Uint8Array}
 */
proto.tee.InitEnclaveResponse.prototype.getTeePubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTeePubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.InitEnclaveResponse} returns this
 */
proto.tee.InitEnclaveResponse.prototype.setTeePubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes tee_csr = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeCsr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes tee_csr = 3;
 * This is a type-conversion wrapper around `getTeeCsr()`
 * @return {string}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeCsr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTeeCsr()));
};


/**
 * optional bytes tee_csr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTeeCsr()`
 * @return {!Uint8Array}
 */
proto.tee.InitEnclaveResponse.prototype.getTeeCsr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTeeCsr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.InitEnclaveResponse} returns this
 */
proto.tee.InitEnclaveResponse.prototype.setTeeCsr = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.EnclaveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.EnclaveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.EnclaveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.EnclaveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveResponsePayload: (f = msg.getEnclaveResponsePayload()) && proto.tee.EnclaveResponsePayload.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.EnclaveResponse}
 */
proto.tee.EnclaveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.EnclaveResponse;
  return proto.tee.EnclaveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.EnclaveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.EnclaveResponse}
 */
proto.tee.EnclaveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tee.EnclaveResponsePayload;
      reader.readMessage(value,proto.tee.EnclaveResponsePayload.deserializeBinaryFromReader);
      msg.setEnclaveResponsePayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.EnclaveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.EnclaveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.EnclaveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.EnclaveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveResponsePayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tee.EnclaveResponsePayload.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional EnclaveResponsePayload enclave_response_payload = 1;
 * @return {?proto.tee.EnclaveResponsePayload}
 */
proto.tee.EnclaveResponse.prototype.getEnclaveResponsePayload = function() {
  return /** @type{?proto.tee.EnclaveResponsePayload} */ (
    jspb.Message.getWrapperField(this, proto.tee.EnclaveResponsePayload, 1));
};


/**
 * @param {?proto.tee.EnclaveResponsePayload|undefined} value
 * @return {!proto.tee.EnclaveResponse} returns this
*/
proto.tee.EnclaveResponse.prototype.setEnclaveResponsePayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tee.EnclaveResponse} returns this
 */
proto.tee.EnclaveResponse.prototype.clearEnclaveResponsePayload = function() {
  return this.setEnclaveResponsePayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tee.EnclaveResponse.prototype.hasEnclaveResponsePayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tee.EnclaveResponse.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tee.EnclaveResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tee.EnclaveResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.EnclaveResponse} returns this
 */
proto.tee.EnclaveResponse.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.EnclaveResponsePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.EnclaveResponsePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.EnclaveResponsePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.EnclaveResponsePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractResult: (f = msg.getContractResult()) && common_result_pb.ContractResult.toObject(includeInstance, f),
    txRwset: (f = msg.getTxRwset()) && common_rwset_pb.TxRWSet.toObject(includeInstance, f),
    txRequest: (f = msg.getTxRequest()) && common_request_pb.TxRequest.toObject(includeInstance, f),
    contractName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    contractHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reportHash: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.EnclaveResponsePayload}
 */
proto.tee.EnclaveResponsePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.EnclaveResponsePayload;
  return proto.tee.EnclaveResponsePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.EnclaveResponsePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.EnclaveResponsePayload}
 */
proto.tee.EnclaveResponsePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_result_pb.ContractResult;
      reader.readMessage(value,common_result_pb.ContractResult.deserializeBinaryFromReader);
      msg.setContractResult(value);
      break;
    case 2:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.setTxRwset(value);
      break;
    case 3:
      var value = new common_request_pb.TxRequest;
      reader.readMessage(value,common_request_pb.TxRequest.deserializeBinaryFromReader);
      msg.setTxRequest(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractHash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.EnclaveResponsePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.EnclaveResponsePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.EnclaveResponsePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.EnclaveResponsePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_result_pb.ContractResult.serializeBinaryToWriter
    );
  }
  f = message.getTxRwset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
  f = message.getTxRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_request_pb.TxRequest.serializeBinaryToWriter
    );
  }
  f = message.getContractName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContractHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReportHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional common.ContractResult contract_result = 1;
 * @return {?proto.common.ContractResult}
 */
proto.tee.EnclaveResponsePayload.prototype.getContractResult = function() {
  return /** @type{?proto.common.ContractResult} */ (
    jspb.Message.getWrapperField(this, common_result_pb.ContractResult, 1));
};


/**
 * @param {?proto.common.ContractResult|undefined} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
*/
proto.tee.EnclaveResponsePayload.prototype.setContractResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.clearContractResult = function() {
  return this.setContractResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tee.EnclaveResponsePayload.prototype.hasContractResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.TxRWSet tx_rwset = 2;
 * @return {?proto.common.TxRWSet}
 */
proto.tee.EnclaveResponsePayload.prototype.getTxRwset = function() {
  return /** @type{?proto.common.TxRWSet} */ (
    jspb.Message.getWrapperField(this, common_rwset_pb.TxRWSet, 2));
};


/**
 * @param {?proto.common.TxRWSet|undefined} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
*/
proto.tee.EnclaveResponsePayload.prototype.setTxRwset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.clearTxRwset = function() {
  return this.setTxRwset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tee.EnclaveResponsePayload.prototype.hasTxRwset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional common.TxRequest tx_request = 3;
 * @return {?proto.common.TxRequest}
 */
proto.tee.EnclaveResponsePayload.prototype.getTxRequest = function() {
  return /** @type{?proto.common.TxRequest} */ (
    jspb.Message.getWrapperField(this, common_request_pb.TxRequest, 3));
};


/**
 * @param {?proto.common.TxRequest|undefined} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
*/
proto.tee.EnclaveResponsePayload.prototype.setTxRequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.clearTxRequest = function() {
  return this.setTxRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tee.EnclaveResponsePayload.prototype.hasTxRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string contract_name = 4;
 * @return {string}
 */
proto.tee.EnclaveResponsePayload.prototype.getContractName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.setContractName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string contract_version = 5;
 * @return {string}
 */
proto.tee.EnclaveResponsePayload.prototype.getContractVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.setContractVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string contract_hash = 6;
 * @return {string}
 */
proto.tee.EnclaveResponsePayload.prototype.getContractHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.setContractHash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string report_hash = 7;
 * @return {string}
 */
proto.tee.EnclaveResponsePayload.prototype.getReportHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.EnclaveResponsePayload} returns this
 */
proto.tee.EnclaveResponsePayload.prototype.setReportHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.RemoteAttestationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.RemoteAttestationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.RemoteAttestationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.RemoteAttestationRequest}
 */
proto.tee.RemoteAttestationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.RemoteAttestationRequest;
  return proto.tee.RemoteAttestationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.RemoteAttestationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.RemoteAttestationRequest}
 */
proto.tee.RemoteAttestationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.RemoteAttestationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.RemoteAttestationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.tee.RemoteAttestationRequest.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.RemoteAttestationRequest} returns this
 */
proto.tee.RemoteAttestationRequest.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.RemoteAttestationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.RemoteAttestationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.RemoteAttestationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteAttestationPayload: (f = msg.getRemoteAttestationPayload()) && proto.tee.RemoteAttestationPayload.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.RemoteAttestationResponse}
 */
proto.tee.RemoteAttestationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.RemoteAttestationResponse;
  return proto.tee.RemoteAttestationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.RemoteAttestationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.RemoteAttestationResponse}
 */
proto.tee.RemoteAttestationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tee.RemoteAttestationPayload;
      reader.readMessage(value,proto.tee.RemoteAttestationPayload.deserializeBinaryFromReader);
      msg.setRemoteAttestationPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.RemoteAttestationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.RemoteAttestationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteAttestationPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tee.RemoteAttestationPayload.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional RemoteAttestationPayload remote_attestation_payload = 1;
 * @return {?proto.tee.RemoteAttestationPayload}
 */
proto.tee.RemoteAttestationResponse.prototype.getRemoteAttestationPayload = function() {
  return /** @type{?proto.tee.RemoteAttestationPayload} */ (
    jspb.Message.getWrapperField(this, proto.tee.RemoteAttestationPayload, 1));
};


/**
 * @param {?proto.tee.RemoteAttestationPayload|undefined} value
 * @return {!proto.tee.RemoteAttestationResponse} returns this
*/
proto.tee.RemoteAttestationResponse.prototype.setRemoteAttestationPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tee.RemoteAttestationResponse} returns this
 */
proto.tee.RemoteAttestationResponse.prototype.clearRemoteAttestationPayload = function() {
  return this.setRemoteAttestationPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tee.RemoteAttestationResponse.prototype.hasRemoteAttestationPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tee.RemoteAttestationResponse.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tee.RemoteAttestationResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.RemoteAttestationResponse} returns this
 */
proto.tee.RemoteAttestationResponse.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tee.RemoteAttestationPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.tee.RemoteAttestationPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tee.RemoteAttestationPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getFieldWithDefault(msg, 1, ""),
    report: msg.getReport_asB64(),
    teeCert: msg.getTeeCert_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tee.RemoteAttestationPayload}
 */
proto.tee.RemoteAttestationPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tee.RemoteAttestationPayload;
  return proto.tee.RemoteAttestationPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tee.RemoteAttestationPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tee.RemoteAttestationPayload}
 */
proto.tee.RemoteAttestationPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReport(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTeeCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tee.RemoteAttestationPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tee.RemoteAttestationPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tee.RemoteAttestationPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReport_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTeeCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.tee.RemoteAttestationPayload.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tee.RemoteAttestationPayload} returns this
 */
proto.tee.RemoteAttestationPayload.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes report = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tee.RemoteAttestationPayload.prototype.getReport = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes report = 2;
 * This is a type-conversion wrapper around `getReport()`
 * @return {string}
 */
proto.tee.RemoteAttestationPayload.prototype.getReport_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReport()));
};


/**
 * optional bytes report = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReport()`
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationPayload.prototype.getReport_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReport()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.RemoteAttestationPayload} returns this
 */
proto.tee.RemoteAttestationPayload.prototype.setReport = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes tee_cert = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tee.RemoteAttestationPayload.prototype.getTeeCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes tee_cert = 3;
 * This is a type-conversion wrapper around `getTeeCert()`
 * @return {string}
 */
proto.tee.RemoteAttestationPayload.prototype.getTeeCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTeeCert()));
};


/**
 * optional bytes tee_cert = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTeeCert()`
 * @return {!Uint8Array}
 */
proto.tee.RemoteAttestationPayload.prototype.getTeeCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTeeCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tee.RemoteAttestationPayload} returns this
 */
proto.tee.RemoteAttestationPayload.prototype.setTeeCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.tee);
