// source: syscontract/account_manager.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.syscontract.AccountMultiSign', null, global);
goog.exportSymbol('proto.syscontract.AccountMultiSignsReq', null, global);
goog.exportSymbol('proto.syscontract.GasAccountFunction', null, global);
goog.exportSymbol('proto.syscontract.RechargeGas', null, global);
goog.exportSymbol('proto.syscontract.RechargeGasReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.AccountMultiSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.AccountMultiSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.AccountMultiSign.displayName = 'proto.syscontract.AccountMultiSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.AccountMultiSignsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.AccountMultiSignsReq.repeatedFields_, null);
};
goog.inherits(proto.syscontract.AccountMultiSignsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.AccountMultiSignsReq.displayName = 'proto.syscontract.AccountMultiSignsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.RechargeGas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.syscontract.RechargeGas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.RechargeGas.displayName = 'proto.syscontract.RechargeGas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.syscontract.RechargeGasReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.syscontract.RechargeGasReq.repeatedFields_, null);
};
goog.inherits(proto.syscontract.RechargeGasReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.syscontract.RechargeGasReq.displayName = 'proto.syscontract.RechargeGasReq';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.AccountMultiSign.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.AccountMultiSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.AccountMultiSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.AccountMultiSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloads: msg.getPayloads_asB64(),
    clientSign: msg.getClientSign_asB64(),
    publicKeyInfo: msg.getPublicKeyInfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.AccountMultiSign}
 */
proto.syscontract.AccountMultiSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.AccountMultiSign;
  return proto.syscontract.AccountMultiSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.AccountMultiSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.AccountMultiSign}
 */
proto.syscontract.AccountMultiSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayloads(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientSign(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKeyInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.AccountMultiSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.AccountMultiSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.AccountMultiSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.AccountMultiSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloads_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClientSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPublicKeyInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes payloads = 1;
 * @return {!(string|Uint8Array)}
 */
proto.syscontract.AccountMultiSign.prototype.getPayloads = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payloads = 1;
 * This is a type-conversion wrapper around `getPayloads()`
 * @return {string}
 */
proto.syscontract.AccountMultiSign.prototype.getPayloads_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayloads()));
};


/**
 * optional bytes payloads = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloads()`
 * @return {!Uint8Array}
 */
proto.syscontract.AccountMultiSign.prototype.getPayloads_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayloads()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.syscontract.AccountMultiSign} returns this
 */
proto.syscontract.AccountMultiSign.prototype.setPayloads = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes client_sign = 2;
 * @return {!(string|Uint8Array)}
 */
proto.syscontract.AccountMultiSign.prototype.getClientSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes client_sign = 2;
 * This is a type-conversion wrapper around `getClientSign()`
 * @return {string}
 */
proto.syscontract.AccountMultiSign.prototype.getClientSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientSign()));
};


/**
 * optional bytes client_sign = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientSign()`
 * @return {!Uint8Array}
 */
proto.syscontract.AccountMultiSign.prototype.getClientSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientSign()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.syscontract.AccountMultiSign} returns this
 */
proto.syscontract.AccountMultiSign.prototype.setClientSign = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes public_key_info = 3;
 * @return {!(string|Uint8Array)}
 */
proto.syscontract.AccountMultiSign.prototype.getPublicKeyInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes public_key_info = 3;
 * This is a type-conversion wrapper around `getPublicKeyInfo()`
 * @return {string}
 */
proto.syscontract.AccountMultiSign.prototype.getPublicKeyInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKeyInfo()));
};


/**
 * optional bytes public_key_info = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKeyInfo()`
 * @return {!Uint8Array}
 */
proto.syscontract.AccountMultiSign.prototype.getPublicKeyInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKeyInfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.syscontract.AccountMultiSign} returns this
 */
proto.syscontract.AccountMultiSign.prototype.setPublicKeyInfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.AccountMultiSignsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.AccountMultiSignsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.AccountMultiSignsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.AccountMultiSignsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.AccountMultiSignsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    gasMultiSignsList: jspb.Message.toObjectList(msg.getGasMultiSignsList(),
    proto.syscontract.AccountMultiSign.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.AccountMultiSignsReq}
 */
proto.syscontract.AccountMultiSignsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.AccountMultiSignsReq;
  return proto.syscontract.AccountMultiSignsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.AccountMultiSignsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.AccountMultiSignsReq}
 */
proto.syscontract.AccountMultiSignsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.AccountMultiSign;
      reader.readMessage(value,proto.syscontract.AccountMultiSign.deserializeBinaryFromReader);
      msg.addGasMultiSigns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.AccountMultiSignsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.AccountMultiSignsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.AccountMultiSignsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.AccountMultiSignsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGasMultiSignsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.syscontract.AccountMultiSign.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountMultiSign gas_multi_signs = 1;
 * @return {!Array<!proto.syscontract.AccountMultiSign>}
 */
proto.syscontract.AccountMultiSignsReq.prototype.getGasMultiSignsList = function() {
  return /** @type{!Array<!proto.syscontract.AccountMultiSign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.AccountMultiSign, 1));
};


/**
 * @param {!Array<!proto.syscontract.AccountMultiSign>} value
 * @return {!proto.syscontract.AccountMultiSignsReq} returns this
*/
proto.syscontract.AccountMultiSignsReq.prototype.setGasMultiSignsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.syscontract.AccountMultiSign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.AccountMultiSign}
 */
proto.syscontract.AccountMultiSignsReq.prototype.addGasMultiSigns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.syscontract.AccountMultiSign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.AccountMultiSignsReq} returns this
 */
proto.syscontract.AccountMultiSignsReq.prototype.clearGasMultiSignsList = function() {
  return this.setGasMultiSignsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.RechargeGas.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.RechargeGas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.RechargeGas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RechargeGas.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gasAmount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.RechargeGas}
 */
proto.syscontract.RechargeGas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.RechargeGas;
  return proto.syscontract.RechargeGas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.RechargeGas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.RechargeGas}
 */
proto.syscontract.RechargeGas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.RechargeGas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.RechargeGas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.RechargeGas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RechargeGas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGasAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.syscontract.RechargeGas.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.syscontract.RechargeGas} returns this
 */
proto.syscontract.RechargeGas.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 gas_amount = 2;
 * @return {number}
 */
proto.syscontract.RechargeGas.prototype.getGasAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.syscontract.RechargeGas} returns this
 */
proto.syscontract.RechargeGas.prototype.setGasAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.syscontract.RechargeGasReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.syscontract.RechargeGasReq.prototype.toObject = function(opt_includeInstance) {
  return proto.syscontract.RechargeGasReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.syscontract.RechargeGasReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RechargeGasReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchRechargeGasList: jspb.Message.toObjectList(msg.getBatchRechargeGasList(),
    proto.syscontract.RechargeGas.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.syscontract.RechargeGasReq}
 */
proto.syscontract.RechargeGasReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.syscontract.RechargeGasReq;
  return proto.syscontract.RechargeGasReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.syscontract.RechargeGasReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.syscontract.RechargeGasReq}
 */
proto.syscontract.RechargeGasReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.syscontract.RechargeGas;
      reader.readMessage(value,proto.syscontract.RechargeGas.deserializeBinaryFromReader);
      msg.addBatchRechargeGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.syscontract.RechargeGasReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.syscontract.RechargeGasReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.syscontract.RechargeGasReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.syscontract.RechargeGasReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchRechargeGasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.syscontract.RechargeGas.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RechargeGas batch_recharge_gas = 1;
 * @return {!Array<!proto.syscontract.RechargeGas>}
 */
proto.syscontract.RechargeGasReq.prototype.getBatchRechargeGasList = function() {
  return /** @type{!Array<!proto.syscontract.RechargeGas>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.syscontract.RechargeGas, 1));
};


/**
 * @param {!Array<!proto.syscontract.RechargeGas>} value
 * @return {!proto.syscontract.RechargeGasReq} returns this
*/
proto.syscontract.RechargeGasReq.prototype.setBatchRechargeGasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.syscontract.RechargeGas=} opt_value
 * @param {number=} opt_index
 * @return {!proto.syscontract.RechargeGas}
 */
proto.syscontract.RechargeGasReq.prototype.addBatchRechargeGas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.syscontract.RechargeGas, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.syscontract.RechargeGasReq} returns this
 */
proto.syscontract.RechargeGasReq.prototype.clearBatchRechargeGasList = function() {
  return this.setBatchRechargeGasList([]);
};


/**
 * @enum {number}
 */
proto.syscontract.GasAccountFunction = {
  SET_ADMIN: 0,
  GET_ADMIN: 1,
  RECHARGE_GAS: 2,
  GET_BALANCE: 3,
  CHARGE_GAS: 4,
  FROZEN_ACCOUNT: 5,
  UNFROZEN_ACCOUNT: 6,
  ACCOUNT_STATUS: 7,
  REFUND_GAS: 8,
  REFUND_GAS_VM: 9,
  CHARGE_GAS_FOR_MULTI_ACCOUNT: 10
};

goog.object.extend(exports, proto.syscontract);
