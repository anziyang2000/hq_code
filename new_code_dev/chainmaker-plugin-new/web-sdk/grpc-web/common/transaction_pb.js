// source: common/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_request_pb = require('../common/request_pb.js');
goog.object.extend(proto, common_request_pb);
var common_result_pb = require('../common/result_pb.js');
goog.object.extend(proto, common_result_pb);
var common_rwset_pb = require('../common/rwset_pb.js');
goog.object.extend(proto, common_rwset_pb);
goog.exportSymbol('proto.common.Transaction', null, global);
goog.exportSymbol('proto.common.TransactionInfo', null, global);
goog.exportSymbol('proto.common.TransactionInfoWithRWSet', null, global);
goog.exportSymbol('proto.common.TransactionWithRWSet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.Transaction.repeatedFields_, null);
};
goog.inherits(proto.common.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Transaction.displayName = 'proto.common.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TransactionInfo.displayName = 'proto.common.TransactionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TransactionWithRWSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TransactionWithRWSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TransactionWithRWSet.displayName = 'proto.common.TransactionWithRWSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TransactionInfoWithRWSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TransactionInfoWithRWSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.TransactionInfoWithRWSet.displayName = 'proto.common.TransactionInfoWithRWSet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.Transaction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && common_request_pb.Payload.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f),
    endorsersList: jspb.Message.toObjectList(msg.getEndorsersList(),
    common_request_pb.EndorsementEntry.toObject, includeInstance),
    result: (f = msg.getResult()) && common_result_pb.Result.toObject(includeInstance, f),
    payer: (f = msg.getPayer()) && common_request_pb.EndorsementEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Transaction}
 */
proto.common.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Transaction;
  return proto.common.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Transaction}
 */
proto.common.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_request_pb.Payload;
      reader.readMessage(value,common_request_pb.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.addEndorsers(value);
      break;
    case 4:
      var value = new common_result_pb.Result;
      reader.readMessage(value,common_result_pb.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 5:
      var value = new common_request_pb.EndorsementEntry;
      reader.readMessage(value,common_request_pb.EndorsementEntry.deserializeBinaryFromReader);
      msg.setPayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_request_pb.Payload.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
  f = message.getEndorsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_result_pb.Result.serializeBinaryToWriter
    );
  }
  f = message.getPayer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_request_pb.EndorsementEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.common.Payload}
 */
proto.common.Transaction.prototype.getPayload = function() {
  return /** @type{?proto.common.Payload} */ (
    jspb.Message.getWrapperField(this, common_request_pb.Payload, 1));
};


/**
 * @param {?proto.common.Payload|undefined} value
 * @return {!proto.common.Transaction} returns this
*/
proto.common.Transaction.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Transaction} returns this
 */
proto.common.Transaction.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Transaction.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EndorsementEntry sender = 2;
 * @return {?proto.common.EndorsementEntry}
 */
proto.common.Transaction.prototype.getSender = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 2));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.common.Transaction} returns this
*/
proto.common.Transaction.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Transaction} returns this
 */
proto.common.Transaction.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Transaction.prototype.hasSender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EndorsementEntry endorsers = 3;
 * @return {!Array<!proto.common.EndorsementEntry>}
 */
proto.common.Transaction.prototype.getEndorsersList = function() {
  return /** @type{!Array<!proto.common.EndorsementEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_request_pb.EndorsementEntry, 3));
};


/**
 * @param {!Array<!proto.common.EndorsementEntry>} value
 * @return {!proto.common.Transaction} returns this
*/
proto.common.Transaction.prototype.setEndorsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.EndorsementEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.EndorsementEntry}
 */
proto.common.Transaction.prototype.addEndorsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.EndorsementEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.Transaction} returns this
 */
proto.common.Transaction.prototype.clearEndorsersList = function() {
  return this.setEndorsersList([]);
};


/**
 * optional Result result = 4;
 * @return {?proto.common.Result}
 */
proto.common.Transaction.prototype.getResult = function() {
  return /** @type{?proto.common.Result} */ (
    jspb.Message.getWrapperField(this, common_result_pb.Result, 4));
};


/**
 * @param {?proto.common.Result|undefined} value
 * @return {!proto.common.Transaction} returns this
*/
proto.common.Transaction.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Transaction} returns this
 */
proto.common.Transaction.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Transaction.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EndorsementEntry payer = 5;
 * @return {?proto.common.EndorsementEntry}
 */
proto.common.Transaction.prototype.getPayer = function() {
  return /** @type{?proto.common.EndorsementEntry} */ (
    jspb.Message.getWrapperField(this, common_request_pb.EndorsementEntry, 5));
};


/**
 * @param {?proto.common.EndorsementEntry|undefined} value
 * @return {!proto.common.Transaction} returns this
*/
proto.common.Transaction.prototype.setPayer = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Transaction} returns this
 */
proto.common.Transaction.prototype.clearPayer = function() {
  return this.setPayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Transaction.prototype.hasPayer = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TransactionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TransactionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.common.Transaction.toObject(includeInstance, f),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockHash: msg.getBlockHash_asB64(),
    txIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TransactionInfo}
 */
proto.common.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TransactionInfo;
  return proto.common.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TransactionInfo}
 */
proto.common.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Transaction;
      reader.readMessage(value,proto.common.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.common.Transaction}
 */
proto.common.TransactionInfo.prototype.getTransaction = function() {
  return /** @type{?proto.common.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.common.Transaction, 1));
};


/**
 * @param {?proto.common.Transaction|undefined} value
 * @return {!proto.common.TransactionInfo} returns this
*/
proto.common.TransactionInfo.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionInfo} returns this
 */
proto.common.TransactionInfo.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionInfo.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 block_height = 2;
 * @return {number}
 */
proto.common.TransactionInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfo} returns this
 */
proto.common.TransactionInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.common.TransactionInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.common.TransactionInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.common.TransactionInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.TransactionInfo} returns this
 */
proto.common.TransactionInfo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 tx_index = 4;
 * @return {number}
 */
proto.common.TransactionInfo.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfo} returns this
 */
proto.common.TransactionInfo.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 block_timestamp = 5;
 * @return {number}
 */
proto.common.TransactionInfo.prototype.getBlockTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfo} returns this
 */
proto.common.TransactionInfo.prototype.setBlockTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TransactionWithRWSet.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TransactionWithRWSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TransactionWithRWSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionWithRWSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.common.Transaction.toObject(includeInstance, f),
    rwSet: (f = msg.getRwSet()) && common_rwset_pb.TxRWSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TransactionWithRWSet}
 */
proto.common.TransactionWithRWSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TransactionWithRWSet;
  return proto.common.TransactionWithRWSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TransactionWithRWSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TransactionWithRWSet}
 */
proto.common.TransactionWithRWSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Transaction;
      reader.readMessage(value,proto.common.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.setRwSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TransactionWithRWSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TransactionWithRWSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TransactionWithRWSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionWithRWSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getRwSet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.common.Transaction}
 */
proto.common.TransactionWithRWSet.prototype.getTransaction = function() {
  return /** @type{?proto.common.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.common.Transaction, 1));
};


/**
 * @param {?proto.common.Transaction|undefined} value
 * @return {!proto.common.TransactionWithRWSet} returns this
*/
proto.common.TransactionWithRWSet.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionWithRWSet} returns this
 */
proto.common.TransactionWithRWSet.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionWithRWSet.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxRWSet rw_set = 2;
 * @return {?proto.common.TxRWSet}
 */
proto.common.TransactionWithRWSet.prototype.getRwSet = function() {
  return /** @type{?proto.common.TxRWSet} */ (
    jspb.Message.getWrapperField(this, common_rwset_pb.TxRWSet, 2));
};


/**
 * @param {?proto.common.TxRWSet|undefined} value
 * @return {!proto.common.TransactionWithRWSet} returns this
*/
proto.common.TransactionWithRWSet.prototype.setRwSet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionWithRWSet} returns this
 */
proto.common.TransactionWithRWSet.prototype.clearRwSet = function() {
  return this.setRwSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionWithRWSet.prototype.hasRwSet = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TransactionInfoWithRWSet.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TransactionInfoWithRWSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TransactionInfoWithRWSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionInfoWithRWSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.common.Transaction.toObject(includeInstance, f),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockHash: msg.getBlockHash_asB64(),
    txIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rwSet: (f = msg.getRwSet()) && common_rwset_pb.TxRWSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TransactionInfoWithRWSet}
 */
proto.common.TransactionInfoWithRWSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TransactionInfoWithRWSet;
  return proto.common.TransactionInfoWithRWSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TransactionInfoWithRWSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TransactionInfoWithRWSet}
 */
proto.common.TransactionInfoWithRWSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Transaction;
      reader.readMessage(value,proto.common.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockTimestamp(value);
      break;
    case 6:
      var value = new common_rwset_pb.TxRWSet;
      reader.readMessage(value,common_rwset_pb.TxRWSet.deserializeBinaryFromReader);
      msg.setRwSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TransactionInfoWithRWSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TransactionInfoWithRWSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TransactionInfoWithRWSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TransactionInfoWithRWSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getRwSet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_rwset_pb.TxRWSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.common.Transaction}
 */
proto.common.TransactionInfoWithRWSet.prototype.getTransaction = function() {
  return /** @type{?proto.common.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.common.Transaction, 1));
};


/**
 * @param {?proto.common.Transaction|undefined} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
*/
proto.common.TransactionInfoWithRWSet.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionInfoWithRWSet.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 block_height = 2;
 * @return {number}
 */
proto.common.TransactionInfoWithRWSet.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.common.TransactionInfoWithRWSet.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.common.TransactionInfoWithRWSet.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.common.TransactionInfoWithRWSet.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 tx_index = 4;
 * @return {number}
 */
proto.common.TransactionInfoWithRWSet.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 block_timestamp = 5;
 * @return {number}
 */
proto.common.TransactionInfoWithRWSet.prototype.getBlockTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.setBlockTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional TxRWSet rw_set = 6;
 * @return {?proto.common.TxRWSet}
 */
proto.common.TransactionInfoWithRWSet.prototype.getRwSet = function() {
  return /** @type{?proto.common.TxRWSet} */ (
    jspb.Message.getWrapperField(this, common_rwset_pb.TxRWSet, 6));
};


/**
 * @param {?proto.common.TxRWSet|undefined} value
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
*/
proto.common.TransactionInfoWithRWSet.prototype.setRwSet = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.TransactionInfoWithRWSet} returns this
 */
proto.common.TransactionInfoWithRWSet.prototype.clearRwSet = function() {
  return this.setRwSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.TransactionInfoWithRWSet.prototype.hasRwSet = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.common);
